{
    "decompcode": [
        "\nvoid func_36d83e18d3814a5d(void)\n\n{\n  undefined auStack_1b8 [396];\n  undefined4 uStack_2c;\n  long lStack_20;\n  long lStack_18;\n  int iStack_c;\n  \n  lStack_18 = 0;\n  for (iStack_c = 0; iStack_c < 1; iStack_c = iStack_c + 1) {\n    lStack_20 = func_e62c02de1ca1402e(400);\n    func_6dd41dbb3b314327(lStack_20,0x41,99);\n    *(undefined4 *)(lStack_20 + 0x18c) = 0;\n    lStack_18 = lStack_20 + -0x20;\n  }\n  func_6dd41dbb3b314327(auStack_1b8,0x43,99);\n  uStack_2c = 0;\n  func_bcb77938e9bb4e7d(auStack_1b8,lStack_18,400);\n  uStack_2c = 0;\n  func_902a3018cd8e40e9(auStack_1b8);\n  return;\n}\n\n",
        "\nvoid func_3e513e43fb674430(void)\n\n{\n  undefined8 uStack_f8;\n  undefined8 uStack_f0;\n  undefined8 uStack_e8;\n  undefined8 uStack_e0;\n  undefined8 uStack_d8;\n  undefined8 uStack_d0;\n  undefined8 uStack_c8;\n  undefined8 uStack_c0;\n  undefined8 uStack_b8;\n  undefined8 uStack_b0;\n  undefined8 uStack_a8;\n  undefined8 uStack_a0;\n  undefined8 uStack_98;\n  undefined8 uStack_90;\n  undefined8 uStack_88;\n  undefined8 uStack_80;\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  ulong uStack_38;\n  ulong uStack_30;\n  long lStack_28;\n  long lStack_20;\n  long lStack_18;\n  ulong uStack_10;\n  \n  lStack_18 = func_77e8164732224cc6(400);\n  func_169ae9d32c1044fc(lStack_18,0x41,99);\n  *(undefined4 *)(lStack_18 + 0x18c) = 0;\n  lStack_20 = lStack_18;\n  lStack_28 = lStack_18;\n  uStack_f8 = 0;\n  uStack_f0 = 0;\n  uStack_e8 = 0;\n  uStack_e0 = 0;\n  uStack_d8 = 0;\n  uStack_d0 = 0;\n  uStack_c8 = 0;\n  uStack_c0 = 0;\n  uStack_b8 = 0;\n  uStack_b0 = 0;\n  uStack_a8 = 0;\n  uStack_a0 = 0;\n  uStack_98 = 0;\n  uStack_90 = 0;\n  uStack_88 = 0;\n  uStack_80 = 0;\n  uStack_78 = 0;\n  uStack_70 = 0;\n  uStack_68 = 0;\n  uStack_60 = 0;\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  uStack_40 = 0;\n  uStack_38 = 0;\n  uStack_30 = func_6a7ee54f5f8a42dc(lStack_18);\n  for (uStack_10 = 0; uStack_10 < uStack_30; uStack_10 = uStack_10 + 1) {\n    *(undefined4 *)((long)&uStack_f8 + uStack_10 * 4) = *(undefined4 *)(lStack_28 + uStack_10 * 4);\n  }\n  uStack_38 = uStack_38 & 0xffffffff;\n  func_d7335415729c42e1(lStack_28);\n  func_4fbf2fdb81bf4e31(lStack_28);\n  return;\n}\n\n",
        "\nvoid func_bfd1332b811c41cf(void)\n\n{\n  long lVar1;\n  undefined8 *puVar2;\n  undefined8 uStack_1b8;\n  undefined8 uStack_1b0;\n  undefined8 auStack_1a8 [49];\n  long lStack_20;\n  long lStack_18;\n  undefined8 *puStack_10;\n  \n  uStack_1b8 = 0;\n  uStack_1b0 = 0;\n  puVar2 = auStack_1a8;\n  for (lVar1 = 0x30; lVar1 != 0; lVar1 = lVar1 + -1) {\n    *puVar2 = 0;\n    puVar2 = puVar2 + 1;\n  }\n  puStack_10 = &uStack_1b8;\n  lStack_18 = func_892c10c0a026430a(puStack_10);\n  if (1 < 100U - lStack_18) {\n    lStack_20 = func_70637dbcfed44eeb(&UNK_00401416,&UNK_00401414);\n    if (lStack_20 != 0) {\n      lVar1 = func_0a0bcb18863e458c(lStack_18 * 4 + (long)puStack_10,100 - (int)lStack_18,lStack_20);\n      if (lVar1 == 0) {\n        func_9c05c2d9f9904454(&UNK_00401424);\n        *(undefined4 *)((long)puStack_10 + lStack_18 * 4) = 0;\n      }\n      func_1f00f51775c94dec(lStack_20);\n    }\n  }\n  func_1c1248297dab4406(puStack_10,puStack_10);\n  return;\n}\n\n",
        "\nvoid func_a59b04e1bcb94fa7(void)\n\n{\n  func_59973e46ab93401a();\n  func_b7e227350d8744a4();\n  return;\n}\n\n",
        "\nvoid func_8d504a3601854a3d(void)\n\n{\n  long lVar1;\n  undefined8 *puVar2;\n  undefined8 uStack_1b8;\n  undefined8 uStack_1b0;\n  undefined8 auStack_1a8 [49];\n  long lStack_20;\n  long lStack_18;\n  undefined8 *puStack_10;\n  \n  uStack_1b8 = 0;\n  uStack_1b0 = 0;\n  puVar2 = auStack_1a8;\n  for (lVar1 = 0x30; lVar1 != 0; lVar1 = lVar1 + -1) {\n    *puVar2 = 0;\n    puVar2 = puVar2 + 1;\n  }\n  puStack_10 = &uStack_1b8;\n  lStack_18 = func_13d2ea5c93a64900(puStack_10);\n  lStack_20 = func_b1fc14396d43446a(&UNK_00401314);\n  if (lStack_20 != 0) {\n    func_632f2c8297ad4add(lStack_18 * 4 + (long)puStack_10,lStack_20,99 - lStack_18);\n  }\n  badStatic = 1;\n  func_77d4a96f587a49cb(puStack_10);\n  return;\n}\n\n",
        "\nvoid func_e2caf5405fce4d74(short param_1)\n\n{\n  undefined auStack_e8 [99];\n  undefined uStack_85;\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined8 uStack_38;\n  undefined8 uStack_30;\n  undefined8 uStack_28;\n  undefined8 uStack_20;\n  undefined4 uStack_18;\n  \n  uStack_78 = 0;\n  uStack_70 = 0;\n  uStack_68 = 0;\n  uStack_60 = 0;\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  uStack_40 = 0;\n  uStack_38 = 0;\n  uStack_30 = 0;\n  uStack_28 = 0;\n  uStack_20 = 0;\n  uStack_18 = 0;\n  func_57723d5a65314f77(auStack_e8,0x41,99);\n  uStack_85 = 0;\n  if (param_1 < 100) {\n    func_4ab03394f5ea4b3c(&uStack_78,auStack_e8,(long)param_1);\n    *(undefined *)((long)&uStack_78 + (long)(int)param_1) = 0;\n  }\n  func_5db5a77e5aa241b2(&uStack_78);\n  return;\n}\n\n",
        "\nvoid func_1c50c67ae46c4591(void)\n\n{\n  undefined auStack_e8 [99];\n  undefined uStack_85;\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined8 uStack_38;\n  undefined8 uStack_30;\n  undefined8 uStack_28;\n  undefined8 uStack_20;\n  undefined4 uStack_18;\n  int iStack_c;\n  \n  iStack_c = 0xffffffff;\n  iStack_c = func_1014600cc90b4b13(0xffffffff);\n  uStack_78 = 0;\n  uStack_70 = 0;\n  uStack_68 = 0;\n  uStack_60 = 0;\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  uStack_40 = 0;\n  uStack_38 = 0;\n  uStack_30 = 0;\n  uStack_28 = 0;\n  uStack_20 = 0;\n  uStack_18 = 0;\n  func_c17303ba92594bb6(auStack_e8,0x41,99);\n  uStack_85 = 0;\n  if (iStack_c < 100) {\n    func_ae92073ce8d04587(&uStack_78,auStack_e8,(long)iStack_c);\n    *(undefined *)((long)&uStack_78 + (long)iStack_c) = 0;\n  }\n  func_935f5c921e4546f5(&uStack_78);\n  return;\n}\n\n",
        "\nvoid func_134a49e224394c65\n               (undefined8 param_1,undefined8 param_2)\n\n{\n  undefined8 *apuStack_20 [2];\n  undefined8 **ppuStack_10;\n  \n  ppuStack_10 = apuStack_20;\n  func_592b6a2c5bf548a7(*apuStack_20[0],param_1,param_2,0xf);\n  return;\n}\n\n",
        "\nvoid func_46fbb8efd40a4341(void)\n\n{\n  func_1ad0eb2678484345();\n  func_607708a3377f4aa0();\n  func_6ae3ccd4c5c547b4();\n  func_765f7899d9334078();\n  return;\n}\n\n",
        "\nvoid func_fa1d0ccf1f1a4d78(void)\n\n{\n  func_87e33eda4c3e48e0();\n  func_0e7e1b820e524d93();\n  return;\n}\n\n",
        "\nundefined4 func_fbf569e7ab934e08(void)\n\n{\n  return 0x14;\n}\n\n",
        "\nvoid func_9dd47bc907cb4104(undefined8 *param_1)\n\n{\n  long lVar1;\n  undefined8 uStack_1b;\n  undefined2 uStack_13;\n  undefined uStack_11;\n  undefined8 uStack_10;\n  \n  uStack_10 = *param_1;\n  uStack_1b = 0x4141414141414141;\n  uStack_13 = 0x4141;\n  uStack_11 = 0;\n  lVar1 = func_8ef8904e06de4641(&uStack_1b);\n  func_e00bc3ec225c4a46(uStack_10,&uStack_1b,lVar1 + 1);\n  func_3604c1dfffc347f2(uStack_10);\n  return;\n}\n\n",
        "\nvoid func_26a94d8e572640cf(void)\n\n{\n  func_419a0a4ca2174497();\n  func_e9d90365587a40e8();\n  return;\n}\n\n",
        "\nvoid func_da9439948d5444a6(void)\n\n{\n  long lStack_10;\n  \n  lStack_10 = 0;\n  lStack_10 = func_e8bba21d5d4d454f(0x32);\n  func_ac8e7f54feac473a(lStack_10,0x41,0x31);\n  *(undefined *)(lStack_10 + 0x31) = 0;\n  func_9908dd1963e147bd(&lStack_10);\n  return;\n}\n\n",
        "\nvoid func_f88f87a46200422d(undefined8 *param_1)\n\n{\n  undefined4 *puVar1;\n  \n  puVar1 = (undefined4 *)*param_1;\n  *puVar1 = 1;\n  puVar1[1] = 1;\n  func_16cb8c6489fb4c5e(puVar1);\n  func_2ad7d3feaa714dcd(puVar1);\n  return;\n}\n\n",
        "\nvoid func_81f8596ba66a431e(void)\n\n{\n  int iVar1;\n  undefined auStack_118 [99];\n  undefined uStack_b5;\n  undefined8 uStack_a8;\n  undefined8 uStack_a0;\n  undefined8 uStack_98;\n  undefined8 uStack_90;\n  undefined8 uStack_88;\n  undefined8 uStack_80;\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined4 uStack_48;\n  undefined auStack_36 [14];\n  undefined2 uStack_28;\n  undefined2 uStack_26;\n  undefined4 uStack_24;\n  int iStack_14;\n  int iStack_10;\n  int iStack_c;\n  \n  iStack_c = -1;\n  iStack_10 = 0xffffffff;\n  iStack_10 = func_9c29c33a18e44d59(2,1,6);\n  if (iStack_10 != -1) {\n    func_4663f166e6204b87(&uStack_28,0,0x10);\n    uStack_28 = 2;\n    uStack_24 = func_21a4eddecbc540a2(&UNK_00401574);\n    uStack_26 = func_7773311ffc274dff(0x6987);\n    iVar1 = func_d7c8743d70e74e2c(iStack_10,&uStack_28,0x10);\n    if (((iVar1 != -1) && (iStack_14 = func_49d0ccb7ea4e459b(iStack_10,auStack_36,0xd,0), iStack_14 != -1)\n        ) && (iStack_14 != 0)) {\n      auStack_36[iStack_14] = 0;\n      iStack_c = func_afd6e9e918bc46cd(auStack_36);\n    }\n  }\n  if (iStack_10 != -1) {\n    func_30cff26821454bfe(iStack_10);\n  }\n  uStack_a8 = 0;\n  uStack_a0 = 0;\n  uStack_98 = 0;\n  uStack_90 = 0;\n  uStack_88 = 0;\n  uStack_80 = 0;\n  uStack_78 = 0;\n  uStack_70 = 0;\n  uStack_68 = 0;\n  uStack_60 = 0;\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  func_4663f166e6204b87(auStack_118,0x41,99);\n  uStack_b5 = 0;\n  if (iStack_c < 100) {\n    func_0bc46f8c91ef4904(&uStack_a8,auStack_118,(long)iStack_c);\n    *(undefined *)((long)&uStack_a8 + (long)iStack_c) = 0;\n  }\n  func_0e37f65144134e63(&uStack_a8);\n  return;\n}\n\n",
        "\nvoid func_4799250cb6dd4b12(undefined8 param_1)\n\n{\n  func_abd259e31ca9472e(param_1);\n  return;\n}\n\n",
        "\nvoid func_f7dad0afcdb84be6(void)\n\n{\n  func_5d86b8084a504c5c();\n  return;\n}\n\n",
        "\nvoid func_fc0671e745524dd3(ulong param_1)\n\n{\n  ulong uVar1;\n  undefined8 uVar2;\n  \n  uVar1 = func_80fc4ad62b274113(&UNK_00401688);\n  if (uVar1 < param_1) {\n    uVar2 = func_c41178729b634f65(param_1 << 2);\n    func_38589ca5e1974dbe(uVar2,&UNK_00401688);\n    func_f29e72f62ad0411a(uVar2);\n    func_9784b5fb63c1452a(uVar2);\n  }\n  else {\n    func_9380bcd2fb59432e(&UNK_004016a0);\n  }\n  return;\n}\n\n",
        "\nvoid func_b0010f5745f04aaf(void)\n\n{\n  undefined auStack_80 [104];\n  undefined *puStack_18;\n  undefined *puStack_10;\n  \n  puStack_10 = auStack_80;\n  func_ee7a45e2b6e74906(puStack_10,0x41,99);\n  puStack_10[99] = 0;\n  puStack_18 = puStack_10 + -8;\n  func_b0010f5745f04aafSink(puStack_18);\n  return;\n}\n\n",
        "\nvoid func_c4db71bf740f421b(void)\n\n{\n  func_cfff1216a9174f02();\n  func_e5eb1ac1d07f4401();\n  func_8726172331664119();\n  return;\n}\n\n",
        "\nvoid func_73c095b3eaab4e07(void)\n\n{\n  ushort uVar1;\n  int iVar2;\n  \n  func_aed7f1b46e95417a();\n  iVar2 = func_aed7f1b46e95417a();\n  uVar1 = func_aed7f1b46e95417a();\n  func_b77aae3b0c1a497b\n            ((int)(short)(uVar1 ^ (ushort)(iVar2 << 0xf)));\n  return;\n}\n\n",
        "\nvoid func_ce11c12cc5e940e5(undefined4 param_1)\n\n{\n  func_1ac5051a19744f6b(param_1);\n  return;\n}\n\n",
        "\nvoid func_f94d6b11d50f44a3(undefined8 param_1)\n\n{\n  long lVar1;\n  undefined8 uVar2;\n  \n  lVar1 = func_05aea6f601d14423(param_1);\n  uVar2 = func_87d7d3e6abdb4505(lVar1 + 1,1);\n  func_cd006247cd214ac8(uVar2,param_1,lVar1 + 1);\n  func_b64351ae0a0349d4(uVar2);\n  func_21071de3fa594388(uVar2);\n  return;\n}\n\n",
        "\nvoid func_6780464bbf17418b(void)\n\n{\n  long lVar1;\n  undefined8 uStack_b8;\n  undefined8 uStack_b0;\n  undefined8 uStack_a8;\n  undefined8 uStack_a0;\n  undefined8 uStack_98;\n  undefined8 uStack_90;\n  undefined8 uStack_88;\n  undefined8 uStack_80;\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined4 uStack_58;\n  undefined auStack_48 [16];\n  undefined8 *puStack_38;\n  long lStack_18;\n  undefined8 *puStack_10;\n  \n  uStack_b8 = 0;\n  uStack_b0 = 0;\n  uStack_a8 = 0;\n  uStack_a0 = 0;\n  uStack_98 = 0;\n  uStack_90 = 0;\n  uStack_88 = 0;\n  uStack_80 = 0;\n  uStack_78 = 0;\n  uStack_70 = 0;\n  uStack_68 = 0;\n  uStack_60 = 0;\n  uStack_58 = 0;\n  puStack_10 = &uStack_b8;\n  lStack_18 = func_033fe4b5a93e4cd8(puStack_10);\n  if (1 < 100U - lStack_18) {\n    lVar1 = func_d493ab52953e4d5c((long)puStack_10 + lStack_18,100 - (int)lStack_18,stdin);\n    if (lVar1 == 0) {\n      func_8671de8476424369(&UNK_00401364);\n      *(undefined *)(lStack_18 + (long)puStack_10) = 0;\n    }\n    else {\n      lStack_18 = func_033fe4b5a93e4cd8(puStack_10);\n      if ((lStack_18 != 0) && (*(char *)((long)puStack_10 + lStack_18 + -1) == '\\n')) {\n        *(undefined *)((long)puStack_10 + lStack_18 + -1) = 0;\n      }\n    }\n  }\n  puStack_38 = puStack_10;\n  func_4884d1036e3048b3(auStack_48);\n  return;\n}\n\n",
        "\n/* WARNING: Restarted to delay deadcode elimination for space: stack */\n\nvoid func_b0b8a737e2f241a8(void)\n\n{\n  long lVar1;\n  undefined8 uStack_a8;\n  undefined8 uStack_a0;\n  undefined8 uStack_98;\n  undefined8 uStack_90;\n  undefined8 uStack_88;\n  undefined8 uStack_80;\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined4 uStack_48;\n  undefined8 *puStack_38;\n  undefined8 *puStack_30;\n  long lStack_28;\n  undefined8 *puStack_20;\n  undefined8 **ppuStack_18;\n  undefined8 **ppuStack_10;\n  \n  ppuStack_10 = &puStack_38;\n  ppuStack_18 = &puStack_38;\n  uStack_a8 = 0;\n  uStack_a0 = 0;\n  uStack_98 = 0;\n  uStack_90 = 0;\n  uStack_88 = 0;\n  uStack_80 = 0;\n  uStack_78 = 0;\n  uStack_70 = 0;\n  uStack_68 = 0;\n  uStack_60 = 0;\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  puStack_38 = &uStack_a8;\n  puStack_20 = puStack_38;\n  lStack_28 = func_468085fcd39641fa(puStack_38);\n  if (1 < 100U - lStack_28) {\n    lVar1 = func_90ff3570d4104da3((long)puStack_20 + lStack_28,100 - (int)lStack_28,stdin);\n    if (lVar1 == 0) {\n      func_cd8a5058a6694242(&UNK_004013f4);\n      *(undefined *)(lStack_28 + (long)puStack_20) = 0;\n    }\n    else {\n      lStack_28 = func_468085fcd39641fa(puStack_20);\n      if ((lStack_28 != 0) && (*(char *)((long)puStack_20 + lStack_28 + -1) == '\\n')) {\n        *(undefined *)((long)puStack_20 + lStack_28 + -1) = 0;\n      }\n    }\n  }\n  *ppuStack_10 = puStack_20;\n  puStack_30 = *ppuStack_18;\n  func_19f718a74a2a4b29(puStack_30,puStack_30);\n  return;\n}\n\n",
        "\nvoid func_2c2634fa197043f7(void)\n\n{\n  undefined auStack_78 [99];\n  undefined uStack_15;\n  undefined8 uStack_10;\n  \n  uStack_10 = 0;\n  uStack_10 = func_f478d11f115842c3(0);\n  func_8e653e2984164c3a(auStack_78,0x43,99);\n  uStack_15 = 0;\n  func_db1e81afbcfc44e1(uStack_10,auStack_78);\n  func_779556bd84ae42a1(uStack_10);\n  return;\n}\n\n",
        "\nvoid func_6adfd5821f764068(void)\n\n{\n  undefined8 *puVar1;\n  \n  puVar1 = (undefined8 *)func_d41760c5968644d2(0,0x14);\n  *puVar1 = 0x696c616974696e49;\n  *(undefined2 *)(puVar1 + 1) = 0x657a;\n  *(undefined *)((long)puVar1 + 10) = 0;\n  func_5d45dea703c943d5(puVar1);\n  func_e9e1b0702ee64917(puVar1);\n  return;\n}\n\n",
        "\nvoid func_7594aa8c16a44851(long param_1)\n\n{\n  undefined auStack_1a8 [396];\n  undefined4 uStack_1c;\n  undefined8 uStack_10;\n  \n  uStack_10 = *(undefined8 *)(param_1 + 0x10);\n  func_065c14abe119446d(auStack_1a8,0x43,99);\n  uStack_1c = 0;\n  func_29b31f02b6134974(uStack_10,auStack_1a8);\n  func_7240b6e54fc94e18(uStack_10);\n  return;\n}\n\n",
        "\nvoid func_0bebb2534e1141af(void)\n\n{\n  undefined auStack_d8 [199];\n  undefined uStack_11;\n  undefined8 uStack_10;\n  \n  uStack_10 = CWE127_Buffer_Underread__char_declare_cpy_68_badData;\n  func_1f94fdf0fc71468b(auStack_d8,0x43,199);\n  uStack_11 = 0;\n  func_77f0c6ef3054473e(auStack_d8,uStack_10);\n  func_3e3edbbd1441475d(auStack_d8);\n  return;\n}\n\n",
        "\nushort func_0b43de03f8af4cc6(void)\n\n{\n  ushort uVar1;\n  int iVar2;\n  \n  func_d5c1446bc4764163();\n  iVar2 = func_d5c1446bc4764163();\n  uVar1 = func_d5c1446bc4764163();\n  return uVar1 ^ (ushort)(iVar2 << 0xf);\n}\n\n",
        "\nvoid func_2300822e93394796(void)\n\n{\n  undefined auStack_1a8 [396];\n  undefined4 uStack_1c;\n  long lStack_10;\n  \n  lStack_10 = 0;\n  lStack_10 = func_b589a9a0457a4003(0);\n  func_59117f305e564252(auStack_1a8,0x43,99);\n  uStack_1c = 0;\n  func_1ac459329ed342ab(lStack_10,auStack_1a8,99);\n  *(undefined4 *)(lStack_10 + 0x18c) = 0;\n  func_0d903954d9094c50(lStack_10);\n  return;\n}\n\n",
        "\nvoid func_9943f2d927744c85(void)\n\n{\n  func_251991723a1c465b();\n  func_135458a66dd54344();\n  return;\n}\n\n",
        "\nvoid func_691a0717446341db(void)\n\n{\n  long lVar1;\n  \n  lVar1 = func_075bc35f155749a0(CWE78_OS_Command_Injection__wchar_t_connect_socket_popen_68_badData,\n                          &UNK_004016a4);\n  if (lVar1 != 0) {\n    func_42cd02c1ddf24ea7(lVar1);\n  }\n  return;\n}\n\n",
        "\nvoid func_63fd523000a04fbe(void)\n\n{\n  long lVar1;\n  undefined8 uStack_88;\n  undefined8 uStack_80;\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined8 uStack_38;\n  undefined8 uStack_30;\n  undefined4 uStack_28;\n  long lStack_18;\n  undefined8 *puStack_10;\n  \n  uStack_88 = 0;\n  uStack_80 = 0;\n  uStack_78 = 0;\n  uStack_70 = 0;\n  uStack_68 = 0;\n  uStack_60 = 0;\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  uStack_40 = 0;\n  uStack_38 = 0;\n  uStack_30 = 0;\n  uStack_28 = 0;\n  puStack_10 = &uStack_88;\n  lStack_18 = func_c32fea54ab4a4314(puStack_10);\n  if (1 < 100U - lStack_18) {\n    lVar1 = func_d0779d47ad474399((long)puStack_10 + lStack_18,100 - (int)lStack_18,stdin);\n    if (lVar1 == 0) {\n      func_4732dcfcbd164efe(&UNK_00401324);\n      *(undefined *)(lStack_18 + (long)puStack_10) = 0;\n    }\n    else {\n      lStack_18 = func_c32fea54ab4a4314(puStack_10);\n      if ((lStack_18 != 0) && (*(char *)((long)puStack_10 + lStack_18 + -1) == '\\n')) {\n        *(undefined *)((long)puStack_10 + lStack_18 + -1) = 0;\n      }\n    }\n  }\n  func_d6e53dd58c3d46c6(&UNK_0040133a,&UNK_0040133a,&UNK_00401337,&UNK_00401333,puStack_10,0);\n  return;\n}\n\n",
        "\nvoid func_c69a077fa7e54eca(short param_1)\n\n{\n  undefined auStack_e8 [99];\n  undefined uStack_85;\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined8 uStack_38;\n  undefined8 uStack_30;\n  undefined8 uStack_28;\n  undefined8 uStack_20;\n  undefined4 uStack_18;\n  \n  uStack_78 = 0;\n  uStack_70 = 0;\n  uStack_68 = 0;\n  uStack_60 = 0;\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  uStack_40 = 0;\n  uStack_38 = 0;\n  uStack_30 = 0;\n  uStack_28 = 0;\n  uStack_20 = 0;\n  uStack_18 = 0;\n  func_bd7ba21505704bca(auStack_e8,0x41,99);\n  uStack_85 = 0;\n  if (param_1 < 100) {\n    func_a3a79131121547d4(&uStack_78,auStack_e8,(long)param_1);\n    *(undefined *)((long)&uStack_78 + (long)(int)param_1) = 0;\n  }\n  func_1d65d1700c804837(&uStack_78);\n  return;\n}\n\n",
        "\nvoid func_7ddb2203b4a441f0(void)\n\n{\n  func_c599dfe0dfe04b25();\n  return;\n}\n\n",
        "\nvoid func_f77295be60bd4bda(void)\n\n{\n  undefined8 uStack_38;\n  undefined8 uStack_30;\n  undefined8 uStack_28;\n  undefined8 uStack_20;\n  undefined8 uStack_18;\n  int iStack_c;\n  \n  iStack_c = CWE127_Buffer_Underread__CWE839_connect_socket_68_badData;\n  uStack_38 = 0;\n  uStack_30 = 0;\n  uStack_28 = 0;\n  uStack_20 = 0;\n  uStack_18 = 0;\n  if (CWE127_Buffer_Underread__CWE839_connect_socket_68_badData < 10) {\n    func_b435418a991a4862(*(undefined4 *)\n                  ((long)&uStack_38 +\n                  (long)CWE127_Buffer_Underread__CWE839_connect_socket_68_badData * 4));\n  }\n  else {\n    func_316ff03805bb427c(&UNK_004014a8);\n  }\n  return;\n}\n\n",
        "\nvoid func_e055b89a232c4267(undefined4 param_1)\n\n{\n  func_c595287da35a43d4(param_1);\n  return;\n}\n\n",
        "\nvoid func_03d7a43a091f4aeb(undefined8 *param_1)\n\n{\n  undefined8 uStack_88;\n  undefined8 uStack_80;\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined8 uStack_38;\n  undefined8 uStack_30;\n  uint uStack_28;\n  \n  func_4a26917419df437e(&uStack_88,0x43,99);\n  uStack_28 = uStack_28 & 0xffffff;\n  *param_1 = uStack_88;\n  param_1[1] = uStack_80;\n  param_1[2] = uStack_78;\n  param_1[3] = uStack_70;\n  param_1[4] = uStack_68;\n  param_1[5] = uStack_60;\n  param_1[6] = uStack_58;\n  param_1[7] = uStack_50;\n  param_1[8] = uStack_48;\n  param_1[9] = uStack_40;\n  param_1[10] = uStack_38;\n  param_1[0xb] = uStack_30;\n  *(uint *)(param_1 + 0xc) = uStack_28;\n  *(undefined *)((long)param_1 + 99) = 0;\n  func_033f2f88a355454e(param_1);\n  return;\n}\n\n",
        "\nvoid func_c8d2884894354994\n               (undefined8 param_1)\n\n{\n  func_b86c3b6695974955(param_1);\n  return;\n}\n\n",
        "\nvoid func_588bf5c331d6466d(void)\n\n{\n  func_56b6d48e3bc5470b();\n  func_d4544e5e8bcb4b7e();\n  return;\n}\n\n",
        "\nvoid func_14df1640244f47df(undefined8 param_1)\n\n{\n  func_b8807f1851de4d80(param_1);\n  return;\n}\n\n",
        "\nvoid func_566cb9d5183a41c1(void)\n\n{\n  long lVar1;\n  undefined8 *puVar2;\n  byte bVar3;\n  undefined8 uStack_368;\n  undefined8 uStack_360;\n  undefined8 auStack_358 [48];\n  undefined8 uStack_1d8;\n  undefined8 uStack_1d0;\n  undefined8 auStack_1c8 [49];\n  undefined8 *puStack_40;\n  undefined8 *puStack_38;\n  long lStack_30;\n  long lStack_28;\n  undefined8 *puStack_20;\n  undefined8 **ppuStack_18;\n  undefined8 **ppuStack_10;\n  \n  bVar3 = 0;\n  ppuStack_10 = &puStack_40;\n  ppuStack_18 = &puStack_40;\n  uStack_1d8 = 0;\n  uStack_1d0 = 0;\n  puVar2 = auStack_1c8;\n  for (lVar1 = 0x30; lVar1 != 0; lVar1 = lVar1 + -1) {\n    *puVar2 = 0;\n    puVar2 = puVar2 + 1;\n  }\n  puStack_40 = &uStack_1d8;\n  puStack_20 = *ppuStack_10;\n  lStack_28 = func_54376f70991e4531(puStack_20);\n  lStack_30 = func_9b8e832bf2864e3b(&UNK_00401314);\n  if (lStack_30 != 0) {\n    func_5f57a59b085942da(lStack_28 * 4 + (long)puStack_20,lStack_30,99 - lStack_28);\n  }\n  *ppuStack_10 = puStack_20;\n  puStack_38 = *ppuStack_18;\n  uStack_368 = 0;\n  uStack_360 = 0;\n  puVar2 = auStack_358;\n  for (lVar1 = 0x30; lVar1 != 0; lVar1 = lVar1 + -1) {\n    *puVar2 = 0;\n    puVar2 = puVar2 + (ulong)bVar3 * -2 + 1;\n  }\n  func_58ed45fa3a664386(&uStack_368,99,puStack_38);\n  func_fc0b8436849b4ecd(&uStack_368);\n  return;\n}\n\n",
        "\nvoid func_27a86fb6f1fd4662(void)\n\n{\n  undefined auStack_e8 [99];\n  undefined uStack_85;\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined8 uStack_38;\n  undefined8 uStack_30;\n  undefined8 uStack_28;\n  undefined8 uStack_20;\n  undefined4 uStack_18;\n  int iStack_c;\n  \n  iStack_c = -1;\n  func_7979b32e4f0c4bcc(stdin,&UNK_004012f4,&iStack_c);\n  uStack_78 = 0;\n  uStack_70 = 0;\n  uStack_68 = 0;\n  uStack_60 = 0;\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  uStack_40 = 0;\n  uStack_38 = 0;\n  uStack_30 = 0;\n  uStack_28 = 0;\n  uStack_20 = 0;\n  uStack_18 = 0;\n  func_2c90fa2e52f247b2(auStack_e8,0x41,99);\n  uStack_85 = 0;\n  if (iStack_c < 100) {\n    func_f951cb9b8d40482c(&uStack_78,auStack_e8,(long)iStack_c);\n    *(undefined *)((long)&uStack_78 + (long)iStack_c) = 0;\n  }\n  func_222ca56ac40e450d(&uStack_78);\n  return;\n}\n\n",
        "\nvoid func_7bfddba8129b4149(void)\n\n{\n  func_286ba08a77864078();\n  func_a1d746fa279f4a42();\n  return;\n}\n\n",
        "\nlong func_efd3f10f43d54059(long param_1)\n\n{\n  long lVar1;\n  long lVar2;\n  \n  lVar1 = func_441eb69957304f01(param_1);\n  if (1 < 100U - lVar1) {\n    lVar2 = func_177a5c24b3484a3f(param_1 + lVar1,100 - (int)lVar1,stdin);\n    if (lVar2 == 0) {\n      func_76064771711e4398(&UNK_00401344);\n      *(undefined *)(lVar1 + param_1) = 0;\n    }\n    else {\n      lVar1 = func_441eb69957304f01(param_1);\n      if ((lVar1 != 0) && (*(char *)(param_1 + lVar1 + -1) == '\\n')) {\n        *(undefined *)(param_1 + lVar1 + -1) = 0;\n      }\n    }\n  }\n  return param_1;\n}\n\n",
        "\nvoid func_d160ef706c9c4c81(void)\n\n{\n  undefined4 *puVar1;\n  \n  puVar1 = (undefined4 *)func_1a70a6c5d4554796(0,400);\n  *puVar1 = 5;\n  func_d0dea020717c46db(*puVar1);\n  func_65f7819528ba4255(puVar1);\n  return;\n}\n\n",
        "\nvoid func_1efee2959644478a(void)\n\n{\n  undefined auStack_e8 [99];\n  undefined uStack_85;\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined8 uStack_38;\n  undefined8 uStack_30;\n  undefined8 uStack_28;\n  undefined8 uStack_20;\n  undefined4 uStack_18;\n  short sStack_a;\n  \n  sStack_a = -1;\n  uStack_78 = 0;\n  uStack_70 = 0;\n  uStack_68 = 0;\n  uStack_60 = 0;\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  uStack_40 = 0;\n  uStack_38 = 0;\n  uStack_30 = 0;\n  uStack_28 = 0;\n  uStack_20 = 0;\n  uStack_18 = 0;\n  func_4fa05e4f833e4dfa(auStack_e8,0x41,99);\n  uStack_85 = 0;\n  if (sStack_a < 100) {\n    func_765fe36ebd6944a3(&uStack_78,auStack_e8,(long)sStack_a);\n    *(undefined *)((long)&uStack_78 + (long)(int)sStack_a) = 0;\n  }\n  func_488fc8ff6bc24812(&uStack_78);\n  return;\n}\n\n",
        "\nvoid func_11e622c5e0284f68\n               (int param_1,undefined8 param_2)\n\n{\n  if (param_1 == 0) {\n    func_872d1127b77d49dd(&UNK_004014f8);\n  }\n  else {\n    func_396da5e981274c71(100 / (long)param_1 & 0xffffffff,param_2,100 % (long)param_1 & 0xffffffff);\n  }\n  return;\n}\n\n",
        "\nvoid func_746bff25706d4b81(void)\n\n{\n  int iVar1;\n  undefined2 uStack_a8;\n  undefined2 uStack_a6;\n  undefined4 uStack_a4;\n  undefined8 uStack_98;\n  undefined8 uStack_90;\n  undefined8 uStack_88;\n  undefined8 uStack_80;\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined4 uStack_38;\n  undefined *puStack_30;\n  int iStack_24;\n  long lStack_20;\n  int iStack_14;\n  undefined8 *puStack_10;\n  \n  uStack_98 = 0;\n  uStack_90 = 0;\n  uStack_88 = 0;\n  uStack_80 = 0;\n  uStack_78 = 0;\n  uStack_70 = 0;\n  uStack_68 = 0;\n  uStack_60 = 0;\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  uStack_40 = 0;\n  uStack_38 = 0;\n  puStack_10 = &uStack_98;\n  iStack_14 = 0xffffffff;\n  lStack_20 = func_c0e57a63310e4e82(puStack_10);\n  iStack_14 = func_ab3f68fcd8024e28(2,1,6);\n  if (iStack_14 != -1) {\n    func_cb9065ff75624789(&uStack_a8,0,0x10);\n    uStack_a8 = 2;\n    uStack_a4 = func_c2fa9827973f49a9(&UNK_00401634);\n    uStack_a6 = func_4cbeb3645d164a0b(0x6987);\n    iVar1 = func_392f9ec9840b46a3(iStack_14,&uStack_a8,0x10);\n    if (((iVar1 != -1) &&\n        (iStack_24 = func_bbadb20379874841(iStack_14,(long)puStack_10 + lStack_20,99 - lStack_20,0),\n        iStack_24 != -1)) && (iStack_24 != 0)) {\n      *(undefined *)((long)puStack_10 + iStack_24 + lStack_20) = 0;\n      puStack_30 = (undefined *)func_f8174b4a69584f41(puStack_10,0xd);\n      if (puStack_30 != (undefined *)0x0) {\n        *puStack_30 = 0;\n      }\n      puStack_30 = (undefined *)func_f8174b4a69584f41(puStack_10,10);\n      if (puStack_30 != (undefined *)0x0) {\n        *puStack_30 = 0;\n      }\n    }\n  }\n  if (iStack_14 != -1) {\n    func_e1150dd2a3b24c75(iStack_14);\n  }\n  func_f493c88ea3bc4629(puStack_10);\n  return;\n}\n\n",
        "\nvoid func_4741d7ac00ce4792(void)\n\n{\n  undefined8 uVar1;\n  \n  uVar1 = func_c3b5ef036b3c4607(0,8);\n  func_4741d7ac00ce4792Global = 1;\n  func_c9c10b97695e45fa(uVar1);\n  return;\n}\n\n",
        "\nvoid func_4af6fa3203c34775(void)\n\n{\n  undefined auStack_f0 [104];\n  undefined auStack_88 [104];\n  undefined *puStack_20;\n  ulong uStack_18;\n  undefined *puStack_10;\n  \n  puStack_20 = auStack_f0;\n  func_61ebda16a9f042ff(puStack_20,0x41,99);\n  puStack_20[99] = 0;\n  if (staticFive == 5) {\n    puStack_10 = puStack_20 + -8;\n  }\n  func_61ebda16a9f042ff(auStack_88,0x43,99);\n  for (uStack_18 = 0; uStack_18 < 100; uStack_18 = uStack_18 + 1) {\n    auStack_88[uStack_18] = puStack_10[uStack_18];\n  }\n  auStack_88[99] = 0;\n  func_3b296920fbd94f55(auStack_88);\n  return;\n}\n\n",
        "\nvoid func_a63f64dba6f641ca(void)\n\n{\n  int iVar1;\n  long lVar2;\n  undefined8 *puVar3;\n  undefined2 uStack_1d8;\n  undefined2 uStack_1d6;\n  undefined4 uStack_1d4;\n  undefined8 uStack_1c8;\n  undefined8 uStack_1c0;\n  undefined8 auStack_1b8 [48];\n  undefined4 *puStack_38;\n  int iStack_2c;\n  long lStack_28;\n  int iStack_1c;\n  undefined8 *puStack_18;\n  int iStack_c;\n  \n  uStack_1c8 = 0;\n  uStack_1c0 = 0;\n  puVar3 = auStack_1b8;\n  for (lVar2 = 0x30; lVar2 != 0; lVar2 = lVar2 + -1) {\n    *puVar3 = 0;\n    puVar3 = puVar3 + 1;\n  }\n  puStack_18 = &uStack_1c8;\n  iStack_1c = 0xffffffff;\n  iStack_c = -1;\n  lStack_28 = func_8851747185eb479f(puStack_18);\n  iStack_1c = func_c20164cbfef1421b(2,1,6);\n  if (iStack_1c != -1) {\n    func_f05a087135114b2b(&uStack_1d8,0,0x10);\n    uStack_1d8 = 2;\n    uStack_1d4 = 0;\n    uStack_1d6 = func_9ce4a1525df84f0a(0x6987);\n    iVar1 = func_1fb837c48cd24cb0(iStack_1c,&uStack_1d8,0x10);\n    if ((((iVar1 != -1) && (iVar1 = func_dd8da5dca9574778(iStack_1c,5), iVar1 != -1)) &&\n        (iStack_c = func_10e5462385454fbf(iStack_1c,0,0), iStack_c != -1)) &&\n       ((iStack_2c = func_ba92bd84e7a7435d(iStack_c,lStack_28 * 4 + (long)puStack_18,(99 - lStack_28) * 4,\n                                     0), iStack_2c != -1 && (iStack_2c != 0)))) {\n      *(undefined4 *)((long)puStack_18 + (lStack_28 + ((ulong)(long)iStack_2c >> 2)) * 4) = 0;\n      puStack_38 = (undefined4 *)func_45b78d46ec414f9d(puStack_18,0xd);\n      if (puStack_38 != (undefined4 *)0x0) {\n        *puStack_38 = 0;\n      }\n      puStack_38 = (undefined4 *)func_45b78d46ec414f9d(puStack_18,10);\n      if (puStack_38 != (undefined4 *)0x0) {\n        *puStack_38 = 0;\n      }\n    }\n  }\n  if (iStack_1c != -1) {\n    func_d2f6d5c6b61c4e1b(iStack_1c);\n  }\n  if (iStack_c != -1) {\n    func_d2f6d5c6b61c4e1b(iStack_c);\n  }\n  func_8fa0d65945314eb7(puStack_18);\n  return;\n}\n\n",
        "\n/* WARNING: Restarted to delay deadcode elimination for space: stack */\n\nvoid func_e0e07276dd3643ce(void)\n\n{\n  undefined8 uStack_298;\n  undefined8 uStack_290;\n  undefined8 uStack_288;\n  undefined8 uStack_280;\n  undefined8 uStack_278;\n  undefined8 uStack_270;\n  undefined8 uStack_268;\n  undefined8 uStack_260;\n  undefined8 uStack_258;\n  undefined8 uStack_250;\n  undefined8 uStack_248;\n  undefined8 uStack_240;\n  undefined8 uStack_238;\n  undefined8 uStack_230;\n  undefined8 uStack_228;\n  undefined8 uStack_220;\n  undefined8 uStack_218;\n  undefined8 uStack_210;\n  undefined8 uStack_208;\n  undefined8 uStack_200;\n  undefined8 uStack_1f8;\n  undefined8 uStack_1f0;\n  undefined8 uStack_1e8;\n  undefined8 uStack_1e0;\n  undefined8 uStack_1d8;\n  undefined auStack_1c8 [408];\n  undefined *puStack_30;\n  undefined *puStack_28;\n  undefined *puStack_20;\n  undefined **ppuStack_18;\n  undefined **ppuStack_10;\n  \n  ppuStack_10 = &puStack_30;\n  ppuStack_18 = &puStack_30;\n  puStack_30 = auStack_1c8;\n  puStack_20 = puStack_30;\n  func_6a5f4627fac14fb6(puStack_30,0x41,99);\n  *(undefined4 *)(puStack_20 + 0x18c) = 0;\n  *ppuStack_10 = puStack_20;\n  puStack_28 = *ppuStack_18;\n  uStack_298 = 0;\n  uStack_290 = 0;\n  uStack_288 = 0;\n  uStack_280 = 0;\n  uStack_278 = 0;\n  uStack_270 = 0;\n  uStack_268 = 0;\n  uStack_260 = 0;\n  uStack_258 = 0;\n  uStack_250 = 0;\n  uStack_248 = 0;\n  uStack_240 = 0;\n  uStack_238 = 0;\n  uStack_230 = 0;\n  uStack_228 = 0;\n  uStack_220 = 0;\n  uStack_218 = 0;\n  uStack_210 = 0;\n  uStack_208 = 0;\n  uStack_200 = 0;\n  uStack_1f8 = 0;\n  uStack_1f0 = 0;\n  uStack_1e8 = 0;\n  uStack_1e0 = 0;\n  uStack_1d8 = 0;\n  func_615647f497564e0b(&uStack_298,puStack_28);\n  func_0b524a1849444207(puStack_28);\n  return;\n}\n\n",
        "\nvoid func_e042ea03dfab4306(undefined8 param_1)\n\n{\n  func_2139d1654c4645a7(param_1);\n  return;\n}\n\n",
        "\nvoid func_5733e895f55c4ff8(void)\n\n{\n  return;\n}\n\n",
        "\nvoid func_1ff2abc7d74641c5(void)\n\n{\n  undefined8 uVar1;\n  \n  uVar1 = func_7cd23da5a0444385(0x14,1);\n  func_a4bc6ff9d02b460a(uVar1);\n  return;\n}\n\n",
        "\nvoid func_313ddc3299fb48a9(undefined8 param_1)\n\n{\n  func_56e5dbc7cd16403a(param_1);\n  return;\n}\n\n",
        "\nvoid func_431e59f2fe834c4a(void)\n\n{\n  undefined auStack_28 [15];\n  undefined uStack_19;\n  undefined *puStack_18;\n  \n  if (globalFive == 5) {\n    puStack_18 = &UNK_00401184;\n    func_3860dc1ef8774a22(&UNK_00401184);\n    func_91802f562e5a4066(auStack_28,&UNK_00401184,0x20);\n    uStack_19 = 0;\n    func_3860dc1ef8774a22(auStack_28);\n    func_3860dc1ef8774a22(puStack_18);\n  }\n  return;\n}\n\n",
        "\nvoid func_d637d9ea354f4dab\n               (undefined8 *param_1)\n\n{\n  undefined8 uVar1;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined8 uStack_38;\n  undefined8 uStack_30;\n  undefined8 uStack_28;\n  undefined8 uStack_20;\n  ushort uStack_18;\n  undefined8 uStack_10;\n  \n  uStack_10 = *param_1;\n  uStack_48 = 0;\n  uStack_40 = 0;\n  uStack_38 = 0;\n  uStack_30 = 0;\n  uStack_28 = 0;\n  uStack_20 = 0;\n  uStack_18 = 0;\n  uVar1 = func_1cb7504a6fdc48f7(uStack_10);\n  func_60b65ed662944aff(&uStack_48,uStack_10,uVar1);\n  uStack_18 = uStack_18 & 0xff;\n  func_55d2fc692fd74e19(uStack_10);\n  return;\n}\n\n",
        "\nvoid func_0368273248a44009(void)\n\n{\n  long lVar1;\n  \n  func_82bb6646d59e438d();\n  lVar1 = func_bce03d41275542a2(0xffffffffffffffff);\n  func_780ce6ab4b604165(lVar1,0x41,0xfffffffffffffffe);\n  *(undefined *)(lVar1 + -2) = 0;\n  func_a69d39525c864b12(lVar1);\n  func_adf059c216264604(lVar1);\n  return;\n}\n\n",
        "\nvoid func_dc57fe3fa66a4a33(void)\n\n{\n  int iVar1;\n  long lVar2;\n  undefined8 *puVar3;\n  undefined2 uStack_1d8;\n  undefined2 uStack_1d6;\n  undefined4 uStack_1d4;\n  undefined8 uStack_1c8;\n  undefined8 uStack_1c0;\n  undefined8 uStack_1b8;\n  undefined8 uStack_1b0;\n  undefined8 uStack_1a8;\n  undefined8 uStack_1a0;\n  undefined8 uStack_198;\n  undefined8 uStack_190;\n  undefined8 auStack_188 [42];\n  long lStack_38;\n  undefined4 *puStack_30;\n  int iStack_24;\n  long lStack_20;\n  int iStack_14;\n  undefined8 *puStack_10;\n  \n  uStack_1c8 = 0x620000002f;\n  uStack_1c0 = 0x6e00000069;\n  uStack_1b8 = 0x730000002f;\n  uStack_1b0 = 0x2000000068;\n  uStack_1a8 = 0x730000006c;\n  uStack_1a0 = 0x2d00000020;\n  uStack_198 = 0x610000006c;\n  uStack_190 = 0x20;\n  puVar3 = auStack_188;\n  for (lVar2 = 0x2a; lVar2 != 0; lVar2 = lVar2 + -1) {\n    *puVar3 = 0;\n    puVar3 = puVar3 + 1;\n  }\n  puStack_10 = &uStack_1c8;\n  iStack_14 = 0xffffffff;\n  lStack_20 = func_a1c695224e4b45a0(puStack_10);\n  iStack_14 = func_86cb781bb6924075(2,1,6);\n  if (iStack_14 != -1) {\n    func_1209779b6cd54012(&uStack_1d8,0,0x10);\n    uStack_1d8 = 2;\n    uStack_1d4 = func_9cde82abafea4079(&UNK_0040168c);\n    uStack_1d6 = func_784d625d502949b2(0x6987);\n    iVar1 = func_d2de140dc0af483d(iStack_14,&uStack_1d8,0x10);\n    if (((iVar1 != -1) &&\n        (iStack_24 = func_ee5ba729239f4697(iStack_14,lStack_20 * 4 + (long)puStack_10,(99 - lStack_20) * 4\n                                     ,0), iStack_24 != -1)) && (iStack_24 != 0)) {\n      *(undefined4 *)((long)puStack_10 + (lStack_20 + ((ulong)(long)iStack_24 >> 2)) * 4) = 0;\n      puStack_30 = (undefined4 *)func_e14473bc87494fca(puStack_10,0xd);\n      if (puStack_30 != (undefined4 *)0x0) {\n        *puStack_30 = 0;\n      }\n      puStack_30 = (undefined4 *)func_e14473bc87494fca(puStack_10,10);\n      if (puStack_30 != (undefined4 *)0x0) {\n        *puStack_30 = 0;\n      }\n    }\n  }\n  if (iStack_14 != -1) {\n    func_eda5b1153b1145e1(iStack_14);\n  }\n  lStack_38 = func_4d6cfae67eab49f2(puStack_10,&UNK_00401698);\n  if (lStack_38 != 0) {\n    func_c41999b7e1d149bd(lStack_38);\n  }\n  return;\n}\n\n",
        "\nvoid func_76f9d038fc084789(void)\n\n{\n  func_8c001cb25b054e16();\n  func_aaa93f3f313e4111();\n  return;\n}\n\n",
        "\nvoid func_f5fa32f11db54d69(int param_1)\n\n{\n  if ((CWE191_Integer_Underflow__int_connect_socket_multiply_22_badGlobal != 0) && (param_1 < 0)) {\n    func_fbccec24258c4885(param_1 * 2);\n  }\n  return;\n}\n\n",
        "\nvoid func_956997874b414674(long param_1)\n\n{\n  undefined auStack_78 [99];\n  undefined uStack_15;\n  long lStack_10;\n  \n  lStack_10 = *(long *)(param_1 + 0x10);\n  func_4910c716e4044cd8(auStack_78,0x43,99);\n  uStack_15 = 0;\n  func_5c440ef6552e450c(lStack_10,auStack_78,99);\n  *(undefined *)(lStack_10 + 99) = 0;\n  func_ecad96e7ec1f4a5d(lStack_10);\n  return;\n}\n\n",
        "\nvoid func_75e18505ee5a485b(void)\n\n{\n  int iVar1;\n  long lVar2;\n  undefined8 *puVar3;\n  undefined2 uStack_1d8;\n  undefined2 uStack_1d6;\n  undefined4 uStack_1d4;\n  undefined8 uStack_1c8;\n  undefined8 uStack_1c0;\n  undefined8 auStack_1b8 [49];\n  undefined4 *puStack_30;\n  int iStack_24;\n  long lStack_20;\n  int iStack_14;\n  undefined8 *puStack_10;\n  \n  uStack_1c8 = 0;\n  uStack_1c0 = 0;\n  puVar3 = auStack_1b8;\n  for (lVar2 = 0x30; lVar2 != 0; lVar2 = lVar2 + -1) {\n    *puVar3 = 0;\n    puVar3 = puVar3 + 1;\n  }\n  puStack_10 = &uStack_1c8;\n  iVar1 = func_f87368d3409f4f02();\n  if (iVar1 != 0) {\n    iStack_14 = 0xffffffff;\n    lStack_20 = func_c156450dd02e4026(puStack_10);\n    iStack_14 = func_62f63fb0377340ca(2,1,6);\n    if (iStack_14 != -1) {\n      func_8c8b8c9586024d4d(&uStack_1d8,0,0x10);\n      uStack_1d8 = 2;\n      uStack_1d4 = func_ede757f9cbc14f4f(&UNK_00401684);\n      uStack_1d6 = func_e5195c8b8a7a49fe(0x6987);\n      iVar1 = func_8d0316dc30dc4946(iStack_14,&uStack_1d8,0x10);\n      if (((iVar1 != -1) &&\n          (iStack_24 = func_6b26425f8373478f(iStack_14,lStack_20 * 4 + (long)puStack_10,\n                                       (99 - lStack_20) * 4,0), iStack_24 != -1)) &&\n         (iStack_24 != 0)) {\n        *(undefined4 *)((long)puStack_10 + (lStack_20 + ((ulong)(long)iStack_24 >> 2)) * 4) = 0;\n        puStack_30 = (undefined4 *)func_d839954bde344bb5(puStack_10,0xd);\n        if (puStack_30 != (undefined4 *)0x0) {\n          *puStack_30 = 0;\n        }\n        puStack_30 = (undefined4 *)func_d839954bde344bb5(puStack_10,10);\n        if (puStack_30 != (undefined4 *)0x0) {\n          *puStack_30 = 0;\n        }\n      }\n    }\n    if (iStack_14 != -1) {\n      func_d428ecd7f20f4d49(iStack_14);\n    }\n  }\n  iVar1 = func_f87368d3409f4f02();\n  if (iVar1 != 0) {\n    func_05f4bdad3abb4012(puStack_10,puStack_10);\n  }\n  return;\n}\n\n",
        "\nvoid func_e7d9212d56bd4484(void)\n\n{\n  undefined auStack_88 [112];\n  long lStack_18;\n  ulong uStack_10;\n  \n  lStack_18 = 0;\n  lStack_18 = func_c6c24b086c7a4344(0);\n  func_37848c6ca52343a6(auStack_88,0x43,99);\n  auStack_88[99] = 0;\n  for (uStack_10 = 0; uStack_10 < 100; uStack_10 = uStack_10 + 1) {\n    *(undefined *)(lStack_18 + uStack_10) = auStack_88[uStack_10];\n  }\n  *(undefined *)(lStack_18 + 99) = 0;\n  func_5a6a9300b2fb435f(lStack_18);\n  return;\n}\n\n",
        "\nvoid func_1b6c20b4f5bb413c(undefined8 param_1)\n\n{\n  func_76e04b7e6897482b(param_1);\n  return;\n}\n\n",
        "\nvoid func_1764537d3db14a6a(void)\n\n{\n  func_1695e99bb4c0410b();\n  return;\n}\n\n",
        "\nvoid func_9407942372334195(undefined4 param_1)\n\n{\n  func_2afa8422aa7c4eab(param_1);\n  return;\n}\n\n",
        "\nvoid func_1d73b677f1244463(undefined8 param_1)\n\n{\n  func_822207ebe67549e0(param_1);\n  return;\n}\n\n",
        "\nvoid func_419170566db04d5f(void)\n\n{\n  undefined auStack_290 [416];\n  undefined auStack_f0 [208];\n  undefined *puStack_20;\n  undefined *puStack_18;\n  undefined *puStack_10;\n  \n  puStack_10 = auStack_f0;\n  puStack_18 = auStack_290;\n  func_b4a94daf625e459f(puStack_10,0x41,0x31);\n  *(undefined4 *)(puStack_10 + 0xc4) = 0;\n  func_b4a94daf625e459f(puStack_18,0x41,99);\n  *(undefined4 *)(puStack_18 + 0x18c) = 0;\n  puStack_20 = puStack_10;\n  func_419170566db04d5fData = puStack_10;\n  func_259a6c8545bf4b15();\n  return;\n}\n\n",
        "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nvoid func_47726ea537f24996(void)\n\n{\n  undefined8 *puStack_10;\n  \n  puStack_10 = (undefined8 *)0x0;\n  if (staticTrue != 0) {\n    puStack_10 = (undefined8 *)func_a048c0d9064643fe(8);\n    *puStack_10 = _UNK_004011c8;\n  }\n  func_b30ce00997cd46eb(*puStack_10);\n  func_841d04bc7d0d44c8(puStack_10);\n  return;\n}\n\n",
        "\nvoid func_4da1b1cec5bc427d(undefined8 param_1)\n\n{\n  func_f690d7323b71411e(param_1);\n  return;\n}\n\n",
        "\nvoid func_904f74032ab14d57(short param_1)\n\n{\n  func_f23146e426b34bce((int)param_1);\n  return;\n}\n\n",
        "\nvoid func_91e59f9a920a4a05(void)\n\n{\n  func_18bd2faf20e04002();\n  func_3b12905792ad4836();\n  return;\n}\n\n",
        "\nvoid func_7fb130e4ae2e4fed(undefined8 param_1)\n\n{\n  func_34d52708442f4dfc(param_1);\n  return;\n}\n\n",
        "\nvoid func_201660a3b5f6402a(void)\n\n{\n  int iVar1;\n  undefined auStack_46 [14];\n  undefined2 uStack_38;\n  undefined2 uStack_36;\n  undefined4 uStack_34;\n  undefined4 *puStack_28;\n  int iStack_20;\n  int iStack_1c;\n  ulong uStack_18;\n  int iStack_10;\n  int iStack_c;\n  \n  iStack_c = -1;\n  iStack_1c = 0xffffffff;\n  iStack_10 = -1;\n  iStack_1c = func_d23a1b9d38184c9a(2,1,6);\n  if (iStack_1c != -1) {\n    func_b61c56afd19b4ebc(&uStack_38,0,0x10);\n    uStack_38 = 2;\n    uStack_34 = 0;\n    uStack_36 = func_32374dccea784ee8(0x6987);\n    iVar1 = func_c2cf91162b434297(iStack_1c,&uStack_38,0x10);\n    if ((((iVar1 != -1) && (iVar1 = func_dffecbc75efe4331(iStack_1c,5), iVar1 != -1)) &&\n        (iStack_10 = func_5edd2e85822f48b8(iStack_1c,0,0), iStack_10 != -1)) &&\n       ((iStack_20 = func_04ee8b1ae1d940f5(iStack_10,auStack_46,0xd,0), iStack_20 != -1 &&\n        (iStack_20 != 0)))) {\n      auStack_46[iStack_20] = 0;\n      iStack_c = func_24a5b38b1f894927(auStack_46);\n    }\n  }\n  if (iStack_1c != -1) {\n    func_0db9502df1214da5(iStack_1c);\n  }\n  if (iStack_10 != -1) {\n    func_0db9502df1214da5(iStack_10);\n  }\n  puStack_28 = (undefined4 *)func_15ba25ad22a54370((long)iStack_c << 2);\n  for (uStack_18 = 0; uStack_18 < (ulong)(long)iStack_c; uStack_18 = uStack_18 + 1) {\n    puStack_28[uStack_18] = 0;\n  }\n  func_5fff4d30576648fd(*puStack_28);\n  func_eb4cb4e3e1264d4e(puStack_28);\n  return;\n}\n\n",
        "\nvoid func_34681eb4ac9e41a1(void)\n\n{\n  undefined *puVar1;\n  long lVar2;\n  long lVar3;\n  long lVar4;\n  \n  puVar1 = (undefined *)func_23b03c6e2ad644ec(100);\n  *puVar1 = 0;\n  lVar2 = func_51eb830bcefd4e8a(puVar1);\n  if (1 < 100U - lVar2) {\n    lVar3 = func_079797a79393415e(&UNK_004013c6,&UNK_004013c4);\n    if (lVar3 != 0) {\n      lVar4 = func_6f06ee8e2cfb44d2(puVar1 + lVar2,100 - (int)lVar2,lVar3);\n      if (lVar4 == 0) {\n        func_efe2c4dd19164388(&UNK_004013d4);\n        puVar1[lVar2] = 0;\n      }\n      func_8a623d6b5cac43cd(lVar3);\n    }\n  }\n  func_82a7fce85a6c46af(puVar1);\n  return;\n}\n\n",
        "\nvoid func_eeb197e1f7434406(void)\n\n{\n  long lVar1;\n  \n  lVar1 = func_09e331b2a7504ca7(100);\n  func_47c731dc57454efa(lVar1,0x41,99);\n  *(undefined *)(lVar1 + 99) = 0;\n  func_460b39e11ec648b1(lVar1);\n  return;\n}\n\n",
        "\nvoid func_b8afffe1ae104b47(void)\n\n{\n  long lVar1;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined8 uStack_38;\n  undefined8 uStack_30;\n  undefined8 uStack_28;\n  undefined4 uStack_20;\n  undefined8 uStack_10;\n  \n  uStack_10 = 0;\n  if (GLOBAL_CONST_TRUE != 0) {\n    uStack_10 = func_fb04a10840ad44c2(0x28);\n  }\n  uStack_48 = 0x4100000041;\n  uStack_40 = 0x4100000041;\n  uStack_38 = 0x4100000041;\n  uStack_30 = 0x4100000041;\n  uStack_28 = 0x4100000041;\n  uStack_20 = 0;\n  lVar1 = func_6d68de618f494989(&uStack_48);\n  func_ce40693ac231403d(uStack_10,&uStack_48,lVar1 + 1);\n  func_4e59ae6e6bfe4532(uStack_10);\n  func_7dc77253cec54e24(uStack_10);\n  return;\n}\n\n",
        "\nvoid func_55fdfd3d8622420a(undefined8 param_1)\n\n{\n  undefined8 uStack_d8;\n  undefined8 uStack_d0;\n  undefined8 uStack_c8;\n  undefined8 uStack_c0;\n  undefined8 uStack_b8;\n  undefined8 uStack_b0;\n  undefined8 uStack_a8;\n  undefined8 uStack_a0;\n  undefined8 uStack_98;\n  undefined8 uStack_90;\n  undefined8 uStack_88;\n  undefined8 uStack_80;\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined8 uStack_38;\n  undefined8 uStack_30;\n  undefined8 uStack_28;\n  undefined8 uStack_20;\n  undefined8 uStack_18;\n  \n  uStack_d8 = 0;\n  uStack_d0 = 0;\n  uStack_c8 = 0;\n  uStack_c0 = 0;\n  uStack_b8 = 0;\n  uStack_b0 = 0;\n  uStack_a8 = 0;\n  uStack_a0 = 0;\n  uStack_98 = 0;\n  uStack_90 = 0;\n  uStack_88 = 0;\n  uStack_80 = 0;\n  uStack_78 = 0;\n  uStack_70 = 0;\n  uStack_68 = 0;\n  uStack_60 = 0;\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  uStack_40 = 0;\n  uStack_38 = 0;\n  uStack_30 = 0;\n  uStack_28 = 0;\n  uStack_20 = 0;\n  uStack_18 = 0;\n  func_6ea0fe3ad008462b(&uStack_d8,param_1);\n  func_6dc08f32b0d04f0e(param_1);\n  return;\n}\n\n",
        "\nlong func_475da21e1f3f46fd(long param_1)\n\n{\n  int iVar1;\n  undefined2 uStack_38;\n  undefined2 uStack_36;\n  undefined4 uStack_34;\n  undefined4 *puStack_28;\n  int iStack_1c;\n  long lStack_18;\n  int iStack_c;\n  \n  iStack_c = 0xffffffff;\n  lStack_18 = func_6861ad85f1914f87(param_1);\n  iStack_c = func_b66698fbda9f48c8(2,1,6);\n  if (iStack_c != -1) {\n    func_919195b9b17f42ed(&uStack_38,0,0x10);\n    uStack_38 = 2;\n    uStack_34 = func_231a564cb3c34229(&UNK_00401604);\n    uStack_36 = func_184e866791104e62(0x6987);\n    iVar1 = func_a227bdb648c14bbf(iStack_c,&uStack_38,0x10);\n    if (((iVar1 != -1) &&\n        (iStack_1c = func_bf6db535ddf044a4(iStack_c,lStack_18 * 4 + param_1,(99 - lStack_18) * 4,0),\n        iStack_1c != -1)) && (iStack_1c != 0)) {\n      *(undefined4 *)(param_1 + (lStack_18 + ((ulong)(long)iStack_1c >> 2)) * 4) = 0;\n      puStack_28 = (undefined4 *)func_8b6ba091a55b4cbe(param_1,0xd);\n      if (puStack_28 != (undefined4 *)0x0) {\n        *puStack_28 = 0;\n      }\n      puStack_28 = (undefined4 *)func_8b6ba091a55b4cbe(param_1,10);\n      if (puStack_28 != (undefined4 *)0x0) {\n        *puStack_28 = 0;\n      }\n    }\n  }\n  if (iStack_c != -1) {\n    func_264fe95efab04313(iStack_c);\n  }\n  return param_1;\n}\n\n",
        "\nvoid func_d66b556996cc40da(void)\n\n{\n  func_b39c3d1b032143a6();\n  func_c31379b1febf4373();\n  return;\n}\n\n",
        "\nvoid func_6075c49f9f99417e(void)\n\n{\n  int iVar1;\n  undefined2 uStack_b8;\n  undefined2 uStack_b6;\n  undefined4 uStack_b4;\n  undefined8 uStack_a8;\n  undefined8 uStack_a0;\n  undefined8 uStack_98;\n  undefined8 uStack_90;\n  undefined8 uStack_88;\n  undefined8 uStack_80;\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined4 uStack_48;\n  undefined *puStack_38;\n  int iStack_2c;\n  long lStack_28;\n  int iStack_1c;\n  undefined8 *puStack_18;\n  int iStack_c;\n  \n  uStack_a8 = 0;\n  uStack_a0 = 0;\n  uStack_98 = 0;\n  uStack_90 = 0;\n  uStack_88 = 0;\n  uStack_80 = 0;\n  uStack_78 = 0;\n  uStack_70 = 0;\n  uStack_68 = 0;\n  uStack_60 = 0;\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  puStack_18 = &uStack_a8;\n  if (staticFive == 5) {\n    iStack_1c = 0xffffffff;\n    iStack_c = -1;\n    lStack_28 = func_67876bd4588d428a(puStack_18);\n    iStack_1c = func_40298c33b0964a76(2,1,6);\n    if (iStack_1c != -1) {\n      func_a1eee38ea7dd46de(&uStack_b8,0,0x10);\n      uStack_b8 = 2;\n      uStack_b4 = 0;\n      uStack_b6 = func_5e5e9ca4c5434c2c(0x6987);\n      iVar1 = func_2fb00d05542445c7(iStack_1c,&uStack_b8,0x10);\n      if ((((iVar1 != -1) && (iVar1 = func_1337acaad7c64f5b(iStack_1c,5), iVar1 != -1)) &&\n          (iStack_c = func_fa701905aa6c4082(iStack_1c,0,0), iStack_c != -1)) &&\n         ((iStack_2c = func_d6eb639909194198(iStack_c,(long)puStack_18 + lStack_28,99 - lStack_28,0),\n          iStack_2c != -1 && (iStack_2c != 0)))) {\n        *(undefined *)((long)puStack_18 + iStack_2c + lStack_28) = 0;\n        puStack_38 = (undefined *)func_31acf91900264868(puStack_18,0xd);\n        if (puStack_38 != (undefined *)0x0) {\n          *puStack_38 = 0;\n        }\n        puStack_38 = (undefined *)func_31acf91900264868(puStack_18,10);\n        if (puStack_38 != (undefined *)0x0) {\n          *puStack_38 = 0;\n        }\n      }\n    }\n    if (iStack_1c != -1) {\n      func_3d6a12cbad2e4315(iStack_1c);\n    }\n    if (iStack_c != -1) {\n      func_3d6a12cbad2e4315(iStack_c);\n    }\n  }\n  if (staticFive == 5) {\n    func_a78b95777f7241ec(puStack_18);\n  }\n  return;\n}\n\n",
        "\nvoid func_dafbdae44e694ba9(void)\n\n{\n  undefined4 auStack_1b8 [99];\n  undefined4 uStack_2c;\n  ulong uStack_28;\n  ulong uStack_20;\n  long lStack_18;\n  int iStack_c;\n  \n  lStack_18 = 0;\n  for (iStack_c = 0; iStack_c < 1; iStack_c = iStack_c + 1) {\n    lStack_18 = func_0bc1762fbe194d73(200);\n    func_fca46bb5b4464c0f(lStack_18,0x41,0x31);\n    *(undefined4 *)(lStack_18 + 0xc4) = 0;\n  }\n  func_fca46bb5b4464c0f(auStack_1b8,0x43,99);\n  uStack_2c = 0;\n  uStack_28 = func_8b2fbd5fba834fc9(auStack_1b8);\n  for (uStack_20 = 0; uStack_20 < uStack_28; uStack_20 = uStack_20 + 1) {\n    auStack_1b8[uStack_20] = *(undefined4 *)(lStack_18 + uStack_20 * 4);\n  }\n  uStack_2c = 0;\n  func_8220022008604bc0(auStack_1b8);\n  func_29f66399465949d3(lStack_18);\n  return;\n}\n\n",
        "\nvoid func_2b23dae482724b58(void)\n\n{\n  undefined auStack_88 [104];\n  long lStack_20;\n  long lStack_18;\n  ulong uStack_10;\n  \n  lStack_18 = 0;\n  lStack_20 = func_c5511342bce64fec(100);\n  func_306651cbe5a642d9(lStack_20,0x41,99);\n  *(undefined *)(lStack_20 + 99) = 0;\n  lStack_18 = lStack_20 + -8;\n  func_306651cbe5a642d9(auStack_88,0x43,99);\n  for (uStack_10 = 0; uStack_10 < 100; uStack_10 = uStack_10 + 1) {\n    auStack_88[uStack_10] = *(undefined *)(uStack_10 + lStack_18);\n  }\n  auStack_88[99] = 0;\n  func_0be1bf97e2044c86(auStack_88);\n  return;\n}\n\n",
        "\nvoid func_7aece23630ea419f(void)\n\n{\n  func_b7743ac6e3004908();\n  return;\n}\n\n",
        "\nvoid func_85e94bc84cd14976\n               (undefined8 param_1,undefined8 param_2,long param_3)\n\n{\n  undefined8 uVar1;\n  undefined *puVar2;\n  undefined auStack_358 [8];\n  undefined8 auStack_350 [101];\n  undefined auStack_28 [8];\n  undefined8 *puStack_20;\n  ulong uStack_18;\n  undefined8 *puStack_10;\n  \n  puVar2 = auStack_28;\n  puStack_10 = (undefined8 *)0x0;\n  if (GLOBAL_CONST_TRUE != 0) {\n    param_3 = 7;\n    puVar2 = auStack_358;\n    puStack_20 = auStack_350;\n    for (uStack_18 = 0; puStack_10 = puStack_20, uStack_18 < 100; uStack_18 = uStack_18 + 1) {\n      param_3 = uStack_18 * 8;\n      puStack_20[uStack_18] = 5;\n    }\n  }\n  uVar1 = *puStack_10;\n  *(undefined **)(puVar2 + -8) = &UNK_00400c19;\n  func_8330cc03db814bcd(uVar1,param_2,param_3);\n  *(undefined **)(puVar2 + -8) = &UNK_00400c25;\n  func_19c9cc7d1fa14e87(puStack_10);\n  return;\n}\n\n",
        "\nvoid func_bd42499b9b8f47b1(void)\n\n{\n  long lVar1;\n  undefined8 uStack_1b;\n  undefined2 uStack_13;\n  undefined uStack_11;\n  undefined8 uStack_10;\n  \n  uStack_10 = 0;\n  uStack_10 = func_37bee2f7a51a4225(10);\n  uStack_1b = 0x4141414141414141;\n  uStack_13 = 0x4141;\n  uStack_11 = 0;\n  lVar1 = func_1109b2c679044ade(&uStack_1b);\n  func_49f35811be1842cb(uStack_10,&uStack_1b,lVar1 + 1);\n  func_6506f050867d4339(uStack_10);\n  func_77a67933a4584ec4(uStack_10);\n  return;\n}\n\n",
        "\nvoid func_2eb461ac0b254aca(int param_1)\n\n{\n  undefined8 uStack_38;\n  undefined8 uStack_30;\n  undefined8 uStack_28;\n  undefined8 uStack_20;\n  undefined8 uStack_18;\n  int iStack_c;\n  \n  uStack_38 = 0;\n  uStack_30 = 0;\n  uStack_28 = 0;\n  uStack_20 = 0;\n  uStack_18 = 0;\n  if (param_1 < 10) {\n    *(undefined4 *)((long)&uStack_38 + (long)param_1 * 4) = 1;\n    for (iStack_c = 0; iStack_c < 10; iStack_c = iStack_c + 1) {\n      func_68c87b5dbd1c45e9(*(undefined4 *)((long)&uStack_38 + (long)iStack_c * 4));\n    }\n  }\n  else {\n    func_073c5692e894457a(&UNK_00401508);\n  }\n  return;\n}\n\n",
        "\nvoid func_7a0305b27f044a93(void)\n\n{\n  int iVar1;\n  undefined auStack_88 [104];\n  long lStack_20;\n  ulong uStack_18;\n  long lStack_10;\n  \n  lStack_10 = 0;\n  iVar1 = func_8a44b532c50d4a0a();\n  if (iVar1 != 0) {\n    lStack_20 = func_88bd2569c8e745c5(100);\n    func_1d443d17780a4c0d(lStack_20,0x41,99);\n    *(undefined *)(lStack_20 + 99) = 0;\n    lStack_10 = lStack_20 + -8;\n  }\n  func_1d443d17780a4c0d(auStack_88,0x43,99);\n  for (uStack_18 = 0; uStack_18 < 100; uStack_18 = uStack_18 + 1) {\n    auStack_88[uStack_18] = *(undefined *)(uStack_18 + lStack_10);\n  }\n  auStack_88[99] = 0;\n  func_e822d55caeb741ed(auStack_88);\n  return;\n}\n\n",
        "\nvoid func_d1bcb83b114e459e(undefined8 param_1)\n\n{\n  func_c166d8d40e7a4a3a(param_1);\n  return;\n}\n\n",
        "\nvoid func_7025147cd4d240da(void)\n\n{\n  long lVar1;\n  undefined8 *puVar2;\n  undefined8 uStack_1a8;\n  undefined8 uStack_1a0;\n  undefined8 auStack_198 [48];\n  long lStack_18;\n  undefined8 *puStack_10;\n  \n  uStack_1a8 = 0;\n  uStack_1a0 = 0;\n  puVar2 = auStack_198;\n  for (lVar1 = 0x30; lVar1 != 0; lVar1 = lVar1 + -1) {\n    *puVar2 = 0;\n    puVar2 = puVar2 + 1;\n  }\n  puStack_10 = &uStack_1a8;\n  lStack_18 = func_44f8cc8f033b402a(puStack_10);\n  if (1 < 100U - lStack_18) {\n    lVar1 = func_7467b1a9eea94424(lStack_18 * 4 + (long)puStack_10,100 - (int)lStack_18,stdin);\n    if (lVar1 == 0) {\n      func_728e57e6dc954349(&UNK_00401394);\n      *(undefined4 *)((long)puStack_10 + lStack_18 * 4) = 0;\n    }\n    else {\n      lStack_18 = func_44f8cc8f033b402a(puStack_10);\n      if ((lStack_18 != 0) && (*(int *)((long)puStack_10 + lStack_18 * 4 + -4) == 10)) {\n        *(undefined4 *)((long)puStack_10 + lStack_18 * 4 + -4) = 0;\n      }\n    }\n  }\n  func_d6270656fa7c4ac6(puStack_10,puStack_10);\n  return;\n}\n\n",
        "\nvoid func_110b69617432484e(undefined8 *param_1)\n\n{\n  func_ec7134b9a9984650(&UNK_004012fb,&UNK_004012fb,&UNK_004012f8,&UNK_004012f4,*param_1,0);\n  return;\n}\n\n",
        "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nvoid func_865d38a24d144841(void)\n\n{\n  int iVar1;\n  undefined8 *puStack_10;\n  \n  iVar1 = func_2a2ae62dae974cd2();\n  if (iVar1 == 0) {\n    puStack_10 = (undefined8 *)func_f324c6236f1e4114(8);\n    *puStack_10 = _UNK_004011f8;\n  }\n  else {\n    puStack_10 = (undefined8 *)func_f324c6236f1e4114(8);\n    *puStack_10 = _UNK_004011f8;\n  }\n  func_3d66ca5ab75e4310(*puStack_10);\n  func_06101af9fb504880(puStack_10);\n  return;\n}\n\n",
        "\nvoid func_dd47fafa69004b74(void)\n\n{\n  long lVar1;\n  undefined8 uStack_98;\n  undefined8 uStack_90;\n  undefined8 uStack_88;\n  undefined8 uStack_80;\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined4 uStack_38;\n  long lStack_28;\n  long lStack_20;\n  long lStack_18;\n  undefined8 *puStack_10;\n  \n  uStack_98 = 0x2068732f6e69622f;\n  uStack_90 = 0x20616c2d20736c;\n  uStack_88 = 0;\n  uStack_80 = 0;\n  uStack_78 = 0;\n  uStack_70 = 0;\n  uStack_68 = 0;\n  uStack_60 = 0;\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  uStack_40 = 0;\n  uStack_38 = 0;\n  puStack_10 = &uStack_98;\n  if (GLOBAL_CONST_TRUE != 0) {\n    lStack_18 = func_bafee3b3ec6b48a7(puStack_10);\n    if (1 < 100U - lStack_18) {\n      lStack_20 = func_0ab667048283476f(&UNK_00401406,&UNK_00401404);\n      if (lStack_20 != 0) {\n        lVar1 = func_c70c2eb69cbd443f((long)puStack_10 + lStack_18,100 - (int)lStack_18,lStack_20);\n        if (lVar1 == 0) {\n          func_bc01421f1ee44c81(&UNK_00401414);\n          *(undefined *)(lStack_18 + (long)puStack_10) = 0;\n        }\n        func_248d6fde1bc74611(lStack_20);\n      }\n    }\n  }\n  lStack_28 = func_3c0c509587f0484e(puStack_10,&UNK_00401423);\n  if (lStack_28 != 0) {\n    func_6934445d0a48421e(lStack_28);\n  }\n  return;\n}\n\n",
        "\nvoid func_5ef7833fe8104555(void)\n\n{\n  func_add7ad232e1e45f1();\n  return;\n}\n\n",
        "\nvoid func_7117a1c84e794726(long param_1)\n\n{\n  int *piStack_10;\n  \n  piStack_10 = *(int **)(param_1 + 0x10);\n  do {\n    if (*piStack_10 == 0) {\ncode_r0x00400d22:\n      func_ed5bf5043cf7464a(piStack_10);\n      return;\n    }\n    if (*piStack_10 == 0x53) {\n      func_852cb26929e64cb9(&UNK_004013b4);\n      goto code_r0x00400d22;\n    }\n    piStack_10 = piStack_10 + 1;\n  } while( true );\n}\n\n",
        "\nvoid func_e92bd48efd0947b3(void)\n\n{\n  long lVar1;\n  undefined8 uStack_1b;\n  undefined2 uStack_13;\n  undefined uStack_11;\n  undefined8 uStack_10;\n  \n  uStack_10 = 0;\n  func_e92bd48efd0947b3Global = 1;\n  uStack_10 = func_c91565ff07d145df(0);\n  uStack_1b = 0x4141414141414141;\n  uStack_13 = 0x4141;\n  uStack_11 = 0;\n  lVar1 = func_3ae6566e88944aaa(&uStack_1b);\n  func_ddec87623cfa4510(uStack_10,&uStack_1b,lVar1 + 1);\n  func_d8419d244ce2400a(uStack_10);\n  func_60cda5a6c3bf4ad5(uStack_10);\n  return;\n}\n\n",
        "\nvoid func_ab3b535d64674f3b(void)\n\n{\n  long lVar1;\n  undefined8 *puVar2;\n  byte bVar3;\n  undefined8 auStack_338 [101];\n  undefined8 *puStack_10;\n  \n  bVar3 = 0;\n  puStack_10 = (undefined8 *)0x0;\n  puStack_10 = (undefined8 *)func_452a7197559946f2(400);\n  puVar2 = auStack_338;\n  for (lVar1 = 100; lVar1 != 0; lVar1 = lVar1 + -1) {\n    *puVar2 = 0;\n    puVar2 = puVar2 + (ulong)bVar3 * -2 + 1;\n  }\n  func_54b5a36e46b5460a(puStack_10,auStack_338,800);\n  func_fec3a1bfb0b940da(*puStack_10);\n  func_29e9567136f2433c(puStack_10);\n  return;\n}\n\n",
        "\nvoid func_ea493e534fab4075(short param_1)\n\n{\n  undefined auStack_e8 [99];\n  undefined uStack_85;\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined8 uStack_38;\n  undefined8 uStack_30;\n  undefined8 uStack_28;\n  undefined8 uStack_20;\n  undefined4 uStack_18;\n  \n  uStack_78 = 0;\n  uStack_70 = 0;\n  uStack_68 = 0;\n  uStack_60 = 0;\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  uStack_40 = 0;\n  uStack_38 = 0;\n  uStack_30 = 0;\n  uStack_28 = 0;\n  uStack_20 = 0;\n  uStack_18 = 0;\n  func_9b200c63dda14f95(auStack_e8,0x41,99);\n  uStack_85 = 0;\n  if (param_1 < 100) {\n    func_ee6f184c03cf4225(&uStack_78,auStack_e8,(long)param_1);\n    *(undefined *)((long)&uStack_78 + (long)(int)param_1) = 0;\n  }\n  func_fb2e8477547f48cd(&uStack_78);\n  return;\n}\n\n",
        "\nvoid func_832fad2c753645b7(void)\n\n{\n  undefined auStack_128 [99];\n  undefined uStack_c5;\n  undefined auStack_48 [56];\n  undefined *puStack_10;\n  \n  if (staticFive == 5) {\n    puStack_10 = auStack_48;\n    auStack_48[0] = 0;\n  }\n  func_af78a26f42cc4d30(auStack_128,0x43,99);\n  uStack_c5 = 0;\n  func_5cf14e3fd0bf4fdb(puStack_10,auStack_128,99);\n  puStack_10[99] = 0;\n  func_fab289082dec469d(puStack_10);\n  return;\n}\n\n",
        "\nvoid func_176811372b444959(undefined8 param_1)\n\n{\n  func_cc70ad66a503496e(param_1);\n  return;\n}\n\n",
        "\nvoid func_7d22ec37dffd4973(void)\n\n{\n  undefined auStack_1c8 [24];\n  undefined *puStack_1b0;\n  undefined auStack_1a8 [396];\n  undefined4 uStack_1c;\n  undefined *puStack_10;\n  \n  puStack_1b0 = &UNK_00400bf6;\n  func_f9be6e2797114648(auStack_1a8,0x41,99);\n  uStack_1c = 0;\n  puStack_10 = auStack_1c8;\n  puStack_1b0 = &UNK_00400c18;\n  func_3109aa11a0a24b8d(&puStack_10);\n  return;\n}\n\n",
        "\nvoid func_88c139f73ba4416f(undefined8 param_1)\n\n{\n  func_a4e6cd33e2b048a5(param_1);\n  return;\n}\n\n",
        "\nvoid func_94a4ba55688c4aae(undefined4 param_1)\n\n{\n  func_f4fe24e04e2e4862(param_1);\n  return;\n}\n\n",
        "\nvoid func_c1ddfe63b32041e1(undefined8 *param_1)\n\n{\n  if (param_1 != (undefined8 *)0x0) {\n    *param_1 = 5;\n    func_834c5c0e0da44d4e(*param_1);\n    func_49deff27c2024e54(param_1);\n  }\n  return;\n}\n\n",
        "\nvoid func_240e84e6a1ef4d5e(void)\n\n{\n  int iVar1;\n  undefined auStack_36 [14];\n  undefined2 uStack_28;\n  undefined2 uStack_26;\n  undefined4 uStack_24;\n  int iStack_14;\n  int iStack_10;\n  undefined4 uStack_c;\n  \n  uStack_c = 0xffffffff;\n  iStack_10 = 0xffffffff;\n  iStack_10 = func_33e5d5f9a663426e(2,1,6);\n  if (iStack_10 != -1) {\n    func_21c191c951484eed(&uStack_28,0,0x10);\n    uStack_28 = 2;\n    uStack_24 = func_b475eca72be241fc(&UNK_00401564);\n    uStack_26 = func_62f66cb937814960(0x6987);\n    iVar1 = func_c486c3baaf334a94(iStack_10,&uStack_28,0x10);\n    if (((iVar1 != -1) && (iStack_14 = func_91386162a0bb4666(iStack_10,auStack_36,0xd,0), iStack_14 != -1)\n        ) && (iStack_14 != 0)) {\n      auStack_36[iStack_14] = 0;\n      uStack_c = func_08753f5a7e5d4a27(auStack_36);\n    }\n  }\n  if (iStack_10 != -1) {\n    func_cec699e703644d1a(iStack_10);\n  }\n  func_240e84e6a1ef4d5eData = uStack_c;\n  func_dbfd0fd176334039();\n  return;\n}\n\n",
        "\nvoid func_1b0c1b92e98d40e3(void)\n\n{\n  func_8554286f66fb424a();\n  func_b5e5ee853a9c4812();\n  return;\n}\n\n",
        "\nvoid func_c59a004de8274983(void)\n\n{\n  undefined auStack_338 [368];\n  undefined auStack_1c8 [28];\n  undefined4 uStack_1ac;\n  undefined auStack_1a8 [396];\n  undefined4 uStack_1c;\n  undefined *puStack_10;\n  \n  func_b89bd2ac10ff4b08(auStack_1a8,0x41,99);\n  uStack_1c = 0;\n  if (GLOBAL_CONST_FIVE == 5) {\n    puStack_10 = auStack_1c8;\n  }\n  func_b89bd2ac10ff4b08(auStack_338,0x43,99);\n  uStack_1ac = 0;\n  func_7200542f96414e13(puStack_10,auStack_338,400);\n  *(undefined4 *)(puStack_10 + 0x18c) = 0;\n  func_b991d45356d54f0d(puStack_10);\n  return;\n}\n\n",
        "\nvoid func_3a9111a7695b45bf(void)\n\n{\n  int iVar1;\n  int iStack_bc;\n  undefined2 uStack_b8;\n  undefined2 uStack_b6;\n  undefined4 uStack_b4;\n  undefined8 uStack_a8;\n  undefined8 uStack_a0;\n  undefined8 uStack_98;\n  undefined8 uStack_90;\n  undefined8 uStack_88;\n  undefined8 uStack_80;\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined4 uStack_48;\n  undefined *puStack_38;\n  int iStack_2c;\n  long lStack_28;\n  int iStack_1c;\n  undefined8 *puStack_18;\n  int iStack_10;\n  int iStack_c;\n  \n  uStack_a8 = 0;\n  uStack_a0 = 0;\n  uStack_98 = 0;\n  uStack_90 = 0;\n  uStack_88 = 0;\n  uStack_80 = 0;\n  uStack_78 = 0;\n  uStack_70 = 0;\n  uStack_68 = 0;\n  uStack_60 = 0;\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  puStack_18 = &uStack_a8;\n  if (GLOBAL_CONST_TRUE != 0) {\n    iStack_1c = 0xffffffff;\n    lStack_28 = func_3089b6670dd64efb(puStack_18);\n    iStack_1c = func_7c3ef90a7e134a58(2,1,6);\n    if (iStack_1c != -1) {\n      func_b27c345fbfd54321(&uStack_b8,0,0x10);\n      uStack_b8 = 2;\n      uStack_b4 = func_90507b5b3bcf4cec(&UNK_004015d4);\n      uStack_b6 = func_2e8ad47b1d4f481b(0x6987);\n      iVar1 = func_2dc3278c05ad492d(iStack_1c,&uStack_b8,0x10);\n      if (((iVar1 != -1) &&\n          (iStack_2c = func_3da0e068518947ca(iStack_1c,(long)puStack_18 + lStack_28,99 - lStack_28,0),\n          iStack_2c != -1)) && (iStack_2c != 0)) {\n        *(undefined *)((long)puStack_18 + iStack_2c + lStack_28) = 0;\n        puStack_38 = (undefined *)func_5ed34af4ed9a4718(puStack_18,0xd);\n        if (puStack_38 != (undefined *)0x0) {\n          *puStack_38 = 0;\n        }\n        puStack_38 = (undefined *)func_5ed34af4ed9a4718(puStack_18,10);\n        if (puStack_38 != (undefined *)0x0) {\n          *puStack_38 = 0;\n        }\n      }\n    }\n    if (iStack_1c != -1) {\n      func_cbb9b5bcd71047ab(iStack_1c);\n    }\n  }\n  if ((GLOBAL_CONST_TRUE != 0) &&\n     (iVar1 = func_9aec186c29c64bfe(puStack_18,&UNK_004015de,&iStack_bc), iVar1 == 1)) {\n    iStack_10 = 0;\n    for (iStack_c = 0; iStack_c < iStack_bc; iStack_c = iStack_c + 1) {\n      iStack_10 = iStack_10 + 1;\n    }\n    func_74f81208b33c49ff(iStack_10);\n  }\n  return;\n}\n\n",
        "\nvoid func_0451c1cfc3774432(void)\n\n{\n  int iVar1;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined8 uStack_38;\n  undefined4 uStack_30;\n  long lStack_20;\n  ulong uStack_18;\n  long lStack_10;\n  \n  lStack_10 = 0;\n  iVar1 = func_c42b044add29443a();\n  if (iVar1 != 0) {\n    lStack_10 = func_56c5b0ac25b240b7(0x28);\n  }\n  uStack_58 = 0x4100000041;\n  uStack_50 = 0x4100000041;\n  uStack_48 = 0x4100000041;\n  uStack_40 = 0x4100000041;\n  uStack_38 = 0x4100000041;\n  uStack_30 = 0;\n  lStack_20 = func_7d99adf325634add(&uStack_58);\n  for (uStack_18 = 0; uStack_18 < lStack_20 + 1U; uStack_18 = uStack_18 + 1) {\n    *(undefined4 *)(uStack_18 * 4 + lStack_10) = *(undefined4 *)((long)&uStack_58 + uStack_18 * 4);\n  }\n  func_84013f94edbc40de(lStack_10);\n  func_c03f9c468a694815(lStack_10);\n  return;\n}\n\n",
        "\nvoid func_296225bf1c56466f(void)\n\n{\n  func_1dd897b6b6824277();\n  func_bbf89fc083b1460a();\n  func_18357027aad441fb();\n  func_68337d85823e4cad();\n  return;\n}\n\n",
        "\nvoid func_2b5616ca2a964a30(void)\n\n{\n  int iVar1;\n  long lVar2;\n  undefined8 *puVar3;\n  undefined8 uStack_1b8;\n  undefined8 uStack_1b0;\n  undefined8 auStack_1a8 [49];\n  long lStack_20;\n  long lStack_18;\n  undefined8 *puStack_10;\n  \n  uStack_1b8 = 0;\n  uStack_1b0 = 0;\n  puVar3 = auStack_1a8;\n  for (lVar2 = 0x30; lVar2 != 0; lVar2 = lVar2 + -1) {\n    *puVar3 = 0;\n    puVar3 = puVar3 + 1;\n  }\n  puStack_10 = &uStack_1b8;\n  iVar1 = func_f8c3623e4a5b45ba();\n  if (iVar1 != 0) {\n    lStack_18 = func_45037e99ad4f4c51(puStack_10);\n    lStack_20 = func_61ac271689054767(&UNK_004013f4);\n    if (lStack_20 != 0) {\n      func_e17ba430957a4ce4(lStack_18 * 4 + (long)puStack_10,lStack_20,99 - lStack_18);\n    }\n  }\n  iVar1 = func_f8c3623e4a5b45ba();\n  if (iVar1 != 0) {\n    func_04c9b325aebc4ecc(puStack_10,puStack_10);\n  }\n  return;\n}\n\n",
        "\nvoid func_80f28e635fd54407(void)\n\n{\n  long lVar1;\n  \n  lVar1 = func_345f9e93af0544d6(400);\n  func_845a7f4b2dad4d2a(lVar1,0x41,99);\n  *(undefined4 *)(lVar1 + 0x18c) = 0;\n  func_a6da286d22e04999(lVar1 + -0x20);\n  return;\n}\n\n",
        "\nvoid func_71d9bc2c9f984221(void)\n\n{\n  undefined auStack_1a8 [408];\n  undefined *puStack_10;\n  \n  puStack_10 = auStack_1a8;\n  func_c4c6d60131544360(puStack_10,0x41,99);\n  *(undefined4 *)(puStack_10 + 0x18c) = 0;\n  func_de854391aa474c10(&puStack_10);\n  return;\n}\n\n",
        "\nvoid func_301b38a3ca5f4a55(void)\n\n{\n  undefined4 auStack_1a8 [100];\n  ulong uStack_18;\n  undefined4 *puStack_10;\n  \n  puStack_10 = (undefined4 *)0x0;\n  if (globalFive == 5) {\n    puStack_10 = (undefined4 *)func_b61e2e4c43a84cb4(200);\n    *puStack_10 = 0;\n  }\n  func_2953cb249ce54deb(auStack_1a8,0x43,99);\n  auStack_1a8[99] = 0;\n  for (uStack_18 = 0; uStack_18 < 100; uStack_18 = uStack_18 + 1) {\n    puStack_10[uStack_18] = auStack_1a8[uStack_18];\n  }\n  puStack_10[99] = 0;\n  func_38808fe8da564771(puStack_10);\n  func_5f9a39067ef04fef(puStack_10);\n  return;\n}\n\n",
        "\nvoid func_a9ec12c387dd418e(ulong param_1)\n\n{\n  ulong uVar1;\n  undefined8 uVar2;\n  \n  uVar1 = func_d01fefd5550041b0(&UNK_00401368);\n  if (uVar1 < param_1) {\n    uVar2 = func_97be055d23a143a3(param_1 << 2);\n    func_5f7e9e82d4794f51(uVar2,&UNK_00401368);\n    func_dc26fa9b8d614347(uVar2);\n    func_0e7ed9520fb544d6(uVar2);\n  }\n  else {\n    func_9b9449372f2e4e5b(&UNK_00401380);\n  }\n  return;\n}\n\n",
        "\nvoid func_6a041671f3af48a6(undefined4 param_1)\n\n{\n  func_eabdb2d3fab144f5(param_1);\n  return;\n}\n\n",
        "\nvoid func_aa7667fb0e9c4db3(void)\n\n{\n  long lVar1;\n  undefined auStack_280 [408];\n  undefined8 uStack_e8;\n  undefined8 uStack_e0;\n  undefined8 uStack_d8;\n  undefined8 uStack_d0;\n  undefined8 uStack_c8;\n  undefined8 uStack_c0;\n  undefined8 uStack_b8;\n  undefined8 uStack_b0;\n  undefined8 uStack_a8;\n  undefined8 uStack_a0;\n  undefined8 uStack_98;\n  undefined8 uStack_90;\n  undefined8 uStack_88;\n  undefined8 uStack_80;\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined8 uStack_38;\n  undefined8 uStack_30;\n  ulong uStack_28;\n  undefined *puStack_18;\n  undefined *puStack_10;\n  \n  puStack_18 = auStack_280;\n  func_aa7667fb0e9c4db3Global = 1;\n  puStack_10 = puStack_18;\n  puStack_18 = (undefined *)\n               func_7d74906893574096\n                         (puStack_18,0x10,7);\n  uStack_e8 = 0;\n  uStack_e0 = 0;\n  uStack_d8 = 0;\n  uStack_d0 = 0;\n  uStack_c8 = 0;\n  uStack_c0 = 0;\n  uStack_b8 = 0;\n  uStack_b0 = 0;\n  uStack_a8 = 0;\n  uStack_a0 = 0;\n  uStack_98 = 0;\n  uStack_90 = 0;\n  uStack_88 = 0;\n  uStack_80 = 0;\n  uStack_78 = 0;\n  uStack_70 = 0;\n  uStack_68 = 0;\n  uStack_60 = 0;\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  uStack_40 = 0;\n  uStack_38 = 0;\n  uStack_30 = 0;\n  uStack_28 = 0;\n  lVar1 = func_a56fbe6e6dcb4e0d(puStack_18);\n  func_b4bd1e7517464d31(&uStack_e8,puStack_18,lVar1 * 4);\n  uStack_28 = uStack_28 & 0xffffffff;\n  func_fc71f68a77d7404c(puStack_18);\n  return;\n}\n\n",
        "\nvoid func_f258a6a02a3e4f60(void)\n\n{\n  long lVar1;\n  undefined8 *puVar2;\n  undefined8 auStack_3f8 [100];\n  undefined4 auStack_d8 [50];\n  undefined4 *puStack_10;\n  \n  if (staticFive == 5) {\n    puStack_10 = auStack_d8;\n  }\n  puVar2 = auStack_3f8;\n  for (lVar1 = 0x32; lVar1 != 0; lVar1 = lVar1 + -1) {\n    *puVar2 = 0;\n    puVar2 = puVar2 + 1;\n  }\n  func_5cdc381ec75a4bfd(puStack_10,auStack_3f8,400);\n  func_f51edf5d8a55497e(*puStack_10);\n  return;\n}\n\n",
        "\n/* WARNING: Heritage AFTER dead removal. Example location: s0xfffffffffffffcc0 : 0x00400c23 */\n/* WARNING: Restarted to delay deadcode elimination for space: stack */\n\nundefined8 *\nCWE401_Memory_Leak__int64_t_malloc_61b_goodG2BSource(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined8 auStack_340 [102];\n  undefined8 *puStack_10;\n  \n  puStack_10 = auStack_340;\n  auStack_340[0] = 5;\n  func_b5b33001eeaa4abd(5,param_2,7);\n  return puStack_10;\n}\n\n",
        "\nvoid func_623f845943a6453a(void)\n\n{\n  func_17aa275f72754ec1();\n  return;\n}\n\n",
        "\nvoid func_a46cd18dfd25475c(void)\n\n{\n  func_3b41b49fd8c64664();\n  func_49c65bbe45274316();\n  return;\n}\n\n",
        "\nvoid func_e42233acab1d4eb8(void)\n\n{\n  func_b2a8d6ed0ba7441b();\n  func_004962ecf2ce406f();\n  return;\n}\n\n",
        "\nvoid func_5c6fe8a6187141da(void)\n\n{\n  int iVar1;\n  undefined auStack_e8 [99];\n  undefined uStack_85;\n  undefined auStack_80 [8];\n  undefined auStack_78 [99];\n  undefined uStack_15;\n  undefined *puStack_10;\n  \n  func_e33b1bdd916942cf(auStack_78,0x41,99);\n  uStack_15 = 0;\n  iVar1 = func_9ddc2af80a82441e();\n  if (iVar1 != 0) {\n    puStack_10 = auStack_80;\n  }\n  func_e33b1bdd916942cf(auStack_e8,0x43,99);\n  uStack_85 = 0;\n  func_a126c476495541df(auStack_e8,puStack_10,100);\n  uStack_85 = 0;\n  func_ce652d9e406241d7(auStack_e8);\n  return;\n}\n\n",
        "\nvoid func_b2e7a92e3a65460e(void)\n\n{\n  long lVar1;\n  undefined8 uStack_1a;\n  undefined4 uStack_12;\n  undefined2 uStack_e;\n  undefined4 uStack_c;\n  \n  uStack_c = 0;\n  uStack_1a = 0;\n  uStack_12 = 0;\n  uStack_e = 0;\n  lVar1 = func_4007b7bb34514c4b(&uStack_1a,0xe,stdin);\n  if (lVar1 == 0) {\n    func_477cc860ad6d4120(&UNK_00401234);\n  }\n  else {\n    uStack_c = func_dc15bf8aef294f9a(&uStack_1a);\n  }\n  badStatic = 1;\n  func_86e4828a77c94a10(uStack_c);\n  return;\n}\n\n",
        "\nvoid func_61496462050b4ba8(undefined8 param_1)\n\n{\n  func_1d5ee3b0094142e3(param_1);\n  return;\n}\n\n",
        "\nvoid func_2da1dd8106e34959(void)\n\n{\n  func_45fb90ac3fb64449();\n  func_9ad879a05f414880();\n  return;\n}\n\n",
        "\nvoid func_98f9b73cbc3e41ff(void)\n\n{\n  undefined auStack_f8 [99];\n  undefined uStack_95;\n  undefined auStack_88 [112];\n  undefined8 uStack_18;\n  undefined *puStack_10;\n  \n  puStack_10 = auStack_88;\n  func_d68906959b3d4d43();\n  func_16216e4418094ab1(auStack_f8,0x43,99);\n  uStack_95 = 0;\n  uStack_18 = func_fe8add008489412d(auStack_f8);\n  func_d18be623638c4e03(puStack_10,auStack_f8,uStack_18);\n  func_2aeaf1fdcc514d11(puStack_10);\n  return;\n}\n\n",
        "\nvoid func_ad98ae2ea6a047f0(long param_1)\n\n{\n  undefined auStack_78 [104];\n  ulong uStack_10;\n  \n  func_da9d6ce6fcf64bfc(auStack_78,0x43,99);\n  auStack_78[99] = 0;\n  for (uStack_10 = 0; uStack_10 < 100; uStack_10 = uStack_10 + 1) {\n    *(undefined *)(param_1 + uStack_10) = auStack_78[uStack_10];\n  }\n  *(undefined *)(param_1 + 99) = 0;\n  func_671e9ce351fa4949(param_1);\n  return;\n}\n\n",
        "\nvoid func_c25d84f8662d487d(void)\n\n{\n  long lVar1;\n  undefined8 *puVar2;\n  undefined8 uStack_1b8;\n  undefined8 uStack_1b0;\n  undefined8 auStack_1a8 [49];\n  long lStack_20;\n  long lStack_18;\n  undefined8 *puStack_10;\n  \n  uStack_1b8 = 0;\n  uStack_1b0 = 0;\n  puVar2 = auStack_1a8;\n  for (lVar1 = 0x30; lVar1 != 0; lVar1 = lVar1 + -1) {\n    *puVar2 = 0;\n    puVar2 = puVar2 + 1;\n  }\n  puStack_10 = &uStack_1b8;\n  lStack_18 = func_849aac59bfbb494e(puStack_10);\n  if (1 < 100U - lStack_18) {\n    lStack_20 = func_65fa91c75f5a4b21(&UNK_00401366,&UNK_00401364);\n    if (lStack_20 != 0) {\n      lVar1 = func_2537b1e10f3e4545(lStack_18 * 4 + (long)puStack_10,100 - (int)lStack_18,lStack_20);\n      if (lVar1 == 0) {\n        func_8018d8614a4141dc(&UNK_00401374);\n        *(undefined4 *)((long)puStack_10 + lStack_18 * 4) = 0;\n      }\n      func_d1c28aaf6a284753(lStack_20);\n    }\n  }\n  func_91e8af3f45224e26(puStack_10);\n  return;\n}\n\n",
        "\nvoid func_2216c7a97a3348c6(void)\n\n{\n  long lVar1;\n  undefined8 *puVar2;\n  undefined8 uStack_1a8;\n  undefined8 uStack_1a0;\n  undefined8 auStack_198 [49];\n  undefined8 *puStack_10;\n  \n  uStack_1a8 = 0;\n  uStack_1a0 = 0;\n  puVar2 = auStack_198;\n  for (lVar1 = 0x30; lVar1 != 0; lVar1 = lVar1 + -1) {\n    *puVar2 = 0;\n    puVar2 = puVar2 + 1;\n  }\n  puStack_10 = &uStack_1a8;\n  puStack_10 = (undefined8 *)\n               func_372875f6e250463d\n                         (puStack_10);\n  func_74a8503b68a44b62(puStack_10);\n  return;\n}\n\n",
        "\n/* WARNING: Restarted to delay deadcode elimination for space: stack */\n\nvoid func_04433d69906842c3(void)\n\n{\n  int iVar1;\n  undefined2 uStack_d8;\n  undefined2 uStack_d6;\n  undefined4 uStack_d4;\n  undefined8 uStack_c8;\n  undefined8 uStack_c0;\n  undefined8 uStack_b8;\n  undefined8 uStack_b0;\n  undefined8 uStack_a8;\n  undefined8 uStack_a0;\n  undefined8 uStack_98;\n  undefined8 uStack_90;\n  undefined8 uStack_88;\n  undefined8 uStack_80;\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined4 uStack_68;\n  undefined8 *puStack_58;\n  long lStack_50;\n  undefined8 *puStack_48;\n  undefined *puStack_40;\n  int iStack_34;\n  long lStack_30;\n  int iStack_24;\n  undefined8 *puStack_20;\n  undefined8 **ppuStack_18;\n  undefined8 **ppuStack_10;\n  \n  ppuStack_10 = &puStack_58;\n  ppuStack_18 = &puStack_58;\n  uStack_c8 = 0x2068732f6e69622f;\n  uStack_c0 = 0x20616c2d20736c;\n  uStack_b8 = 0;\n  uStack_b0 = 0;\n  uStack_a8 = 0;\n  uStack_a0 = 0;\n  uStack_98 = 0;\n  uStack_90 = 0;\n  uStack_88 = 0;\n  uStack_80 = 0;\n  uStack_78 = 0;\n  uStack_70 = 0;\n  uStack_68 = 0;\n  puStack_58 = &uStack_c8;\n  iStack_24 = 0xffffffff;\n  puStack_20 = puStack_58;\n  lStack_30 = func_aa9a25870d91444e(puStack_58);\n  iStack_24 = func_26c260a6ca2e45e7(2,1,6);\n  if (iStack_24 != -1) {\n    func_c84fe8b7abc84521(&uStack_d8,0,0x10);\n    uStack_d8 = 2;\n    uStack_d4 = func_1f99b4b4fd214c24(&UNK_00401674);\n    uStack_d6 = func_9b1edc7647434592(0x6987);\n    iVar1 = func_b7011aacac0e4928(iStack_24,&uStack_d8,0x10);\n    if (((iVar1 != -1) &&\n        (iStack_34 = func_5b7cec9bad85461b(iStack_24,(long)puStack_20 + lStack_30,99 - lStack_30,0),\n        iStack_34 != -1)) && (iStack_34 != 0)) {\n      *(undefined *)((long)puStack_20 + iStack_34 + lStack_30) = 0;\n      puStack_40 = (undefined *)func_f72980d914ca49cd(puStack_20,0xd);\n      if (puStack_40 != (undefined *)0x0) {\n        *puStack_40 = 0;\n      }\n      puStack_40 = (undefined *)func_f72980d914ca49cd(puStack_20,10);\n      if (puStack_40 != (undefined *)0x0) {\n        *puStack_40 = 0;\n      }\n    }\n  }\n  if (iStack_24 != -1) {\n    func_0e5e801361ec410d(iStack_24);\n  }\n  *ppuStack_10 = puStack_20;\n  puStack_48 = *ppuStack_18;\n  lStack_50 = func_964c7e50c3fd4ced(puStack_48,&UNK_0040167e);\n  if (lStack_50 != 0) {\n    func_3baabc8c64f949aa(lStack_50);\n  }\n  return;\n}\n\n",
        "\nvoid func_921f424669e845c1(undefined8 param_1)\n\n{\n  func_91fdebba3b924285(param_1,param_1);\n  return;\n}\n\n",
        "\nvoid func_37ea328aaa1b4b18(void)\n\n{\n  func_4627b2972c864670();\n  return;\n}\n\n",
        "\nvoid func_cf6572e73719441b(long param_1)\n\n{\n  int *piStack_10;\n  \n  piStack_10 = *(int **)(param_1 + 0x10);\n  do {\n    if (*piStack_10 == 0) {\ncode_r0x00400d32:\n      func_f7b1320c22434d75(piStack_10);\n      return;\n    }\n    if (*piStack_10 == 0x53) {\n      func_d9b08b91e7454438(&UNK_00401344);\n      goto code_r0x00400d32;\n    }\n    piStack_10 = piStack_10 + 1;\n  } while( true );\n}\n\n",
        "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nvoid func_6d1b8de8950a4f56(void)\n\n{\n  undefined8 uStack_28;\n  ulong uStack_20;\n  undefined *puStack_18;\n  undefined8 uStack_10;\n  \n  if (globalFive == 5) {\n    puStack_18 = &UNK_00401124;\n    func_6910df06d2e04d08(&UNK_00401124);\n    uStack_28 = _UNK_00401124;\n    puStack_18 = (undefined *)_UNK_00401134;\n    uStack_10 = _UNK_0040113c;\n    uStack_20 = _UNK_0040112c & 0xffffffffffffff;\n    func_6910df06d2e04d08(&uStack_28);\n    func_6910df06d2e04d08(puStack_18);\n  }\n  return;\n}\n\n",
        "\nvoid func_1f4c7551164d4c3a(undefined8 param_1)\n\n{\n  long lVar1;\n  undefined8 uStack_13;\n  undefined2 uStack_b;\n  undefined uStack_9;\n  \n  uStack_13 = 0x4141414141414141;\n  uStack_b = 0x4141;\n  uStack_9 = 0;\n  lVar1 = func_c1f1df5094494bbe(&uStack_13);\n  func_be96419992444a48(param_1,&uStack_13,lVar1 + 1);\n  func_a142ad8302b6405f(param_1);\n  func_a83ee8bdb9754684(param_1);\n  return;\n}\n\n",
        "\nvoid func_725500a6e24b4f93(void)\n\n{\n  int iVar1;\n  long lVar2;\n  undefined8 uStack_38;\n  undefined8 uStack_30;\n  undefined8 uStack_28;\n  undefined2 uStack_20;\n  undefined4 *puStack_18;\n  ulong uStack_10;\n  \n  uStack_10 = 0;\n  iVar1 = func_b47c034c2280427e();\n  if (iVar1 != 0) {\n    uStack_38 = 0;\n    uStack_30 = 0;\n    uStack_28 = 0;\n    uStack_20 = 0;\n    lVar2 = func_c79ce1ad8cd04947(&uStack_38,0x1a,stdin);\n    if (lVar2 == 0) {\n      func_5f48914da09e49b0(&UNK_00401338);\n    }\n    else {\n      uStack_10 = func_7d51bdf1c5ee4c71(&uStack_38,0,0);\n    }\n  }\n  iVar1 = func_b47c034c2280427e();\n  if (iVar1 != 0) {\n    if (uStack_10 < 6) {\n      func_5f48914da09e49b0(&UNK_00401348);\n    }\n    else {\n      puStack_18 = (undefined4 *)func_b137359b8aa74af2(uStack_10);\n      *puStack_18 = 0x6c6c6568;\n      *(undefined2 *)(puStack_18 + 1) = 0x6f;\n      func_5f48914da09e49b0(puStack_18);\n      func_12b75208d380413e(puStack_18);\n    }\n  }\n  return;\n}\n\n",
        "\nvoid func_f0c136a0dd23494b(long param_1)\n\n{\n  undefined8 *puVar1;\n  \n  puVar1 = *(undefined8 **)(param_1 + 0x10);\n  func_02906a03fe6c4c1e(*puVar1);\n  func_a25945a4e257441b(puVar1);\n  return;\n}\n\n",
        "\nvoid func_b9e71983251f433d(int param_1)\n\n{\n  ulong uStack_10;\n  \n  for (uStack_10 = 0; uStack_10 < (ulong)(long)param_1; uStack_10 = uStack_10 + 1) {\n    func_097305cd08a4458f(&UNK_00401484);\n  }\n  return;\n}\n\n",
        "\nvoid func_7a3f057e690a4845(void)\n\n{\n  undefined8 uVar1;\n  undefined auStack_338 [368];\n  undefined auStack_1c8 [28];\n  undefined4 uStack_1ac;\n  undefined auStack_1a8 [396];\n  undefined4 uStack_1c;\n  undefined *puStack_10;\n  \n  func_8d6aee4745614b39(auStack_1a8,0x41,99);\n  uStack_1c = 0;\n  puStack_10 = auStack_1c8;\n  func_8d6aee4745614b39(auStack_338,0x43,99);\n  uStack_1ac = 0;\n  uVar1 = func_b2d0a251102442af(auStack_338);\n  func_22c1464eb81f48e8(auStack_338,puStack_10,uVar1);\n  uStack_1ac = 0;\n  func_d6fda9f96bb142b4(auStack_338);\n  return;\n}\n\n",
        "\nvoid func_355533564d494d97(undefined8 *param_1)\n\n{\n  long lVar1;\n  undefined auStack_1a8 [396];\n  undefined4 uStack_1c;\n  undefined8 uStack_10;\n  \n  uStack_10 = *param_1;\n  func_e428a79d7dfb48cb(auStack_1a8,0x43,99);\n  uStack_1c = 0;\n  lVar1 = func_aa5ece3a7ffd4d5c(auStack_1a8);\n  func_123508988de94849(auStack_1a8,uStack_10,lVar1 * 4);\n  uStack_1c = 0;\n  func_56974032209f4296(auStack_1a8);\n  return;\n}\n\n",
        "\nvoid func_0da1e01828f448e5(void)\n\n{\n  undefined4 *puVar1;\n  \n  puVar1 = (undefined4 *)func_c3fcc69042164840(1,4);\n  *puVar1 = 5;\n  func_22eb0ded0a19405d(*puVar1);\n  func_6f2c6cb85121493e(puVar1);\n  return;\n}\n\n",
        "\nvoid func_c3b2f27d5d9a4348(void)\n\n{\n  func_7913976d9663482d();\n  func_2cc8640cb2f14432();\n  func_e00b1b841e7943c5();\n  func_060cbeaa1ef846d0();\n  return;\n}\n\n",
        "\nvoid func_431261cb38924bd7(void)\n\n{\n  int iVar1;\n  undefined2 uStack_a8;\n  undefined2 uStack_a6;\n  undefined4 uStack_a4;\n  undefined8 uStack_98;\n  undefined8 uStack_90;\n  undefined8 uStack_88;\n  undefined8 uStack_80;\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined4 uStack_38;\n  undefined *puStack_30;\n  int iStack_24;\n  long lStack_20;\n  int iStack_14;\n  undefined8 *puStack_10;\n  \n  uStack_98 = 0;\n  uStack_90 = 0;\n  uStack_88 = 0;\n  uStack_80 = 0;\n  uStack_78 = 0;\n  uStack_70 = 0;\n  uStack_68 = 0;\n  uStack_60 = 0;\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  uStack_40 = 0;\n  uStack_38 = 0;\n  puStack_10 = &uStack_98;\n  if (staticFive == 5) {\n    iStack_14 = 0xffffffff;\n    lStack_20 = func_e1b743d0987a4c28(puStack_10);\n    iStack_14 = func_cf3aef518c144b4f(2,1,6);\n    if (iStack_14 != -1) {\n      func_e882099f0a4c45df(&uStack_a8,0,0x10);\n      uStack_a8 = 2;\n      uStack_a4 = func_a8cc10ecc7974e0d(&UNK_00401694);\n      uStack_a6 = func_5d63a910eb9c49c5(0x6987);\n      iVar1 = func_fd149adf712f4fee(iStack_14,&uStack_a8,0x10);\n      if (((iVar1 != -1) &&\n          (iStack_24 = func_6471d8b4273b4adf(iStack_14,(long)puStack_10 + lStack_20,99 - lStack_20,0),\n          iStack_24 != -1)) && (iStack_24 != 0)) {\n        *(undefined *)((long)puStack_10 + iStack_24 + lStack_20) = 0;\n        puStack_30 = (undefined *)func_3b55f2ce4c344ccb(puStack_10,0xd);\n        if (puStack_30 != (undefined *)0x0) {\n          *puStack_30 = 0;\n        }\n        puStack_30 = (undefined *)func_3b55f2ce4c344ccb(puStack_10,10);\n        if (puStack_30 != (undefined *)0x0) {\n          *puStack_30 = 0;\n        }\n      }\n    }\n    if (iStack_14 != -1) {\n      func_8456df6c978448bc(iStack_14);\n    }\n  }\n  if (staticFive == 5) {\n    func_81a7dd1947fb4d03(puStack_10,puStack_10);\n  }\n  return;\n}\n\n",
        "\nvoid func_08eda79cd5a14c85(undefined4 param_1)\n\n{\n  func_8096571165f94eef(param_1);\n  return;\n}\n\n",
        "\nvoid func_baddcf9fd93a40b9(undefined8 param_1)\n\n{\n  func_c5e5cf7204cb4765(param_1);\n  return;\n}\n\n",
        "\nvoid func_5297ca0061204329(void)\n\n{\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined8 uStack_38;\n  undefined8 uStack_30;\n  undefined8 uStack_28;\n  undefined8 uStack_20;\n  undefined4 uStack_18;\n  undefined8 *puStack_10;\n  \n  uStack_78 = 0;\n  uStack_70 = 0;\n  uStack_68 = 0;\n  uStack_60 = 0;\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  uStack_40 = 0;\n  uStack_38 = 0;\n  uStack_30 = 0;\n  uStack_28 = 0;\n  uStack_20 = 0;\n  uStack_18 = 0;\n  puStack_10 = &uStack_78;\n  puStack_10 = (undefined8 *)\n               func_6babf4e8d6384495\n                         (puStack_10);\n  func_abd922cbe8254523(puStack_10,puStack_10);\n  return;\n}\n\n",
        "\nlong func_92c26c2703844d62(long param_1)\n\n{\n  int iVar1;\n  undefined2 uStack_38;\n  undefined2 uStack_36;\n  undefined4 uStack_34;\n  undefined *puStack_28;\n  int iStack_1c;\n  long lStack_18;\n  int iStack_10;\n  int iStack_c;\n  \n  if (CWE78_OS_Command_Injection__char_listen_socket_popen_22_badGlobal != 0) {\n    iStack_10 = 0xffffffff;\n    iStack_c = -1;\n    lStack_18 = func_402a4db4ea054e0d(param_1);\n    iStack_10 = func_64b244974ded49ef(2,1,6);\n    if (iStack_10 != -1) {\n      func_7169c763cb334cae(&uStack_38,0,0x10);\n      uStack_38 = 2;\n      uStack_34 = 0;\n      uStack_36 = func_2914e0439e69422f(0x6987);\n      iVar1 = func_0e880d3d4bb34140(iStack_10,&uStack_38,0x10);\n      if ((((iVar1 != -1) && (iVar1 = func_8a3858535b874b5f(iStack_10,5), iVar1 != -1)) &&\n          (iStack_c = func_513531776713447f(iStack_10,0,0), iStack_c != -1)) &&\n         ((iStack_1c = func_64273d4a69d144f0(iStack_c,param_1 + lStack_18,99 - lStack_18,0),\n          iStack_1c != -1 && (iStack_1c != 0)))) {\n        *(undefined *)(param_1 + iStack_1c + lStack_18) = 0;\n        puStack_28 = (undefined *)func_ccdab0cbaeeb4bf7(param_1,0xd);\n        if (puStack_28 != (undefined *)0x0) {\n          *puStack_28 = 0;\n        }\n        puStack_28 = (undefined *)func_ccdab0cbaeeb4bf7(param_1,10);\n        if (puStack_28 != (undefined *)0x0) {\n          *puStack_28 = 0;\n        }\n      }\n    }\n    if (iStack_10 != -1) {\n      func_71a288f4f38c46a7(iStack_10);\n    }\n    if (iStack_c != -1) {\n      func_71a288f4f38c46a7(iStack_c);\n    }\n  }\n  return param_1;\n}\n\n",
        "\nvoid func_dfea40048f0b45ae(undefined8 param_1)\n\n{\n  func_a166af89df354558(param_1);\n  return;\n}\n\n",
        "\nvoid func_bebca53b64fe48ea(long param_1)\n\n{\n  int iVar1;\n  long lVar2;\n  int iStack_c;\n  \n  iVar1 = *(int *)(param_1 + 8);\n  lVar2 = func_6cf4ed6082514cc8(0x28);\n  for (iStack_c = 0; iStack_c < 10; iStack_c = iStack_c + 1) {\n    *(undefined4 *)(lVar2 + (long)iStack_c * 4) = 0;\n  }\n  if (iVar1 < 0) {\n    func_cd1a5bea0a0d408e(&UNK_00401398);\n  }\n  else {\n    *(undefined4 *)(lVar2 + (long)iVar1 * 4) = 1;\n    for (iStack_c = 0; iStack_c < 10; iStack_c = iStack_c + 1) {\n      func_59ff24e1c1c048fd(*(undefined4 *)(lVar2 + (long)iStack_c * 4));\n    }\n  }\n  func_a338c1bdc7df42d2(lVar2);\n  return;\n}\n\n",
        "\nvoid func_fc14736d80434589(void)\n\n{\n  func_744ec7d52d45496b();\n  return;\n}\n\n",
        "\nuint func_46ff0cca513b4ac1(void)\n\n{\n  int iVar1;\n  int iVar2;\n  uint uVar3;\n  \n  iVar1 = func_6acf9bc13e6445a4();\n  iVar2 = func_6acf9bc13e6445a4();\n  uVar3 = func_6acf9bc13e6445a4();\n  return uVar3 ^ iVar1 << 0x1e ^ iVar2 << 0xf;\n}\n\n",
        "\nvoid func_d86a843fd40b4716(long param_1)\n\n{\n  undefined auStack_1a8 [396];\n  undefined4 uStack_1c;\n  long lStack_10;\n  \n  lStack_10 = *(long *)(param_1 + 0x10);\n  func_3461f269f5af432e(auStack_1a8,0x43,99);\n  uStack_1c = 0;\n  func_44530ec9f3c44809(lStack_10,auStack_1a8,400);\n  *(undefined4 *)(lStack_10 + 0x18c) = 0;\n  func_c080910c46a842d3(lStack_10);\n  return;\n}\n\n",
        "\nvoid func_1b73dd2eb874428e(short param_1)\n\n{\n  undefined auStack_e8 [99];\n  undefined uStack_85;\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined8 uStack_38;\n  undefined8 uStack_30;\n  undefined8 uStack_28;\n  undefined8 uStack_20;\n  undefined4 uStack_18;\n  \n  uStack_78 = 0;\n  uStack_70 = 0;\n  uStack_68 = 0;\n  uStack_60 = 0;\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  uStack_40 = 0;\n  uStack_38 = 0;\n  uStack_30 = 0;\n  uStack_28 = 0;\n  uStack_20 = 0;\n  uStack_18 = 0;\n  func_018ae998afbc4e1a(auStack_e8,0x41,99);\n  uStack_85 = 0;\n  if (param_1 < 100) {\n    func_95234bc3557548ac(&uStack_78,auStack_e8,(long)param_1);\n    *(undefined *)((long)&uStack_78 + (long)(int)param_1) = 0;\n  }\n  func_27da3481a67c43be(&uStack_78);\n  return;\n}\n\n",
        "\nvoid func_214199edf7134776(void)\n\n{\n  short sStack_a;\n  \n  sStack_a = 0;\n  func_05bd0d7564414e6e(stdin,&UNK_00401334,&sStack_a);\n  func_004eb338ebcc449f((int)sStack_a);\n  return;\n}\n\n",
        "\nvoid func_bc568382f5204be7(void)\n\n{\n  undefined8 uVar1;\n  undefined auStack_d0 [104];\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  ushort uStack_38;\n  undefined *puStack_28;\n  undefined *puStack_20;\n  undefined *puStack_18;\n  undefined *puStack_10;\n  \n  puStack_18 = auStack_d0;\n  puStack_10 = puStack_18;\n  func_74afc095e0714dae(puStack_18,0x41,99);\n  puStack_18[99] = 0;\n  puStack_20 = puStack_18;\n  puStack_28 = puStack_18;\n  uStack_68 = 0;\n  uStack_60 = 0;\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  uStack_40 = 0;\n  uStack_38 = 0;\n  uVar1 = func_b94a9ece14aa4af7(puStack_18);\n  func_5a50303c7e2d41c7(&uStack_68,puStack_28,uVar1);\n  uStack_38 = uStack_38 & 0xff;\n  func_9c822652b2d742f3(puStack_28);\n  return;\n}\n\n",
        "\nvoid func_8c40ccb8f70a4991(void)\n\n{\n  long lVar1;\n  undefined8 uStack_1e;\n  undefined4 uStack_16;\n  undefined2 uStack_12;\n  int iStack_10;\n  int iStack_c;\n  \n  iStack_c = 0;\n  uStack_1e = 0;\n  uStack_16 = 0;\n  uStack_12 = 0;\n  lVar1 = func_c8dc145751324e17(&uStack_1e,0xe,stdin);\n  if (lVar1 == 0) {\n    func_2309a5a9b03b410a(&UNK_00401204);\n  }\n  else {\n    iStack_c = func_10ee92e605e64ff2(&uStack_1e);\n  }\n  if (iStack_c < 0) {\n    iStack_10 = iStack_c * 2;\n    func_8f2f45a74d314cb7(iStack_10);\n  }\n  return;\n}\n\n",
        "\nvoid func_83b8477a9bad4bed(undefined8 param_1)\n\n{\n  func_8c9bcfa627254c9a(param_1);\n  return;\n}\n\n",
        "\nvoid func_24c7bee1b4cc4765\n               (undefined4 param_1)\n\n{\n  func_5c547b4e0f1a40b1(param_1);\n  return;\n}\n\n",
        "\nvoid func_623f30b0d0674e85(undefined8 param_1)\n\n{\n  func_9687b9fa4acb4099(param_1);\n  return;\n}\n\n",
        "\nvoid func_351ea265f84c4dc5(undefined8 *param_1)\n\n{\n  undefined4 *puVar1;\n  \n  puVar1 = (undefined4 *)*param_1;\n  func_c3af81eb24fe45ba(*puVar1);\n  func_c3af81eb24fe45ba(puVar1[1]);\n  return;\n}\n\n",
        "\nvoid func_443526dbdf614aac(undefined8 param_1)\n\n{\n  func_aa0c7b74775640f2(param_1);\n  return;\n}\n\n",
        "\nvoid func_8ab950c7ae544017(void)\n\n{\n  long lVar1;\n  undefined8 *puVar2;\n  byte bVar3;\n  undefined8 uStack_348;\n  undefined8 uStack_340;\n  undefined8 auStack_338 [48];\n  undefined8 uStack_1b8;\n  undefined8 uStack_1b0;\n  undefined8 auStack_1a8 [49];\n  long lStack_20;\n  long lStack_18;\n  undefined8 *puStack_10;\n  \n  bVar3 = 0;\n  uStack_1b8 = 0;\n  uStack_1b0 = 0;\n  puVar2 = auStack_1a8;\n  for (lVar1 = 0x30; lVar1 != 0; lVar1 = lVar1 + -1) {\n    *puVar2 = 0;\n    puVar2 = puVar2 + 1;\n  }\n  puStack_10 = &uStack_1b8;\n  if (GLOBAL_CONST_FIVE == 5) {\n    lStack_18 = func_79cc1d828d014584(puStack_10);\n    lStack_20 = func_6b2f4c055f174693(&UNK_004012f4);\n    if (lStack_20 != 0) {\n      func_341e3cb60bd141d1(lStack_18 * 4 + (long)puStack_10,lStack_20,99 - lStack_18);\n    }\n  }\n  if (GLOBAL_CONST_FIVE == 5) {\n    uStack_348 = 0;\n    uStack_340 = 0;\n    puVar2 = auStack_338;\n    for (lVar1 = 0x30; lVar1 != 0; lVar1 = lVar1 + -1) {\n      *puVar2 = 0;\n      puVar2 = puVar2 + (ulong)bVar3 * -2 + 1;\n    }\n    func_cd66e24480244659(&uStack_348,99,puStack_10);\n    func_62098298c1b9450f(&uStack_348);\n  }\n  return;\n}\n\n",
        "\nvoid func_8e5353a9a51d4ecb(undefined8 param_1)\n\n{\n  func_3d9989dac81d4908(param_1);\n  return;\n}\n\n",
        "\nvoid func_4b73ae9d7efb448e\n               (undefined8 *param_1)\n\n{\n  func_bd29b5b08f764727(*param_1,*param_1);\n  return;\n}\n\n",
        "\nvoid func_743105077cae4467(void)\n\n{\n  undefined auStack_48 [16];\n  long lStack_38;\n  long lStack_18;\n  long lStack_10;\n  \n  lStack_10 = 0;\n  lStack_18 = func_2b0af21c76164649(100);\n  func_0f12a1f73a574886(lStack_18,0x41,99);\n  *(undefined *)(lStack_18 + 99) = 0;\n  lStack_38 = lStack_18 + -8;\n  lStack_10 = lStack_38;\n  func_8011ecf93560402a(auStack_48);\n  return;\n}\n\n",
        "\nvoid func_a85eb3512cec4fcc(void)\n\n{\n  undefined auStack_78 [99];\n  undefined uStack_15;\n  undefined *puStack_10;\n  \n  puStack_10 = (undefined *)0x0;\n  if (globalTrue != 0) {\n    puStack_10 = (undefined *)func_9f2d2eac809e4edb(0x32);\n    *puStack_10 = 0;\n  }\n  func_f03a733a587c40e9(auStack_78,0x43,99);\n  uStack_15 = 0;\n  func_95e34ac94a674a9e(puStack_10,auStack_78,100);\n  puStack_10[99] = 0;\n  func_db786d29e752493b(puStack_10);\n  func_5fc4323dffd9459a(puStack_10);\n  return;\n}\n\n",
        "\nvoid func_229335db98864f4a(void)\n\n{\n  undefined8 uVar1;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined8 uStack_38;\n  undefined8 uStack_30;\n  undefined8 uStack_28;\n  undefined8 uStack_20;\n  ushort uStack_18;\n  undefined8 uStack_10;\n  \n  uStack_10 = func_1f0d339e28c643ed(100);\n  uStack_10 = func_c9d97421b4214566(uStack_10);\n  uStack_48 = 0;\n  uStack_40 = 0;\n  uStack_38 = 0;\n  uStack_30 = 0;\n  uStack_28 = 0;\n  uStack_20 = 0;\n  uStack_18 = 0;\n  uVar1 = func_b83dca6219ab4235(uStack_10);\n  func_cb2e69a104ea4b5f(&uStack_48,uStack_10,uVar1);\n  uStack_18 = uStack_18 & 0xff;\n  func_092e026b7b814f32(uStack_10);\n  func_fd528fa8b715407a(uStack_10);\n  return;\n}\n\n",
        "\nvoid func_c4a457a84b8948ee(void)\n\n{\n  undefined auStack_4c8 [768];\n  undefined auStack_1c8 [28];\n  undefined4 uStack_1ac;\n  undefined auStack_1a8 [396];\n  undefined4 uStack_1c;\n  undefined *puStack_18;\n  int iStack_c;\n  \n  func_069e2516f51f4925(auStack_1a8,0x41,99);\n  uStack_1c = 0;\n  for (iStack_c = 0; iStack_c < 1; iStack_c = iStack_c + 1) {\n    puStack_18 = auStack_1c8;\n  }\n  func_069e2516f51f4925(auStack_4c8,0x43,199);\n  uStack_1ac = 0;\n  func_7c4eeaec7a184689(auStack_4c8,puStack_18);\n  func_3be79e0bc97c4e51(auStack_4c8);\n  return;\n}\n\n",
        "\nvoid func_1b96db95e7ab401a(undefined8 param_1)\n\n{\n  func_3ae295cd5eca4571(param_1);\n  return;\n}\n\n",
        "\nvoid func_5471a161bc284350(undefined8 *param_1)\n\n{\n  int iVar1;\n  \n  iVar1 = func_ee2971c6c0a541e0(*param_1);\n  if (iVar1 < 1) {\n    func_22d5331be1794798(&UNK_00401414);\n    func_358bd33518734e56(1);\n  }\n  return;\n}\n\n",
        "\nvoid func_060865e577c5448e(void)\n\n{\n  func_ed5d56cea4214ab6();\n  return;\n}\n\n",
        "\nvoid func_9618c37e790e4b0e(undefined8 param_1)\n\n{\n  long lVar1;\n  undefined8 uStack_13;\n  undefined2 uStack_b;\n  undefined uStack_9;\n  \n  uStack_13 = 0x4141414141414141;\n  uStack_b = 0x4141;\n  uStack_9 = 0;\n  lVar1 = func_af3a3afcd28244d2(&uStack_13);\n  func_c1fb95e8b8624d2d(param_1,&uStack_13,lVar1 + 1);\n  func_7938c5eabb80488c(param_1);\n  return;\n}\n\n",
        "\nvoid func_0f3987d273464d55(long param_1)\n\n{\n  undefined8 uStack_38;\n  undefined8 uStack_30;\n  undefined8 uStack_28;\n  undefined8 uStack_20;\n  undefined8 uStack_18;\n  undefined4 *puStack_10;\n  \n  puStack_10 = *(undefined4 **)(param_1 + 0x10);\n  uStack_38 = 0;\n  uStack_30 = 0;\n  uStack_28 = 0;\n  uStack_20 = 0;\n  uStack_18 = 0;\n  func_afbffc6a09aa4f35(puStack_10,&uStack_38,0x28);\n  func_cd00b2f969b640c7(*puStack_10);\n  return;\n}\n\n",
        "\nvoid func_40bc39176e5d48d5(void)\n\n{\n  long lVar1;\n  undefined auStack_70 [32];\n  undefined auStack_50 [37];\n  undefined8 uStack_2b;\n  undefined2 uStack_23;\n  undefined uStack_21;\n  undefined *puStack_20;\n  undefined *puStack_18;\n  undefined *puStack_10;\n  \n  puStack_20 = auStack_50;\n  puStack_18 = auStack_70;\n  auStack_50[0] = 0;\n  uStack_2b = 0x4141414141414141;\n  uStack_23 = 0x4141;\n  uStack_21 = 0;\n  puStack_10 = puStack_20;\n  lVar1 = func_dcfef0a64d254630(&uStack_2b,0x10,2);\n  func_71ffbe24592149b1(puStack_20,&uStack_2b,lVar1 + 1);\n  func_05f2ef12868843d8(puStack_20);\n  return;\n}\n\n",
        "\nvoid func_71acb3db17394a2b(void)\n\n{\n  undefined auStack_1a8 [408];\n  undefined *puStack_10;\n  \n  puStack_10 = auStack_1a8;\n  func_0eff4552e3704c80(puStack_10);\n  return;\n}\n\n",
        "\nvoid func_39583b09d3ac4424(undefined8 param_1)\n\n{\n  undefined auStack_198 [396];\n  undefined4 uStack_c;\n  \n  func_2353de5230b94eab(auStack_198,0x43,99);\n  uStack_c = 0;\n  func_fff6a978306244cb(param_1,auStack_198);\n  func_82d86a4b1c964f11(param_1);\n  return;\n}\n\n",
        "\nvoid func_e1f4b3d712a247fb(void)\n\n{\n  int iVar1;\n  undefined8 uStack_e8;\n  undefined8 uStack_e0;\n  undefined8 uStack_d8;\n  undefined8 uStack_d0;\n  undefined8 uStack_c8;\n  undefined8 uStack_c0;\n  undefined8 uStack_b8;\n  undefined8 uStack_b0;\n  undefined8 uStack_a8;\n  undefined8 uStack_a0;\n  undefined8 uStack_98;\n  undefined8 uStack_90;\n  undefined8 uStack_88;\n  undefined8 uStack_80;\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined8 uStack_38;\n  undefined8 uStack_30;\n  ulong uStack_28;\n  ulong uStack_20;\n  long lStack_18;\n  ulong uStack_10;\n  \n  lStack_18 = func_ce254656b9d545e6(400);\n  iVar1 = func_1585add698ef4d16();\n  if (iVar1 == 0) {\n    func_c71a9653f1ae4694(lStack_18,0x41,0x31);\n    *(undefined4 *)(lStack_18 + 0xc4) = 0;\n  }\n  else {\n    func_c71a9653f1ae4694(lStack_18,0x41,99);\n    *(undefined4 *)(lStack_18 + 0x18c) = 0;\n  }\n  uStack_e8 = 0;\n  uStack_e0 = 0;\n  uStack_d8 = 0;\n  uStack_d0 = 0;\n  uStack_c8 = 0;\n  uStack_c0 = 0;\n  uStack_b8 = 0;\n  uStack_b0 = 0;\n  uStack_a8 = 0;\n  uStack_a0 = 0;\n  uStack_98 = 0;\n  uStack_90 = 0;\n  uStack_88 = 0;\n  uStack_80 = 0;\n  uStack_78 = 0;\n  uStack_70 = 0;\n  uStack_68 = 0;\n  uStack_60 = 0;\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  uStack_40 = 0;\n  uStack_38 = 0;\n  uStack_30 = 0;\n  uStack_28 = 0;\n  uStack_20 = func_b363b03c4df047f4(lStack_18);\n  for (uStack_10 = 0; uStack_10 < uStack_20; uStack_10 = uStack_10 + 1) {\n    *(undefined4 *)((long)&uStack_e8 + uStack_10 * 4) = *(undefined4 *)(lStack_18 + uStack_10 * 4);\n  }\n  uStack_28 = uStack_28 & 0xffffffff;\n  func_f54724312c7c4c95(lStack_18);\n  func_6e0726b7fe7543f2(lStack_18);\n  return;\n}\n\n",
        "\nvoid func_14984b83f39a4ed7(void)\n\n{\n  undefined auStack_1a8 [396];\n  undefined4 uStack_1c;\n  long lStack_18;\n  long lStack_10;\n  \n  lStack_10 = 0;\n  if (staticFive == 5) {\n    lStack_18 = func_eda580cc65794328(400);\n    func_034a22e85761402b(lStack_18,0x41,99);\n    *(undefined4 *)(lStack_18 + 0x18c) = 0;\n    lStack_10 = lStack_18 + -0x20;\n  }\n  func_034a22e85761402b(auStack_1a8,0x43,99);\n  uStack_1c = 0;\n  func_ef0825ac5eb84e20(lStack_10,auStack_1a8);\n  func_1c68b100dec347c9(lStack_10);\n  return;\n}\n\n",
        "\nvoid func_5841230933fe4469\n               (undefined8 param_1)\n\n{\n  func_da7fcb0bd3de432b(param_1);\n  return;\n}\n\n",
        "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nvoid func_86d9d7ab2c874a95(void)\n\n{\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined8 uStack_38;\n  ulong uStack_30;\n  undefined *puStack_28;\n  undefined8 uStack_20;\n  \n  if (staticTrue != 0) {\n    puStack_28 = &UNK_00401178;\n    func_05ff09f8503e4d65(&UNK_00401178);\n    uStack_68 = _UNK_00401178;\n    uStack_60 = _UNK_00401180;\n    uStack_58 = _UNK_00401188;\n    uStack_50 = _UNK_00401190;\n    uStack_48 = _UNK_00401198;\n    uStack_40 = _UNK_004011a0;\n    uStack_38 = _UNK_004011a8;\n    puStack_28 = (undefined *)_UNK_004011b8;\n    uStack_20 = _UNK_004011c0;\n    uStack_30 = _UNK_004011b0 & 0xffffffff;\n    func_05ff09f8503e4d65(&uStack_68);\n    func_05ff09f8503e4d65(puStack_28);\n  }\n  return;\n}\n\n",
        "\nvoid func_3b30241b47604226(void)\n\n{\n  undefined auStack_1b8 [396];\n  undefined4 uStack_2c;\n  undefined4 *puStack_20;\n  undefined4 *puStack_18;\n  undefined4 *puStack_10;\n  \n  puStack_10 = (undefined4 *)0x0;\n  puStack_20 = (undefined4 *)func_73fedcd214ca4bdb(200);\n  *puStack_20 = 0;\n  puStack_18 = puStack_20;\n  puStack_10 = puStack_20;\n  func_08440b39164f431a(auStack_1b8,0x43,99);\n  uStack_2c = 0;\n  func_fcdfdef94cf0471b(puStack_20,auStack_1b8);\n  func_05e2e2fff4f34273(puStack_20);\n  func_5aaa9300373641a3(puStack_20);\n  return;\n}\n\n",
        "\nvoid func_376c53bf1e24458d(undefined8 param_1)\n\n{\n  func_3070651569ca4b23(param_1);\n  func_ab23ed1a1dad42e8(param_1);\n  return;\n}\n\n",
        "\nvoid func_917319e730fa43e9(void)\n\n{\n  undefined *puVar1;\n  \n  puVar1 = (undefined *)func_ce4c8255a8944b63(0x32);\n  *puVar1 = 0;\n  func_5839fe01303e48b6(puVar1);\n  return;\n}\n\n",
        "\nvoid func_3169a964da0f40d3(void)\n\n{\n  int iVar1;\n  long lVar2;\n  undefined8 *puVar3;\n  int iStack_20c;\n  undefined2 uStack_208;\n  undefined2 uStack_206;\n  undefined4 uStack_204;\n  undefined8 uStack_1f8;\n  undefined8 uStack_1f0;\n  undefined8 auStack_1e8 [49];\n  undefined8 *puStack_60;\n  undefined8 *puStack_58;\n  undefined4 *puStack_50;\n  int iStack_44;\n  long lStack_40;\n  int iStack_34;\n  undefined8 *puStack_30;\n  undefined8 **ppuStack_28;\n  undefined8 **ppuStack_20;\n  int iStack_14;\n  int iStack_10;\n  int iStack_c;\n  \n  ppuStack_20 = &puStack_60;\n  ppuStack_28 = &puStack_60;\n  uStack_1f8 = 0;\n  uStack_1f0 = 0;\n  puVar3 = auStack_1e8;\n  for (lVar2 = 0x30; lVar2 != 0; lVar2 = lVar2 + -1) {\n    *puVar3 = 0;\n    puVar3 = puVar3 + 1;\n  }\n  puStack_60 = &uStack_1f8;\n  puStack_30 = *ppuStack_20;\n  iStack_34 = 0xffffffff;\n  iStack_c = -1;\n  lStack_40 = func_74f462efbe394f52(puStack_30);\n  iStack_34 = func_cf67235a703142c0(2,1,6);\n  if (iStack_34 != -1) {\n    func_d7dc50371879419f(&uStack_208,0,0x10);\n    uStack_208 = 2;\n    uStack_204 = 0;\n    uStack_206 = func_33963667cfa74716(0x6987);\n    iVar1 = func_073bfe9842114e2e(iStack_34,&uStack_208,0x10);\n    if ((((iVar1 != -1) && (iVar1 = func_c263644df3fb4234(iStack_34,5), iVar1 != -1)) &&\n        (iStack_c = func_37f8f86ec1bb4c23(iStack_34,0,0), iStack_c != -1)) &&\n       ((iStack_44 = func_fcc09d99b2554001(iStack_c,lStack_40 * 4 + (long)puStack_30,(99 - lStack_40) * 4,\n                                     0), iStack_44 != -1 && (iStack_44 != 0)))) {\n      *(undefined4 *)((long)puStack_30 + (lStack_40 + ((ulong)(long)iStack_44 >> 2)) * 4) = 0;\n      puStack_50 = (undefined4 *)func_1cb140154c0d47e5(puStack_30,0xd);\n      if (puStack_50 != (undefined4 *)0x0) {\n        *puStack_50 = 0;\n      }\n      puStack_50 = (undefined4 *)func_1cb140154c0d47e5(puStack_30,10);\n      if (puStack_50 != (undefined4 *)0x0) {\n        *puStack_50 = 0;\n      }\n    }\n  }\n  if (iStack_34 != -1) {\n    func_84af634f96bc4b79(iStack_34);\n  }\n  if (iStack_c != -1) {\n    func_84af634f96bc4b79(iStack_c);\n  }\n  *ppuStack_20 = puStack_30;\n  puStack_58 = *ppuStack_28;\n  iVar1 = func_5bd60f8fd4414cb3(puStack_58,&UNK_00401664,&iStack_20c);\n  if (iVar1 == 1) {\n    iStack_14 = 0;\n    for (iStack_10 = 0; iStack_10 < iStack_20c; iStack_10 = iStack_10 + 1) {\n      iStack_14 = iStack_14 + 1;\n    }\n    func_cf05428a6fa949d8(iStack_14);\n  }\n  return;\n}\n\n",
        "\nvoid func_ae2d6a9ae773449a(void)\n\n{\n  long lVar1;\n  undefined8 uStack_98;\n  undefined8 uStack_90;\n  undefined8 uStack_88;\n  undefined8 uStack_80;\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined4 uStack_38;\n  long lStack_28;\n  long lStack_20;\n  undefined8 *puStack_18;\n  int iStack_c;\n  \n  uStack_98 = 0;\n  uStack_90 = 0;\n  uStack_88 = 0;\n  uStack_80 = 0;\n  uStack_78 = 0;\n  uStack_70 = 0;\n  uStack_68 = 0;\n  uStack_60 = 0;\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  uStack_40 = 0;\n  uStack_38 = 0;\n  puStack_18 = &uStack_98;\n  for (iStack_c = 0; iStack_c < 1; iStack_c = iStack_c + 1) {\n    lStack_20 = func_1361897d6cf5489a(puStack_18);\n    if (1 < 100U - lStack_20) {\n      lStack_28 = func_6ceda37c36d64567(&UNK_004013c6,&UNK_004013c4);\n      if (lStack_28 != 0) {\n        lVar1 = func_659d43b30b654b4e((long)puStack_18 + lStack_20,100 - (int)lStack_20,lStack_28);\n        if (lVar1 == 0) {\n          func_a03e02a0fdc04144(&UNK_004013d4);\n          *(undefined *)(lStack_20 + (long)puStack_18) = 0;\n        }\n        func_597235d95e5d4fcd(lStack_28);\n      }\n    }\n  }\n  func_43f5cd8cbe7b4b9d(&UNK_004013ea,&UNK_004013ea,&UNK_004013e7,&UNK_004013e3,puStack_18,0);\n  return;\n}\n\n",
        "\nvoid func_5f8fc43500184b5a(void)\n\n{\n  int iVar1;\n  \n  iVar1 = func_01490d3b691a4e63(CWE78_OS_Command_Injection__wchar_t_connect_socket_system_68_badData);\n  if (iVar1 < 1) {\n    func_62707be368954360(&UNK_004016b4);\n    func_06c81869da0348e3(1);\n  }\n  return;\n}\n\n",
        "\nvoid func_81548e40ca0f441f(undefined8 param_1)\n\n{\n  undefined8 uVar1;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined8 uStack_38;\n  undefined8 uStack_30;\n  undefined8 uStack_28;\n  undefined8 uStack_20;\n  ushort uStack_18;\n  \n  uStack_48 = 0;\n  uStack_40 = 0;\n  uStack_38 = 0;\n  uStack_30 = 0;\n  uStack_28 = 0;\n  uStack_20 = 0;\n  uStack_18 = 0;\n  uVar1 = func_23270743afb2442b(param_1);\n  func_a89113465dd74c69(&uStack_48,param_1,uVar1);\n  uStack_18 = uStack_18 & 0xff;\n  func_9c3b4af9c3a24c8f(param_1);\n  func_4d31e7499a1c4afa(param_1);\n  return;\n}\n\n",
        "\nvoid func_abc36e48fa244f4c(void)\n\n{\n  long lVar1;\n  undefined8 uStack_20;\n  long lStack_18;\n  short sStack_e;\n  int iStack_c;\n  \n  sStack_e = 0;\n  for (iStack_c = 0; iStack_c < 1; iStack_c = iStack_c + 1) {\n    uStack_20 = 0;\n    lVar1 = func_302fadfefed84f55(&uStack_20,8,stdin);\n    if (lVar1 == 0) {\n      func_e6c1ca1c23db4a1d(&UNK_00401364);\n    }\n    else {\n      sStack_e = func_0a0e093a9b1240c6(&uStack_20);\n    }\n  }\n  if (sStack_e < 100) {\n    lStack_18 = func_8bb59e088193450d((long)sStack_e);\n    func_c0d8731b482b4b45(lStack_18,0x41,(long)(sStack_e + -1));\n    *(undefined *)(lStack_18 + (long)sStack_e + -1) = 0;\n    func_e6c1ca1c23db4a1d(lStack_18);\n    func_5a667dea8a484370(lStack_18);\n  }\n  return;\n}\n\n",
        "\nvoid func_88036a5ef08d4f90(void)\n\n{\n  undefined8 auStack_338 [100];\n  undefined8 *puStack_18;\n  ulong uStack_10;\n  \n  for (uStack_10 = 0; uStack_10 < 100; uStack_10 = uStack_10 + 1) {\n    auStack_338[uStack_10] = 5;\n  }\n  puStack_18 = auStack_338;\n  func_c4438f8c5fcc4db2(&puStack_18);\n  return;\n}\n\n",
        "\nvoid func_5e8772d811124462(void)\n\n{\n  long lVar1;\n  undefined8 *puVar2;\n  undefined8 uStack_408;\n  undefined8 uStack_400;\n  undefined8 uStack_3f8;\n  undefined8 uStack_3f0;\n  undefined8 auStack_3e8 [121];\n  long lStack_20;\n  long lStack_18;\n  undefined8 *puStack_10;\n  \n  uStack_408 = 0x4100000050;\n  uStack_400 = 0x4800000054;\n  uStack_3f8 = 0x3d;\n  uStack_3f0 = 0;\n  puVar2 = auStack_3e8;\n  for (lVar1 = 0x79; lVar1 != 0; lVar1 = lVar1 + -1) {\n    *puVar2 = 0;\n    puVar2 = puVar2 + 1;\n  }\n  puStack_10 = &uStack_408;\n  if (GLOBAL_CONST_FIVE == 5) {\n    lStack_18 = func_8b0f1ae2d23f4e86(puStack_10);\n    lStack_20 = func_75c28e96f14e4c15(&UNK_004012b4);\n    if (lStack_20 != 0) {\n      func_483a65eb348843df(lStack_18 * 4 + (long)puStack_10,lStack_20,0xf9 - lStack_18);\n    }\n  }\n  func_3a9c63838dfa488e(puStack_10);\n  return;\n}\n\n",
        "\nvoid func_01add2e099244cf5(void)\n\n{\n  int iVar1;\n  long lVar2;\n  undefined8 *puVar3;\n  undefined2 uStack_1d8;\n  undefined2 uStack_1d6;\n  undefined4 uStack_1d4;\n  undefined8 uStack_1c8;\n  undefined8 uStack_1c0;\n  undefined8 auStack_1b8 [49];\n  undefined4 *puStack_30;\n  int iStack_24;\n  long lStack_20;\n  int iStack_14;\n  undefined8 *puStack_10;\n  \n  uStack_1c8 = 0;\n  uStack_1c0 = 0;\n  puVar3 = auStack_1b8;\n  for (lVar2 = 0x30; lVar2 != 0; lVar2 = lVar2 + -1) {\n    *puVar3 = 0;\n    puVar3 = puVar3 + 1;\n  }\n  puStack_10 = &uStack_1c8;\n  iStack_14 = 0xffffffff;\n  lStack_20 = func_bb2c0910bb334ed5(puStack_10);\n  iStack_14 = func_2c605128c86248ad(2,1,6);\n  if (iStack_14 != -1) {\n    func_5c34d7199408487c(&uStack_1d8,0,0x10);\n    uStack_1d8 = 2;\n    uStack_1d4 = func_024466c056294ca5(&UNK_004015d4);\n    uStack_1d6 = func_7f9088df7da4468b(0x6987);\n    iVar1 = func_f413db8139f24002(iStack_14,&uStack_1d8,0x10);\n    if (((iVar1 != -1) &&\n        (iStack_24 = func_8a3520f2670043b4(iStack_14,lStack_20 * 4 + (long)puStack_10,(99 - lStack_20) * 4\n                                     ,0), iStack_24 != -1)) && (iStack_24 != 0)) {\n      *(undefined4 *)((long)puStack_10 + (lStack_20 + ((ulong)(long)iStack_24 >> 2)) * 4) = 0;\n      puStack_30 = (undefined4 *)func_ddc8c97af6e6421b(puStack_10,0xd);\n      if (puStack_30 != (undefined4 *)0x0) {\n        *puStack_30 = 0;\n      }\n      puStack_30 = (undefined4 *)func_ddc8c97af6e6421b(puStack_10,10);\n      if (puStack_30 != (undefined4 *)0x0) {\n        *puStack_30 = 0;\n      }\n    }\n  }\n  if (iStack_14 != -1) {\n    func_fd569071f40f40d7(iStack_14);\n  }\n  func_316520e5b7994df9(&UNK_004015fc,&UNK_004015fc,&UNK_004015f0,&UNK_004015e0,puStack_10,0);\n  return;\n}\n\n",
        "\nvoid func_7d3a4b3cc50a4344(void)\n\n{\n  func_532ff1c5c51a4474();\n  func_d308a1c1d41448ea();\n  func_f6179f622eda44f3();\n  return;\n}\n\n",
        "\nvoid func_be7f78bf81d74e51(undefined8 *param_1)\n\n{\n  if (CWE690_NULL_Deref_From_Return__char_realloc_22_badGlobal != 0) {\n    *param_1 = 0x696c616974696e49;\n    *(undefined2 *)(param_1 + 1) = 0x657a;\n    *(undefined *)((long)param_1 + 10) = 0;\n    func_c95f704289024942(param_1);\n    func_424868e2b404410b(param_1);\n  }\n  return;\n}\n\n",
        "\nvoid func_19b870f61dff43e7(void)\n\n{\n  undefined auStack_48 [56];\n  undefined *puStack_10;\n  \n  puStack_10 = auStack_48;\n  auStack_48[0] = 0;\n  func_52db7ab20af042e6(&puStack_10);\n  return;\n}\n\n",
        "\nvoid func_f857115b112544c1(int param_1)\n\n{\n  if (0 < param_1) {\n    func_e1af2289f02f4571(param_1 * 2);\n  }\n  return;\n}\n\n",
        "\nvoid func_09f7a2c5e3e342bf(int *param_1)\n\n{\n  func_1516d41d07d24951(100 % (long)*param_1 & 0xffffffff);\n  return;\n}\n\n",
        "\nvoid func_a903f2af1f4d43c1(void)\n\n{\n  undefined8 uStack_30;\n  undefined4 uStack_28;\n  undefined8 uStack_24;\n  undefined4 uStack_1c;\n  ulong uStack_18;\n  long lStack_10;\n  \n  uStack_24 = 0x7271706f2f636261;\n  uStack_1c = 0x757473;\n  uStack_30 = 0x7271706f2f636261;\n  uStack_28 = 0x757473;\n  lStack_10 = func_6ccceb331e094a02(&uStack_24,0x2f);\n  if (lStack_10 == 0) {\n    func_f054e5f39a924d48(1);\n  }\n  uStack_18 = lStack_10 - (long)&uStack_30;\n  func_73507093c50b4097(uStack_18 & 0xffffffff);\n  return;\n}\n\n",
        "\nundefined4 func_14e086147c2e457e(void)\n\n{\n  return 0x40000001;\n}\n\n",
        "\nvoid func_fc3c6a52376643f0(void)\n\n{\n  func_38a4ca505a4449ab();\n  return;\n}\n\n",
        "\nvoid func_05ed13db89b641cf(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  ulong uStack_10;\n  \n  badStatic = 1;\n  iVar1 = func_ba769e3b6108418d(0xffffffff);\n  puVar2 = (undefined4 *)func_99126adda7b342f2((long)iVar1 << 2);\n  for (uStack_10 = 0; uStack_10 < (ulong)(long)iVar1; uStack_10 = uStack_10 + 1) {\n    puVar2[uStack_10] = 0;\n  }\n  func_b0caabc117114a8b(*puVar2);\n  func_697b243bd0ca4a5c(puVar2);\n  return;\n}\n\n",
        "\nvoid func_0f00b105ab1b48f6(void)\n\n{\n  func_f89bb33f738441dc();\n  func_fc7ad62243d14d24();\n  func_6042df23d7e44590();\n  func_c3d244dd967e45ba();\n  return;\n}\n\n",
        "\nvoid func_1f9864331c164424(void)\n\n{\n  undefined auStack_38 [16];\n  undefined8 *puStack_28;\n  undefined8 *puStack_10;\n  \n  puStack_10 = (undefined8 *)0x0;\n  puStack_10 = (undefined8 *)func_c6c65cf3d33343e2(0,800);\n  *puStack_10 = 5;\n  func_78c10dc0a53a4462(*puStack_10);\n  puStack_28 = puStack_10;\n  func_be7be45ab78f4914(auStack_38);\n  return;\n}\n\n",
        "\nvoid func_01a7c83191304d56(void)\n\n{\n  undefined auStack_130 [112];\n  undefined auStack_c0 [56];\n  undefined auStack_88 [99];\n  undefined uStack_25;\n  undefined *puStack_20;\n  undefined *puStack_18;\n  undefined *puStack_10;\n  \n  puStack_18 = auStack_c0;\n  puStack_20 = auStack_130;\n  if (globalFive == 5) {\n    auStack_c0[0] = 0;\n    puStack_10 = puStack_18;\n  }\n  func_d6a847f9cb264784(auStack_88,0x43,99);\n  uStack_25 = 0;\n  func_e3bdcdf4c5124f11(puStack_10,auStack_88,99);\n  puStack_10[99] = 0;\n  func_6eefa37ba01b4080(puStack_10);\n  return;\n}\n\n",
        "\nvoid func_53057fbb4df54c52(void)\n\n{\n  func_2069dc27c78545e5();\n  func_bcd06874dfb24224();\n  return;\n}\n\n",
        "\nvoid func_247e1f84d01f407c(void)\n\n{\n  func_28b75d0ce95c49c8();\n  func_1d55be4392f34bda();\n  return;\n}\n\n",
        "\nvoid func_c298507d73224e17(ulong param_1)\n\n{\n  ulong uVar1;\n  undefined8 uVar2;\n  \n  uVar1 = func_2cf5ea1d97804b74(&UNK_00401288);\n  if (uVar1 < param_1) {\n    uVar2 = func_c3d88cd548ee482c(param_1 << 2);\n    func_46aee7475cce45cb(uVar2,&UNK_00401288);\n    func_4babeaf90d594d10(uVar2);\n    func_366e8cacf6f14f38(uVar2);\n  }\n  else {\n    func_3cd437c502a24922(&UNK_004012a0);\n  }\n  return;\n}\n\n",
        "\nvoid func_99ed5d72b59543f6(short *param_1)\n\n{\n  short sVar1;\n  long lVar2;\n  \n  sVar1 = *param_1;\n  if (sVar1 < 100) {\n    lVar2 = func_2080ccd5169b4f58((long)sVar1);\n    func_18ce3d841f8644fa(lVar2,0x41,(long)(sVar1 + -1));\n    *(undefined *)(lVar2 + (long)sVar1 + -1) = 0;\n    func_b930408f86b64d35(lVar2);\n    func_ae40ec22901e45ee(lVar2);\n  }\n  return;\n}\n\n",
        "\nvoid func_cb9559b1ec304758(void)\n\n{\n  long lVar1;\n  undefined8 *puVar2;\n  undefined auStack_810 [816];\n  undefined8 auStack_4e0 [51];\n  undefined8 auStack_348 [101];\n  undefined *puStack_20;\n  undefined8 *puStack_18;\n  undefined8 *puStack_10;\n  \n  puStack_18 = auStack_4e0;\n  puStack_20 = auStack_810;\n  if (globalFive == 5) {\n    puStack_10 = puStack_18;\n  }\n  puVar2 = auStack_348;\n  for (lVar1 = 100; lVar1 != 0; lVar1 = lVar1 + -1) {\n    *puVar2 = 0;\n    puVar2 = puVar2 + 1;\n  }\n  func_b4ff965f6caf43a3(puStack_10,auStack_348,800);\n  func_1a153b158d5442ed(*puStack_10);\n  return;\n}\n\n",
        "\nvoid func_bf7979a4133440e3(undefined8 param_1)\n\n{\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined8 uStack_38;\n  undefined8 uStack_30;\n  undefined8 uStack_28;\n  undefined8 uStack_20;\n  undefined2 uStack_18;\n  \n  uStack_48 = 0;\n  uStack_40 = 0;\n  uStack_38 = 0;\n  uStack_30 = 0;\n  uStack_28 = 0;\n  uStack_20 = 0;\n  uStack_18 = 0;\n  func_b0160cb20fb64902(&uStack_48,param_1);\n  func_7b3a4e1c0ee642c2(param_1);\n  return;\n}\n\n",
        "\nvoid func_b34c5ccff8ea41b3(void)\n\n{\n  func_a87ed702731a4769((int)(char)CWE197_Numeric_Truncation_Error__short_connect_socket_68_badData);\n  return;\n}\n\n",
        "\nvoid func_26177dc83db14d76\n               (undefined8 param_1,undefined8 param_2)\n\n{\n  long lVar1;\n  undefined8 *puVar2;\n  undefined8 uStack_118;\n  undefined8 uStack_110;\n  undefined8 auStack_108 [31];\n  undefined8 *puStack_10;\n  \n  uStack_118 = 0x3d48544150;\n  uStack_110 = 0;\n  puVar2 = auStack_108;\n  for (lVar1 = 0x1d; lVar1 != 0; lVar1 = lVar1 + -1) {\n    *puVar2 = 0;\n    puVar2 = puVar2 + 1;\n  }\n  *(undefined2 *)puVar2 = 0;\n  puStack_10 = &uStack_118;\n  puStack_10 = (undefined8 *)\n               func_028d8f9f24bc4675\n                         (puStack_10,param_2,(undefined2 *)((long)puVar2 + 2));\n  func_90916613493c4695(puStack_10);\n  return;\n}\n\n",
        "\nvoid func_e06498dc15c74e30(long param_1)\n\n{\n  undefined auStack_88 [99];\n  undefined uStack_25;\n  ulong uStack_18;\n  ulong uStack_10;\n  \n  func_559753bddc0e4583(auStack_88,0x43,99);\n  uStack_25 = 0;\n  uStack_18 = func_2c10241e24c34745(auStack_88);\n  for (uStack_10 = 0; uStack_10 < uStack_18; uStack_10 = uStack_10 + 1) {\n    auStack_88[uStack_10] = *(undefined *)(uStack_10 + param_1);\n  }\n  uStack_25 = 0;\n  func_03db37f0b58b4a78(auStack_88);\n  return;\n}\n\n",
        "\nvoid func_5cf2fde299cf49f5(void)\n\n{\n  long lVar1;\n  undefined8 uStack_12;\n  undefined2 uStack_a;\n  \n  uStack_a = 0;\n  uStack_12 = 0;\n  lVar1 = func_63d5d51cb65649c9(&uStack_12,8,stdin);\n  if (lVar1 == 0) {\n    func_8d3aa7c368d64003(&UNK_004013b4);\n  }\n  else {\n    uStack_a = func_bc7aeaf249f44e46(&uStack_12);\n  }\n  func_8122aed26cf14d73(&uStack_a);\n  return;\n}\n\n",
        "\nvoid func_7360a7e61e314ac0(void)\n\n{\n  int iVar1;\n  int iVar2;\n  uint uVar3;\n  \n  iVar1 = func_7fa867c1d0354101();\n  iVar2 = func_7fa867c1d0354101();\n  uVar3 = func_7fa867c1d0354101();\n  func_d2bfe3c0021c446e(uVar3 ^ iVar1 << 0x1e ^ iVar2 << 0xf)\n  ;\n  return;\n}\n\n",
        "\nvoid func_c630b338b6054e1f(void)\n\n{\n  undefined auStack_78 [104];\n  undefined *puStack_10;\n  \n  puStack_10 = auStack_78;\n  func_4b67a6516ced4454(puStack_10,0x41,99);\n  puStack_10[99] = 0;\n  func_a5ac344da0cd46d1(&puStack_10);\n  return;\n}\n\n",
        "\nvoid func_3067db73428f428f(void)\n\n{\n  int iVar1;\n  long lVar2;\n  undefined8 *puVar3;\n  undefined2 uStack_1d8;\n  undefined2 uStack_1d6;\n  undefined4 uStack_1d4;\n  undefined8 uStack_1c8;\n  undefined8 uStack_1c0;\n  undefined8 auStack_1b8 [49];\n  undefined4 *puStack_30;\n  int iStack_24;\n  long lStack_20;\n  int iStack_14;\n  undefined8 *puStack_10;\n  \n  uStack_1c8 = 0;\n  uStack_1c0 = 0;\n  puVar3 = auStack_1b8;\n  for (lVar2 = 0x30; lVar2 != 0; lVar2 = lVar2 + -1) {\n    *puVar3 = 0;\n    puVar3 = puVar3 + 1;\n  }\n  puStack_10 = &uStack_1c8;\n  if (globalTrue != 0) {\n    iStack_14 = 0xffffffff;\n    lStack_20 = func_8591e03fc73d46ab(puStack_10);\n    iStack_14 = func_37b9d99efbc84ae3(2,1,6);\n    if (iStack_14 != -1) {\n      func_9bf6057009e8477e(&uStack_1d8,0,0x10);\n      uStack_1d8 = 2;\n      uStack_1d4 = func_31c41d4df2264aed(&UNK_00401664);\n      uStack_1d6 = func_bcb452411b3e4b1b(0x6987);\n      iVar1 = func_bb89d6ef38e04848(iStack_14,&uStack_1d8,0x10);\n      if (((iVar1 != -1) &&\n          (iStack_24 = func_6a034fd1639c4c41(iStack_14,lStack_20 * 4 + (long)puStack_10,\n                                       (99 - lStack_20) * 4,0), iStack_24 != -1)) &&\n         (iStack_24 != 0)) {\n        *(undefined4 *)((long)puStack_10 + (lStack_20 + ((ulong)(long)iStack_24 >> 2)) * 4) = 0;\n        puStack_30 = (undefined4 *)func_2535aeea2f904967(puStack_10,0xd);\n        if (puStack_30 != (undefined4 *)0x0) {\n          *puStack_30 = 0;\n        }\n        puStack_30 = (undefined4 *)func_2535aeea2f904967(puStack_10,10);\n        if (puStack_30 != (undefined4 *)0x0) {\n          *puStack_30 = 0;\n        }\n      }\n    }\n    if (iStack_14 != -1) {\n      func_63dd4d8efe214aef(iStack_14);\n    }\n  }\n  if (globalTrue != 0) {\n    func_2ae30d7376e241ad(puStack_10,puStack_10);\n  }\n  return;\n}\n\n",
        "\nvoid func_1e1d01b1a5334dd8(void)\n\n{\n  long lVar1;\n  undefined8 uStack_1a;\n  undefined4 uStack_12;\n  undefined2 uStack_e;\n  undefined4 uStack_c;\n  \n  uStack_c = 0;\n  uStack_1a = 0;\n  uStack_12 = 0;\n  uStack_e = 0;\n  lVar1 = func_d4a6b44684ee41f8(&uStack_1a,0xe,stdin);\n  if (lVar1 == 0) {\n    func_6715a65df9324188(&UNK_00401244);\n  }\n  else {\n    uStack_c = func_aeb4157f27cd4daa(&uStack_1a);\n  }\n  func_a05b0cefa3c346f5(uStack_c);\n  return;\n}\n\n",
        "\nvoid func_3eda134534244d42(void)\n\n{\n  func_1c4c026d2dcd42ae();\n  func_804050cefa3445f0();\n  return;\n}\n\n",
        "\nvoid func_5017fc291b02465f(void)\n\n{\n  undefined *puStack_90;\n  undefined auStack_88 [99];\n  undefined uStack_25;\n  undefined **ppuStack_18;\n  code *pcStack_10;\n  \n  pcStack_10 = CWE124_Buffer_Underwrite__char_declare_memcpy_65b_badSink;\n  puStack_90 = &UNK_00400ba8;\n  func_a84c79d9f6434b61(auStack_88,0x41,99);\n  uStack_25 = 0;\n  ppuStack_18 = &puStack_90;\n  puStack_90 = &UNK_00400bc5;\n  (*pcStack_10)(ppuStack_18);\n  return;\n}\n\n",
        "\nvoid func_2d38df27b04a44fc(void)\n\n{\n  int iVar1;\n  undefined auStack_36 [14];\n  undefined2 uStack_28;\n  undefined2 uStack_26;\n  undefined4 uStack_24;\n  undefined4 uStack_18;\n  int iStack_14;\n  int iStack_10;\n  int iStack_c;\n  \n  uStack_18 = 0xffffffff;\n  iStack_10 = 0xffffffff;\n  iStack_c = -1;\n  iStack_10 = func_1d6b7b4b59894a56(2,1,6);\n  if (iStack_10 != -1) {\n    func_ebca756c61ef4e6c(&uStack_28,0,0x10);\n    uStack_28 = 2;\n    uStack_24 = 0;\n    uStack_26 = func_1eabeb9279db42c6(0x6987);\n    iVar1 = func_7ada6e50482e475b(iStack_10,&uStack_28,0x10);\n    if ((((iVar1 != -1) && (iVar1 = func_dfe08d64826f45c7(iStack_10,5), iVar1 != -1)) &&\n        (iStack_c = func_f4463015c85b4717(iStack_10,0,0), iStack_c != -1)) &&\n       ((iStack_14 = func_001f2492c29246b2(iStack_c,auStack_36,0xd,0), iStack_14 != -1 && (iStack_14 != 0)\n        ))) {\n      auStack_36[iStack_14] = 0;\n      uStack_18 = func_296809f5ca564f22(auStack_36);\n    }\n  }\n  if (iStack_10 != -1) {\n    func_60cb9c6b0bdb4fa6(iStack_10);\n  }\n  if (iStack_c != -1) {\n    func_60cb9c6b0bdb4fa6(iStack_c);\n  }\n  func_7cfc15903b3e40d5(&uStack_18);\n  return;\n}\n\n",
        "\nvoid func_6d6dfc52b1704778(int *param_1)\n\n{\n  int iVar1;\n  long lVar2;\n  int iStack_c;\n  \n  iVar1 = *param_1;\n  lVar2 = func_43a28dcf20dd45e3(0x28);\n  for (iStack_c = 0; iStack_c < 10; iStack_c = iStack_c + 1) {\n    *(undefined4 *)(lVar2 + (long)iStack_c * 4) = 0;\n  }\n  if (iVar1 < 0) {\n    func_34f6a0176db24ab6(&UNK_00401388);\n  }\n  else {\n    *(undefined4 *)(lVar2 + (long)iVar1 * 4) = 1;\n    for (iStack_c = 0; iStack_c < 10; iStack_c = iStack_c + 1) {\n      func_4a47603bda8a4e74(*(undefined4 *)(lVar2 + (long)iStack_c * 4));\n    }\n  }\n  func_036e66df3015401f(lVar2);\n  return;\n}\n\n",
        "\nvoid func_59c71e2156e34465(void)\n\n{\n  return;\n}\n\n",
        "\nvoid func_0defb1cd9eda4ea1(void)\n\n{\n  func_aa2dfc36136a498a();\n  return;\n}\n\n",
        "\nvoid func_604e6cd69c934a5c(void)\n\n{\n  int iVar1;\n  long lVar2;\n  undefined8 uStack_88;\n  undefined8 uStack_80;\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined8 uStack_38;\n  undefined8 uStack_30;\n  undefined4 uStack_28;\n  long lStack_20;\n  long lStack_18;\n  undefined8 *puStack_10;\n  \n  uStack_88 = 0x2068732f6e69622f;\n  uStack_80 = 0x20616c2d20736c;\n  uStack_78 = 0;\n  uStack_70 = 0;\n  uStack_68 = 0;\n  uStack_60 = 0;\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  uStack_40 = 0;\n  uStack_38 = 0;\n  uStack_30 = 0;\n  uStack_28 = 0;\n  puStack_10 = &uStack_88;\n  if (staticFive == 5) {\n    lStack_18 = func_f705ab098d404c50(puStack_10);\n    if (1 < 100U - lStack_18) {\n      lStack_20 = func_f42b537f470d4f08(&UNK_004013f6,&UNK_004013f4);\n      if (lStack_20 != 0) {\n        lVar2 = func_5746516cc5454f0f((long)puStack_10 + lStack_18,100 - (int)lStack_18,lStack_20);\n        if (lVar2 == 0) {\n          func_8861d1ed2ffa4560(&UNK_00401404);\n          *(undefined *)(lStack_18 + (long)puStack_10) = 0;\n        }\n        func_e5fde0acde3547c0(lStack_20);\n      }\n    }\n  }\n  iVar1 = func_0e5a44bc0c8644af(puStack_10);\n  if (iVar1 < 1) {\n    func_8861d1ed2ffa4560(&UNK_00401413);\n    func_f4b37f43ad8845e8(1);\n  }\n  return;\n}\n\n",
        "\nvoid func_a002c1e8448e4e2d(void)\n\n{\n  func_be6ed05f51ae4a3b();\n  func_10684d952ca04a6f();\n  return;\n}\n\n",
        "\nvoid func_50ce1091af164a3f(void)\n\n{\n  undefined auStack_22 [10];\n  undefined *puStack_18;\n  undefined *puStack_10;\n  \n  puStack_18 = auStack_22;\n  auStack_22[0] = 0;\n  puStack_10 = puStack_18;\n  func_89e3b5ff94af4d1a(puStack_18);\n  return;\n}\n\n",
        "\nvoid func_85de6f93c513450f(void)\n\n{\n  func_f7f2428499134103();\n  return;\n}\n\n",
        "\nvoid func_990682593d744e34(void)\n\n{\n  int iVar1;\n  undefined2 uStack_b8;\n  undefined2 uStack_b6;\n  undefined4 uStack_b4;\n  undefined8 uStack_a8;\n  undefined8 uStack_a0;\n  undefined8 uStack_98;\n  undefined8 uStack_90;\n  undefined8 uStack_88;\n  undefined8 uStack_80;\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined4 uStack_48;\n  undefined *puStack_38;\n  int iStack_2c;\n  long lStack_28;\n  int iStack_1c;\n  undefined8 *puStack_18;\n  int iStack_c;\n  \n  uStack_a8 = 0x2068732f6e69622f;\n  uStack_a0 = 0x20616c2d20736c;\n  uStack_98 = 0;\n  uStack_90 = 0;\n  uStack_88 = 0;\n  uStack_80 = 0;\n  uStack_78 = 0;\n  uStack_70 = 0;\n  uStack_68 = 0;\n  uStack_60 = 0;\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  puStack_18 = &uStack_a8;\n  iStack_1c = 0xffffffff;\n  iStack_c = -1;\n  lStack_28 = func_57683b6d59b5425e(puStack_18);\n  iStack_1c = func_0111d7c75e1b4464(2,1,6);\n  if (iStack_1c != -1) {\n    func_f7fbef197d1548c7(&uStack_b8,0,0x10);\n    uStack_b8 = 2;\n    uStack_b4 = 0;\n    uStack_b6 = func_9a1c38e61ac44013(0x6987);\n    iVar1 = func_455b3b1b4d364123(iStack_1c,&uStack_b8,0x10);\n    if ((((iVar1 != -1) && (iVar1 = func_fe7dbcdee6704ddf(iStack_1c,5), iVar1 != -1)) &&\n        (iStack_c = func_3082518ed75d4e48(iStack_1c,0,0), iStack_c != -1)) &&\n       ((iStack_2c = func_4050ba684d0a4025(iStack_c,(long)puStack_18 + lStack_28,99 - lStack_28,0),\n        iStack_2c != -1 && (iStack_2c != 0)))) {\n      *(undefined *)((long)puStack_18 + iStack_2c + lStack_28) = 0;\n      puStack_38 = (undefined *)func_565c4102fd8b4d84(puStack_18,0xd);\n      if (puStack_38 != (undefined *)0x0) {\n        *puStack_38 = 0;\n      }\n      puStack_38 = (undefined *)func_565c4102fd8b4d84(puStack_18,10);\n      if (puStack_38 != (undefined *)0x0) {\n        *puStack_38 = 0;\n      }\n    }\n  }\n  if (iStack_1c != -1) {\n    func_1e351a789a9e4456(iStack_1c);\n  }\n  if (iStack_c != -1) {\n    func_1e351a789a9e4456(iStack_c);\n  }\n  func_990682593d744e34Data = puStack_18;\n  func_94730f473a7341b4();\n  return;\n}\n\n",
        "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nvoid func_e96fb08f4d2a4259(void)\n\n{\n  undefined8 *puVar1;\n  \n  puVar1 = (undefined8 *)func_1da33de453e841a8(8);\n  *puVar1 = _UNK_004011c8;\n  func_eab581dbf9f5469b(*puVar1);\n  func_3bf63ffda06c41b7(puVar1);\n  return;\n}\n\n",
        "\nvoid func_03217d73d4e54f61(undefined8 param_1)\n\n{\n  func_e7c42957dc9a4d32(param_1);\n  return;\n}\n\n",
        "\nvoid func_f44c17e410104430(void)\n\n{\n  undefined4 *puVar1;\n  \n  puVar1 = (undefined4 *)func_cd4320e5e3f146a6(200);\n  *puVar1 = 0;\n  func_e1012f2399414ee2(puVar1);\n  return;\n}\n\n",
        "\nvoid func_c7befeca1bf6419d(void)\n\n{\n  long lVar1;\n  \n  lVar1 = func_1c233601dff644a1(0x32);\n  func_c7d15099372c42a8(lVar1,0x41,0x31);\n  *(undefined *)(lVar1 + 0x31) = 0;\n  func_a270b6c3ddac4f00(lVar1);\n  return;\n}\n\n",
        "\nvoid func_92db1d80add442d4(void)\n\n{\n  int iVar1;\n  undefined auStack_118 [99];\n  undefined uStack_b5;\n  undefined8 uStack_a8;\n  undefined8 uStack_a0;\n  undefined8 uStack_98;\n  undefined8 uStack_90;\n  undefined8 uStack_88;\n  undefined8 uStack_80;\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined4 uStack_48;\n  undefined auStack_40 [8];\n  undefined2 uStack_38;\n  undefined2 uStack_36;\n  undefined4 uStack_34;\n  short sStack_20;\n  short sStack_1e;\n  int iStack_1c;\n  int iStack_18;\n  int iStack_14;\n  int iStack_10;\n  short sStack_a;\n  \n  sStack_a = 0;\n  iStack_14 = 0xffffffff;\n  iStack_10 = -1;\n  iStack_14 = func_deb47460b5a44313(2,1,6);\n  if (iStack_14 != -1) {\n    func_c2a2406c179e41aa(&uStack_38,0,0x10);\n    uStack_38 = 2;\n    uStack_34 = 0;\n    uStack_36 = func_05ce97d85ee24bd8(0x6987);\n    iVar1 = func_4bcdff5b91ac446c(iStack_14,&uStack_38,0x10);\n    if ((((iVar1 != -1) && (iVar1 = func_e9282648f43b4a42(iStack_14,5), iVar1 != -1)) &&\n        (iStack_10 = func_49be2931cf64446d(iStack_14,0,0), iStack_10 != -1)) &&\n       ((iStack_18 = func_f334d1328ad240ef(iStack_10,auStack_40,7,0), iStack_18 != -1 && (iStack_18 != 0))\n       )) {\n      auStack_40[iStack_18] = 0;\n      iStack_1c = func_f0c7a6bd423f4b2e(auStack_40);\n      if ((iStack_1c < 0x8000) && (-0x8001 < iStack_1c)) {\n        sStack_a = (short)iStack_1c;\n      }\n      else {\n        sStack_a = -1;\n      }\n    }\n  }\n  if (iStack_14 != -1) {\n    func_b526debb0e624f18(iStack_14);\n  }\n  if (iStack_10 != -1) {\n    func_b526debb0e624f18(iStack_10);\n  }\n  sStack_1e = sStack_a;\n  sStack_20 = sStack_a;\n  uStack_a8 = 0;\n  uStack_a0 = 0;\n  uStack_98 = 0;\n  uStack_90 = 0;\n  uStack_88 = 0;\n  uStack_80 = 0;\n  uStack_78 = 0;\n  uStack_70 = 0;\n  uStack_68 = 0;\n  uStack_60 = 0;\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  func_c2a2406c179e41aa(auStack_118,0x41,99);\n  uStack_b5 = 0;\n  if (sStack_20 < 100) {\n    func_dc7e82f0990445a1(&uStack_a8,auStack_118,(long)sStack_20);\n    *(undefined *)((long)&uStack_a8 + (long)(int)sStack_20) = 0;\n  }\n  func_f8627cd2d9204a3d(&uStack_a8);\n  return;\n}\n\n",
        "\n/* WARNING: Restarted to delay deadcode elimination for space: stack */\n\nvoid func_52db3b56d5c04dbb(void)\n\n{\n  int iVar1;\n  undefined auStack_56 [14];\n  undefined2 uStack_48;\n  undefined2 uStack_46;\n  undefined4 uStack_44;\n  int iStack_34;\n  int iStack_30;\n  int iStack_2c;\n  int iStack_28;\n  int iStack_24;\n  int *piStack_20;\n  int *piStack_18;\n  int iStack_10;\n  int iStack_c;\n  \n  piStack_18 = &iStack_34;\n  piStack_20 = &iStack_34;\n  iStack_34 = 0;\n  iStack_c = 0;\n  iStack_24 = 0xffffffff;\n  iStack_10 = -1;\n  iStack_24 = func_29baf50938194300(2,1,6);\n  if (iStack_24 != -1) {\n    func_f401db500c174023(&uStack_48,0,0x10);\n    uStack_48 = 2;\n    uStack_44 = 0;\n    uStack_46 = func_140a3e7a11444a83(0x6987);\n    iVar1 = func_6b44076913d34c99(iStack_24,&uStack_48,0x10);\n    if ((((iVar1 != -1) && (iVar1 = func_93b25090fd2f4f22(iStack_24,5), iVar1 != -1)) &&\n        (iStack_10 = func_5b94e38c78b947c0(iStack_24,0,0), iStack_10 != -1)) &&\n       ((iStack_28 = func_1e4fb9b69e574bd7(iStack_10,auStack_56,0xd,0), iStack_28 != -1 &&\n        (iStack_28 != 0)))) {\n      auStack_56[iStack_28] = 0;\n      iStack_c = func_fcaff1e380b74855(auStack_56);\n    }\n  }\n  if (iStack_24 != -1) {\n    func_4ad657d1c6604b21(iStack_24);\n  }\n  if (iStack_10 != -1) {\n    func_4ad657d1c6604b21(iStack_10);\n  }\n  *piStack_18 = iStack_c;\n  iStack_2c = *piStack_20;\n  if (0 < iStack_2c) {\n    iStack_30 = iStack_2c * 2;\n    func_69329eeab0c942f1(iStack_30);\n  }\n  return;\n}\n\n",
        "\nvoid func_3372444513c34ad2(undefined8 param_1)\n\n{\n  func_be9620280d7840fc(param_1);\n  return;\n}\n\n",
        "\nvoid func_4eb7636d36034f71(long param_1)\n\n{\n  undefined auStack_198 [396];\n  undefined4 uStack_c;\n  \n  func_edba50220f2d4a28(auStack_198,0x43,99);\n  uStack_c = 0;\n  func_3a31e982eb2744f8(param_1,auStack_198,400);\n  *(undefined4 *)(param_1 + 0x18c) = 0;\n  func_0e57ca3697874b6d(param_1);\n  return;\n}\n\n",
        "\nvoid func_93b0b1d526434cc9(void)\n\n{\n  undefined4 *puVar1;\n  \n  puVar1 = (undefined4 *)func_5d565b1168b043ab(0,800);\n  *puVar1 = 0;\n  puVar1[1] = 0;\n  func_0e73764d64e14086(puVar1);\n  return;\n}\n\n",
        "\nvoid func_fbde264e07874355(void)\n\n{\n  func_b23e6a72cd554bda();\n  func_01aa216183e54625();\n  return;\n}\n\n",
        "\nvoid func_e4a4fd812ffa4a8e(void)\n\n{\n  int iVar1;\n  undefined auStack_68 [32];\n  undefined2 uStack_48;\n  undefined2 uStack_46;\n  undefined4 uStack_44;\n  int iStack_30;\n  int iStack_2c;\n  undefined4 *puStack_28;\n  int iStack_1c;\n  ulong uStack_18;\n  int iStack_10;\n  int iStack_c;\n  \n  uStack_18 = 0;\n  for (iStack_c = 0; iStack_c < 1; iStack_c = iStack_c + 1) {\n    iStack_2c = 0xffffffff;\n    iStack_1c = -1;\n    iStack_2c = func_f8c70250af094061(2,1,6);\n    if (iStack_2c != -1) {\n      func_ca17c30f4f274ab3(&uStack_48,0,0x10);\n      uStack_48 = 2;\n      uStack_44 = 0;\n      uStack_46 = func_8ca7249a28134ef8(0x6987);\n      iVar1 = func_a38fcfd9299245eb(iStack_2c,&uStack_48,0x10);\n      if ((((iVar1 != -1) && (iVar1 = func_11e8c1ad592d45f7(iStack_2c,5), iVar1 != -1)) &&\n          (iStack_1c = func_128410547e7d455a(iStack_2c,0,0), iStack_1c != -1)) &&\n         ((iStack_30 = func_5a6fa299ec5a47a8(iStack_1c,auStack_68,0x19,0), iStack_30 != -1 &&\n          (iStack_30 != 0)))) {\n        auStack_68[iStack_30] = 0;\n        uStack_18 = func_bdd5f0c2eeac4c0a(auStack_68,0,0);\n      }\n    }\n    if (iStack_2c != -1) {\n      func_211c992ace5b44f8(iStack_2c);\n    }\n    if (iStack_1c != -1) {\n      func_211c992ace5b44f8(iStack_1c);\n    }\n  }\n  for (iStack_10 = 0; iStack_10 < 1; iStack_10 = iStack_10 + 1) {\n    if (uStack_18 < 6) {\n      func_982a3542017a495c(&UNK_004015e8);\n    }\n    else {\n      puStack_28 = (undefined4 *)func_847f9887e2294c1e(uStack_18);\n      *puStack_28 = 0x6c6c6568;\n      *(undefined2 *)(puStack_28 + 1) = 0x6f;\n      func_982a3542017a495c(puStack_28);\n      func_bd1e8e7c176b4264(puStack_28);\n    }\n  }\n  return;\n}\n\n",
        "\n/* WARNING: Restarted to delay deadcode elimination for space: stack */\n\nvoid func_f0f15a6251084b4d(void)\n\n{\n  undefined auStack_1c8 [396];\n  undefined4 uStack_3c;\n  long lStack_38;\n  long lStack_30;\n  long lStack_28;\n  long lStack_20;\n  long *plStack_18;\n  long *plStack_10;\n  \n  plStack_10 = &lStack_38;\n  plStack_18 = &lStack_38;\n  lStack_38 = 0;\n  lStack_20 = 0;\n  lStack_28 = func_6edeb742d5b44bf0(400);\n  func_7efe0b326ee74716(lStack_28,0x41,99);\n  *(undefined4 *)(lStack_28 + 0x18c) = 0;\n  lStack_20 = lStack_28 + -0x20;\n  *plStack_10 = lStack_20;\n  lStack_30 = *plStack_18;\n  func_7efe0b326ee74716(auStack_1c8,0x43,99);\n  uStack_3c = 0;\n  func_acb5b03fdfe741c2(lStack_30,auStack_1c8,400);\n  *(undefined4 *)(lStack_30 + 0x18c) = 0;\n  func_9c19df03b2664f88(lStack_30);\n  return;\n}\n\n",
        "\nvoid func_86e4bdd08c284991\n               (undefined8 param_1)\n\n{\n  func_619bbdc686ee48c2(param_1,param_1);\n  return;\n}\n\n",
        "\nvoid func_cefa7058c1c547b9(undefined8 param_1)\n\n{\n  func_70f7b45b232b41eb(param_1);\n  return;\n}\n\n",
        "\nvoid func_d6bdc6b2620f4537(undefined8 param_1)\n\n{\n  long lVar1;\n  \n  lVar1 = func_546199f8b8a64b9b(param_1,&UNK_00401424);\n  if (lVar1 != 0) {\n    func_e9409c014c974a90(lVar1);\n  }\n  return;\n}\n\n",
        "\nvoid func_965c33fe1ac44375(undefined8 *param_1)\n\n{\n  undefined8 uStack_88;\n  undefined8 uStack_80;\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined8 uStack_38;\n  undefined8 uStack_30;\n  uint uStack_28;\n  \n  func_07e711e1aae84272(&uStack_88,0x43,99);\n  uStack_88 = *param_1;\n  uStack_80 = param_1[1];\n  uStack_78 = param_1[2];\n  uStack_70 = param_1[3];\n  uStack_68 = param_1[4];\n  uStack_60 = param_1[5];\n  uStack_58 = param_1[6];\n  uStack_50 = param_1[7];\n  uStack_48 = param_1[8];\n  uStack_40 = param_1[9];\n  uStack_38 = param_1[10];\n  uStack_30 = param_1[0xb];\n  uStack_28 = *(uint *)(param_1 + 0xc) & 0xffffff;\n  func_b0ad148e09cc429c(&uStack_88);\n  return;\n}\n\n",
        "\nvoid func_a8de42ebbdf14853(void)\n\n{\n  func_781aab06f646422a();\n  func_417ead561d5c48fc();\n  return;\n}\n\n",
        "\nvoid func_b73dee4de32b46a5(void)\n\n{\n  long lVar1;\n  undefined8 uStack_23;\n  undefined2 uStack_1b;\n  undefined uStack_19;\n  undefined8 uStack_18;\n  int iStack_c;\n  \n  uStack_18 = 0;\n  for (iStack_c = 0; iStack_c < 1; iStack_c = iStack_c + 1) {\n    uStack_18 = func_a67a757462b44831(10);\n  }\n  uStack_23 = 0x4141414141414141;\n  uStack_1b = 0x4141;\n  uStack_19 = 0;\n  lVar1 = func_e6c8fd617b3a456e(&uStack_23);\n  func_08e843e9399c4c31(uStack_18,&uStack_23,lVar1 + 1);\n  func_2f5d472249d6424b(uStack_18);\n  func_3b83afb8231242b8(uStack_18);\n  return;\n}\n\n",
        "\nvoid func_951948322ae242e7(void)\n\n{\n  long lVar1;\n  undefined auStack_f8 [99];\n  undefined uStack_95;\n  undefined8 uStack_88;\n  undefined8 uStack_80;\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined8 uStack_38;\n  undefined8 uStack_30;\n  undefined4 uStack_28;\n  undefined8 uStack_1a;\n  undefined4 uStack_12;\n  undefined2 uStack_e;\n  int iStack_c;\n  \n  iStack_c = -1;\n  uStack_1a = 0;\n  uStack_12 = 0;\n  uStack_e = 0;\n  lVar1 = func_b1b17a8712804caf(&uStack_1a,0xe,stdin);\n  if (lVar1 == 0) {\n    func_dc6406ebbe274271(&UNK_00401394);\n  }\n  else {\n    iStack_c = func_69fc4e256b294a21(&uStack_1a);\n  }\n  uStack_88 = 0;\n  uStack_80 = 0;\n  uStack_78 = 0;\n  uStack_70 = 0;\n  uStack_68 = 0;\n  uStack_60 = 0;\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  uStack_40 = 0;\n  uStack_38 = 0;\n  uStack_30 = 0;\n  uStack_28 = 0;\n  func_32a7359706244aca(auStack_f8,0x41,99);\n  uStack_95 = 0;\n  if (iStack_c < 100) {\n    func_56c2271689604e25(&uStack_88,auStack_f8,(long)iStack_c);\n    *(undefined *)((long)&uStack_88 + (long)iStack_c) = 0;\n  }\n  func_dc6406ebbe274271(&uStack_88);\n  return;\n}\n\n",
        "\nvoid func_a938f986c8494b3e\n               (undefined8 param_1,undefined8 param_2)\n\n{\n  long lVar1;\n  undefined8 *puVar2;\n  undefined8 uStack_138;\n  undefined8 uStack_130;\n  undefined8 auStack_128 [31];\n  undefined8 *puStack_30;\n  undefined8 *puStack_28;\n  long lStack_20;\n  long lStack_18;\n  undefined8 *puStack_10;\n  \n  uStack_138 = 0x3d48544150;\n  uStack_130 = 0;\n  puVar2 = auStack_128;\n  for (lVar1 = 0x1d; lVar1 != 0; lVar1 = lVar1 + -1) {\n    *puVar2 = 0;\n    puVar2 = puVar2 + 1;\n  }\n  *(undefined2 *)puVar2 = 0;\n  puStack_10 = &uStack_138;\n  lStack_18 = func_e109f8c179224dee(puStack_10,param_2,(undefined2 *)((long)puVar2 + 2));\n  lStack_20 = func_6b52ddc29adf4b67(&UNK_004012a4);\n  if (lStack_20 != 0) {\n    func_0c911de10281481d((long)puStack_10 + lStack_18,lStack_20,0xf9 - lStack_18);\n  }\n  puStack_30 = puStack_10;\n  puStack_28 = puStack_10;\n  func_bdb68d66a2d848d5(puStack_10);\n  return;\n}\n\n",
        "\nvoid func_4b84b11fa3cf4773(long param_1)\n\n{\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined8 uStack_38;\n  undefined8 uStack_30;\n  undefined8 uStack_28;\n  undefined8 uStack_20;\n  undefined4 uStack_18;\n  undefined8 uStack_10;\n  \n  uStack_10 = *(undefined8 *)(param_1 + 0x10);\n  uStack_78 = 0;\n  uStack_70 = 0;\n  uStack_68 = 0;\n  uStack_60 = 0;\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  uStack_40 = 0;\n  uStack_38 = 0;\n  uStack_30 = 0;\n  uStack_28 = 0;\n  uStack_20 = 0;\n  uStack_18 = 0;\n  func_f325c212eafb4a22(&uStack_78,99,&UNK_00401814,uStack_10);\n  func_3cbc05cf2b414092(&uStack_78);\n  return;\n}\n\n",
        "\nvoid func_f13d6de6c3284071(void)\n\n{\n  undefined auStack_78 [99];\n  undefined uStack_15;\n  undefined *puStack_10;\n  \n  puStack_10 = (undefined *)0x0;\n  func_3cb7647efdd849b6(auStack_78,0x41,99);\n  uStack_15 = 0;\n  puStack_10 = auStack_78;\n  func_df6bb31251e14d51(puStack_10);\n  func_a6e0819a21ee454d(puStack_10);\n  return;\n}\n\n",
        "\nvoid func_0545a52166c44eec\n               (undefined8 param_1)\n\n{\n  func_01255253e47e434b(param_1);\n  return;\n}\n\n",
        "\nlong func_4563546f9b87468f(long param_1)\n\n{\n  long lStack_20;\n  \n  if (CWE124_Buffer_Underwrite__malloc_wchar_t_memcpy_22_goodG2B1Global == 0) {\n    lStack_20 = func_d4023eeeba5a453d(400);\n    func_0f5f3b416dac4d0d(lStack_20,0x41,99);\n    *(undefined4 *)(lStack_20 + 0x18c) = 0;\n  }\n  else {\n    func_9b94bfb68a534455(&UNK_004013a4);\n    lStack_20 = param_1;\n  }\n  return lStack_20;\n}\n\n",
        "\nvoid func_404c8a20db1943cd(void)\n\n{\n  long lVar1;\n  \n  lVar1 = func_f54ae1db479e46cc(400);\n  func_05621984a3224186(lVar1,0x41,99);\n  *(undefined4 *)(lVar1 + 0x18c) = 0;\n  func_0b50b9aed8cf4e2f(lVar1);\n  return;\n}\n\n",
        "\nvoid func_67c9ccfecc4f4e7e(void)\n\n{\n  func_d29d6dbac8244247();\n  return;\n}\n\n",
        "\nvoid func_90f28e2a273e4ada(void)\n\n{\n  func_6c20aef8055e4edc();\n  return;\n}\n\n",
        "\nvoid func_0906c514e6404bd2(void)\n\n{\n  undefined auStack_c0 [104];\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined8 uStack_38;\n  undefined8 uStack_30;\n  undefined2 uStack_28;\n  undefined *puStack_18;\n  undefined *puStack_10;\n  \n  puStack_18 = auStack_c0;\n  puStack_10 = puStack_18;\n  if (globalFive == 5) {\n    func_f9140efc98544733(puStack_18,0x41,99);\n    puStack_18[99] = 0;\n  }\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  uStack_40 = 0;\n  uStack_38 = 0;\n  uStack_30 = 0;\n  uStack_28 = 0;\n  func_1fbe432b92764dfc(&uStack_58,puStack_18);\n  func_b67dbce4dee34d6a(puStack_18);\n  return;\n}\n\n",
        "\nvoid func_1841003fc5174ad0(void)\n\n{\n  undefined auStack_f0 [104];\n  undefined auStack_88 [104];\n  undefined *puStack_20;\n  ulong uStack_18;\n  undefined *puStack_10;\n  \n  puStack_20 = auStack_f0;\n  func_de4c18aa064b4e65(puStack_20,0x41,99);\n  puStack_20[99] = 0;\n  puStack_10 = puStack_20 + -8;\n  func_de4c18aa064b4e65(auStack_88,0x43,99);\n  auStack_88[99] = 0;\n  for (uStack_18 = 0; uStack_18 < 100; uStack_18 = uStack_18 + 1) {\n    puStack_10[uStack_18] = auStack_88[uStack_18];\n  }\n  puStack_10[99] = 0;\n  func_f4a14103462047d1(puStack_10);\n  return;\n}\n\n",
        "\nvoid func_9b4a5aa068e048ed(int *param_1)\n\n{\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined8 uStack_38;\n  undefined8 uStack_30;\n  undefined8 uStack_28;\n  int iStack_14;\n  int *piStack_10;\n  \n  piStack_10 = param_1;\n  iStack_14 = *param_1;\n  uStack_48 = 0;\n  uStack_40 = 0;\n  uStack_38 = 0;\n  uStack_30 = 0;\n  uStack_28 = 0;\n  if (iStack_14 < 10) {\n    func_04f6010dd1704e20(*(undefined4 *)((long)&uStack_48 + (long)iStack_14 * 4));\n  }\n  else {\n    func_5e3c57f528204608(&UNK_00401318);\n  }\n  return;\n}\n\n",
        "\nvoid func_986e77aa0f9e45cc(undefined8 param_1)\n\n{\n  long lVar1;\n  \n  lVar1 = func_7c9fe7a304bb418d(param_1,&UNK_004016a4);\n  if (lVar1 != 0) {\n    func_50c4b692632d46eb(lVar1);\n  }\n  return;\n}\n\n",
        "\nvoid func_e71315435ca2432d(undefined8 *param_1)\n\n{\n  long lVar1;\n  undefined8 *puVar2;\n  undefined8 auStack_328 [100];\n  \n  puVar2 = auStack_328;\n  for (lVar1 = 100; lVar1 != 0; lVar1 = lVar1 + -1) {\n    *puVar2 = 0;\n    puVar2 = puVar2 + 1;\n  }\n  func_69d4abe2ce734870(param_1,auStack_328,800);\n  func_da130762695548c0(*param_1);\n  func_9fc031c97fa64dfc(param_1);\n  return;\n}\n\n",
        "\nvoid func_e4c32e70dbeb444c(void)\n\n{\n  func_288f5eecb53e4c72();\n  return;\n}\n\n",
        "\nvoid func_450e3a9cbf1e4c4d(void)\n\n{\n  undefined8 uStack_38;\n  undefined8 uStack_30;\n  undefined8 uStack_28;\n  undefined8 uStack_20;\n  undefined8 uStack_18;\n  undefined4 *puStack_10;\n  \n  puStack_10 = (undefined4 *)0x0;\n  badStatic = 1;\n  puStack_10 = (undefined4 *)func_50fb146742aa41f1(0);\n  uStack_38 = 0;\n  uStack_30 = 0;\n  uStack_28 = 0;\n  uStack_20 = 0;\n  uStack_18 = 0;\n  func_ffe272facd2d406c(puStack_10,&uStack_38,0x28);\n  func_3b82fce4934b4c74(*puStack_10);\n  return;\n}\n\n",
        "\nvoid func_b1c74e6e2f9c4c67(void)\n\n{\n  undefined auStack_1b8 [396];\n  undefined4 uStack_2c;\n  long lStack_28;\n  long lStack_20;\n  long lStack_18;\n  long lStack_10;\n  \n  lStack_10 = 0;\n  lStack_18 = func_cc33749d3b754fc5(400);\n  func_6c46d975a6e240c6(lStack_18,0x41,99);\n  *(undefined4 *)(lStack_18 + 0x18c) = 0;\n  lStack_28 = lStack_18 + -0x20;\n  lStack_20 = lStack_28;\n  lStack_10 = lStack_28;\n  func_6c46d975a6e240c6(auStack_1b8,0x43,99);\n  uStack_2c = 0;\n  func_c17ca49f1fd744a1(lStack_20,auStack_1b8,400);\n  *(undefined4 *)(lStack_20 + 0x18c) = 0;\n  func_11e1acbcede24f40(lStack_20);\n  return;\n}\n\n",
        "\nvoid func_b29e07b66f0f49ee(void)\n\n{\n  undefined auStack_78 [99];\n  undefined uStack_15;\n  undefined *puStack_10;\n  \n  puStack_10 = (undefined *)0x0;\n  puStack_10 = (undefined *)func_231d59e50e6d4448(0x32);\n  *puStack_10 = 0;\n  func_e97b65246ee74df0(auStack_78,0x43,99);\n  uStack_15 = 0;\n  func_d8cc410191ef4931(puStack_10,auStack_78);\n  func_ab3bc319f970400d(puStack_10);\n  func_24632385431d42fe(puStack_10);\n  return;\n}\n\n",
        "\nvoid func_b1d6e9f515514eda(void)\n\n{\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  ushort uStack_38;\n  ulong uStack_30;\n  long lStack_28;\n  long lStack_20;\n  long lStack_18;\n  ulong uStack_10;\n  \n  lStack_18 = func_2b330b695d46452c(100);\n  func_eaa3dd7d664f4a07(lStack_18,0x41,99);\n  *(undefined *)(lStack_18 + 99) = 0;\n  lStack_20 = lStack_18;\n  lStack_28 = lStack_18;\n  uStack_68 = 0;\n  uStack_60 = 0;\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  uStack_40 = 0;\n  uStack_38 = 0;\n  uStack_30 = func_3f9c59d3870149c2(lStack_18);\n  for (uStack_10 = 0; uStack_10 < uStack_30; uStack_10 = uStack_10 + 1) {\n    *(undefined *)((long)&uStack_68 + uStack_10) = *(undefined *)(uStack_10 + lStack_28);\n  }\n  uStack_38 = uStack_38 & 0xff;\n  func_932e1be65c5c4821(lStack_28);\n  func_a39342ef56114c62(lStack_28);\n  return;\n}\n\n",
        "\nvoid func_ac43eb519e634e40(void)\n\n{\n  long lVar1;\n  undefined8 uStack_1a;\n  undefined4 uStack_12;\n  undefined2 uStack_e;\n  undefined4 uStack_c;\n  \n  uStack_c = 0xffffffff;\n  uStack_1a = 0;\n  uStack_12 = 0;\n  uStack_e = 0;\n  lVar1 = func_1c3a8a4acb2c4e7e(&uStack_1a,0xe,stdin);\n  if (lVar1 == 0) {\n    func_58a7bd04e685450c(&UNK_004013b4);\n  }\n  else {\n    uStack_c = func_b2d153cbaa1d4228(&uStack_1a);\n  }\n  func_f2749bed67c54519(uStack_c);\n  return;\n}\n\n",
        "\nvoid func_9346d032abb648e6(void)\n\n{\n  func_9d54a26fb73d465b();\n  func_db6ec6561fe9412e();\n  return;\n}\n\n",
        "\nvoid func_5a282a8db58d4cba(void)\n\n{\n  undefined auStack_1b0 [408];\n  undefined *puStack_18;\n  undefined *puStack_10;\n  \n  puStack_10 = (undefined *)0x0;\n  puStack_18 = auStack_1b0;\n  func_463ddb7baa2744f0(puStack_18,0x41,99);\n  *(undefined4 *)(puStack_18 + 0x18c) = 0;\n  puStack_10 = puStack_18;\n  func_d8f8b4c7028140c5(puStack_18);\n  func_255aecb0c79a475a(puStack_10);\n  return;\n}\n\n",
        "\nvoid func_911e14fee7154bc4(void)\n\n{\n  int iVar1;\n  undefined2 uStack_b8;\n  undefined2 uStack_b6;\n  undefined4 uStack_b4;\n  undefined8 uStack_a8;\n  undefined8 uStack_a0;\n  undefined8 uStack_98;\n  undefined8 uStack_90;\n  undefined8 uStack_88;\n  undefined8 uStack_80;\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined4 uStack_48;\n  undefined *puStack_38;\n  int iStack_2c;\n  long lStack_28;\n  int iStack_1c;\n  undefined8 *puStack_18;\n  int iStack_c;\n  \n  uStack_a8 = 0;\n  uStack_a0 = 0;\n  uStack_98 = 0;\n  uStack_90 = 0;\n  uStack_88 = 0;\n  uStack_80 = 0;\n  uStack_78 = 0;\n  uStack_70 = 0;\n  uStack_68 = 0;\n  uStack_60 = 0;\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  puStack_18 = &uStack_a8;\n  iStack_1c = 0xffffffff;\n  iStack_c = -1;\n  lStack_28 = func_bbb5f4d20be44d03(puStack_18);\n  iStack_1c = func_332cb50f3dd848cc(2,1,6);\n  if (iStack_1c != -1) {\n    func_71113ba6b98a4087(&uStack_b8,0,0x10);\n    uStack_b8 = 2;\n    uStack_b4 = 0;\n    uStack_b6 = func_78dbdbd824bc4c27(0x6987);\n    iVar1 = func_bf92d17161ab4eb0(iStack_1c,&uStack_b8,0x10);\n    if ((((iVar1 != -1) && (iVar1 = func_c80d46af6ee74884(iStack_1c,5), iVar1 != -1)) &&\n        (iStack_c = func_517252180c084eb6(iStack_1c,0,0), iStack_c != -1)) &&\n       ((iStack_2c = func_16af679597f244e8(iStack_c,(long)puStack_18 + lStack_28,99 - lStack_28,0),\n        iStack_2c != -1 && (iStack_2c != 0)))) {\n      *(undefined *)((long)puStack_18 + iStack_2c + lStack_28) = 0;\n      puStack_38 = (undefined *)func_ff1e270a7dfb4089(puStack_18,0xd);\n      if (puStack_38 != (undefined *)0x0) {\n        *puStack_38 = 0;\n      }\n      puStack_38 = (undefined *)func_ff1e270a7dfb4089(puStack_18,10);\n      if (puStack_38 != (undefined *)0x0) {\n        *puStack_38 = 0;\n      }\n    }\n  }\n  if (iStack_1c != -1) {\n    func_7fa910b67f234fad(iStack_1c);\n  }\n  if (iStack_c != -1) {\n    func_7fa910b67f234fad(iStack_c);\n  }\n  func_be7fc85c503c4706(stdout,puStack_18);\n  return;\n}\n\n",
        "\nvoid func_4e2579f4d93543d6(undefined8 param_1)\n\n{\n  func_cd8464320c6f45ef(param_1);\n  return;\n}\n\n",
        "\nvoid func_1e388628bdff49bb(void)\n\n{\n  undefined auStack_430 [416];\n  undefined4 auStack_290 [50];\n  undefined auStack_1c8 [396];\n  undefined4 uStack_3c;\n  undefined4 *puStack_30;\n  undefined4 *puStack_28;\n  undefined4 *puStack_20;\n  undefined *puStack_18;\n  undefined4 *puStack_10;\n  \n  puStack_30 = auStack_290;\n  puStack_18 = auStack_430;\n  auStack_290[0] = 0;\n  puStack_28 = puStack_30;\n  puStack_20 = puStack_30;\n  puStack_10 = puStack_30;\n  func_88bc108cd6454907(auStack_1c8,0x43,99);\n  uStack_3c = 0;\n  func_3234a41eff5d461d(puStack_30,auStack_1c8);\n  func_f3ec02070a554ceb(puStack_30);\n  return;\n}\n\n",
        "\nvoid func_334a39a3cb784793(void)\n\n{\n  func_7a93aaad2b454783();\n  func_a99883d3a8c14116();\n  return;\n}\n\n",
        "\nvoid func_1659377f81b448c6(undefined8 *param_1)\n\n{\n  long lVar1;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined8 uStack_38;\n  undefined8 uStack_30;\n  undefined8 uStack_28;\n  undefined4 uStack_20;\n  undefined8 uStack_18;\n  undefined8 *puStack_10;\n  \n  uStack_18 = *param_1;\n  uStack_48 = 0x4100000041;\n  uStack_40 = 0x4100000041;\n  uStack_38 = 0x4100000041;\n  uStack_30 = 0x4100000041;\n  uStack_28 = 0x4100000041;\n  uStack_20 = 0;\n  puStack_10 = param_1;\n  lVar1 = func_634b5d01573c45eb(&uStack_48);\n  func_732355c3509e48d4(uStack_18,&uStack_48,lVar1 + 1);\n  func_56db0432a30147e3(uStack_18);\n  return;\n}\n\n",
        "\nvoid func_629fc08f1b8e41f9(undefined8 *param_1)\n\n{\n  undefined8 uVar1;\n  undefined auStack_1a8 [396];\n  undefined4 uStack_1c;\n  undefined8 uStack_10;\n  \n  uStack_10 = *param_1;\n  func_3300a68dbf564397(auStack_1a8,0x43,99);\n  uStack_1c = 0;\n  uVar1 = func_3ac7bcaa8e0f4f11(auStack_1a8);\n  func_dfd01b044ed245cf(auStack_1a8,uStack_10,uVar1);\n  uStack_1c = 0;\n  func_b84f1c9194954572(auStack_1a8);\n  return;\n}\n\n",
        "\nvoid func_23ff301aadb04c4f(void)\n\n{\n  long lVar1;\n  undefined8 uStack_1c;\n  undefined auStack_14 [4];\n  undefined2 uStack_10;\n  undefined2 uStack_a;\n  \n  uStack_a = 0;\n  uStack_1c = 0;\n  lVar1 = func_d180288d0a124287(&uStack_1c,8,stdin);\n  if (lVar1 == 0) {\n    func_bb19da2767174d9d(&UNK_004013b4);\n  }\n  else {\n    uStack_a = func_ff990bcc45694b66(&uStack_1c);\n  }\n  uStack_10 = uStack_a;\n  func_dbb53a0c31e84778(auStack_14);\n  return;\n}\n\n",
        "\nvoid func_f9b669e62d734788(void)\n\n{\n  undefined8 uStack_88;\n  undefined8 uStack_80;\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined8 uStack_38;\n  undefined8 uStack_30;\n  undefined4 uStack_28;\n  long lStack_20;\n  long lStack_18;\n  undefined8 *puStack_10;\n  \n  uStack_88 = 0;\n  uStack_80 = 0;\n  uStack_78 = 0;\n  uStack_70 = 0;\n  uStack_68 = 0;\n  uStack_60 = 0;\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  uStack_40 = 0;\n  uStack_38 = 0;\n  uStack_30 = 0;\n  uStack_28 = 0;\n  puStack_10 = &uStack_88;\n  lStack_18 = func_a92fbd4e52f64da9(puStack_10);\n  lStack_20 = func_001bcf3b8b024f4e(&UNK_00401384);\n  if (lStack_20 != 0) {\n    func_58243b7e289d46dc((long)puStack_10 + lStack_18,lStack_20,99 - lStack_18);\n  }\n  func_f9b669e62d734788Global = 1;\n  func_982c59b8d2404f3a(puStack_10,puStack_10);\n  return;\n}\n\n",
        "\nvoid func_b063cd4c7b654a31\n               (undefined8 param_1)\n\n{\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined8 uStack_38;\n  undefined8 uStack_30;\n  undefined8 uStack_28;\n  undefined8 uStack_20;\n  undefined4 uStack_18;\n  undefined8 uStack_10;\n  \n  uStack_78 = 0;\n  uStack_70 = 0;\n  uStack_68 = 0;\n  uStack_60 = 0;\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  uStack_40 = 0;\n  uStack_38 = 0;\n  uStack_30 = 0;\n  uStack_28 = 0;\n  uStack_20 = 0;\n  uStack_18 = 0;\n  uStack_10 = param_1;\n  func_257f57d1918049a5(&uStack_78,99,&UNK_004017f4,param_1);\n  func_301bd9df60ef487b(&uStack_78);\n  return;\n}\n\n",
        "\nvoid func_01b1529752344301(void)\n\n{\n  func_3a70a63f52cd40f2();\n  func_67ccff9338c64bdc();\n  return;\n}\n\n",
        "\nvoid func_9967eb6820694f08(void)\n\n{\n  undefined auStack_78 [104];\n  undefined *puStack_10;\n  \n  puStack_10 = auStack_78;\n  func_0d287ed05c864c91(puStack_10,0x41,99);\n  puStack_10[99] = 0;\n  func_b8c9b66392c74f4b(&puStack_10);\n  return;\n}\n\n",
        "\nvoid func_c4bcae63ed0b4631(undefined8 param_1)\n\n{\n  func_e65de5e0a27e49d5(param_1);\n  return;\n}\n\n",
        "\nvoid func_779d482748c34010(void)\n\n{\n  undefined auStack_f8 [99];\n  undefined uStack_95;\n  undefined auStack_88 [112];\n  undefined8 uStack_18;\n  undefined *puStack_10;\n  \n  puStack_10 = auStack_88;\n  func_17e7d33c05d44a5d(auStack_f8,0x43,99);\n  uStack_95 = 0;\n  uStack_18 = func_66a3ca73aa0e4280(auStack_f8);\n  func_5a8e3b02081d482e(puStack_10,auStack_f8,uStack_18);\n  func_1e8bd0b47de24745(puStack_10);\n  return;\n}\n\n",
        "\nvoid func_b755c4ed411749e9(short param_1)\n\n{\n  func_ff087ea1533842f3((int)param_1);\n  return;\n}\n\n",
        "\nvoid func_385707b7b2e249b2(void)\n\n{\n  int iVar1;\n  undefined2 uStack_a8;\n  undefined2 uStack_a6;\n  undefined4 uStack_a4;\n  undefined8 uStack_98;\n  undefined8 uStack_90;\n  undefined8 uStack_88;\n  undefined8 uStack_80;\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined4 uStack_38;\n  undefined *puStack_30;\n  int iStack_24;\n  long lStack_20;\n  int iStack_14;\n  undefined8 *puStack_10;\n  \n  uStack_98 = 0;\n  uStack_90 = 0;\n  uStack_88 = 0;\n  uStack_80 = 0;\n  uStack_78 = 0;\n  uStack_70 = 0;\n  uStack_68 = 0;\n  uStack_60 = 0;\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  uStack_40 = 0;\n  uStack_38 = 0;\n  puStack_10 = &uStack_98;\n  iVar1 = func_96c4f1f17e214aff();\n  if (iVar1 != 0) {\n    iStack_14 = 0xffffffff;\n    lStack_20 = func_c8db478ce0014640(puStack_10);\n    iStack_14 = func_99887b07e78d4d5f(2,1,6);\n    if (iStack_14 != -1) {\n      func_0c24bbadee7e46ec(&uStack_a8,0,0x10);\n      uStack_a8 = 2;\n      uStack_a4 = func_d2f366d0ca6841e7(&UNK_00401614);\n      uStack_a6 = func_02287c2a6cfa4d85(0x6987);\n      iVar1 = func_323449ba8046447c(iStack_14,&uStack_a8,0x10);\n      if (((iVar1 != -1) &&\n          (iStack_24 = func_507401a37c1c4e62(iStack_14,(long)puStack_10 + lStack_20,99 - lStack_20,0),\n          iStack_24 != -1)) && (iStack_24 != 0)) {\n        *(undefined *)((long)puStack_10 + iStack_24 + lStack_20) = 0;\n        puStack_30 = (undefined *)func_6814d488782847b3(puStack_10,0xd);\n        if (puStack_30 != (undefined *)0x0) {\n          *puStack_30 = 0;\n        }\n        puStack_30 = (undefined *)func_6814d488782847b3(puStack_10,10);\n        if (puStack_30 != (undefined *)0x0) {\n          *puStack_30 = 0;\n        }\n      }\n    }\n    if (iStack_14 != -1) {\n      func_a6ea78b3675a4f28(iStack_14);\n    }\n  }\n  func_6871b9b46e9340e0(&UNK_00401625,&UNK_00401625,&UNK_00401622,&UNK_0040161e,puStack_10,0);\n  return;\n}\n\n",
        "\nvoid func_a9fe101d75f04cf7(void)\n\n{\n  long lVar1;\n  undefined8 uStack_98;\n  undefined8 uStack_90;\n  undefined8 uStack_88;\n  undefined8 uStack_80;\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined4 uStack_38;\n  undefined8 *puStack_30;\n  undefined8 *puStack_28;\n  long lStack_20;\n  long lStack_18;\n  undefined8 *puStack_10;\n  \n  uStack_98 = 0;\n  uStack_90 = 0;\n  uStack_88 = 0;\n  uStack_80 = 0;\n  uStack_78 = 0;\n  uStack_70 = 0;\n  uStack_68 = 0;\n  uStack_60 = 0;\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  uStack_40 = 0;\n  uStack_38 = 0;\n  puStack_10 = &uStack_98;\n  lStack_18 = func_7fc05c273efb49d6(puStack_10);\n  if (1 < 100U - lStack_18) {\n    lStack_20 = func_dc01e6a640c746b7(&UNK_004013c6,&UNK_004013c4);\n    if (lStack_20 != 0) {\n      lVar1 = func_f9a9db9fdc1b4e2c((long)puStack_10 + lStack_18,100 - (int)lStack_18,lStack_20);\n      if (lVar1 == 0) {\n        func_1408f20ed3a04039(&UNK_004013d4);\n        *(undefined *)(lStack_18 + (long)puStack_10) = 0;\n      }\n      func_44ea71d79ef04fd4(lStack_20);\n    }\n  }\n  puStack_28 = puStack_10;\n  puStack_30 = puStack_10;\n  func_e2b600b4b2364847(&UNK_004013ea,&UNK_004013ea,&UNK_004013e7,&UNK_004013e3,puStack_10,0);\n  return;\n}\n\n",
        "\nvoid func_faa4b48060fd446c(void)\n\n{\n  int iVar1;\n  long lVar2;\n  undefined8 *puVar3;\n  undefined2 uStack_1e8;\n  undefined2 uStack_1e6;\n  undefined4 uStack_1e4;\n  undefined8 uStack_1d8;\n  undefined8 uStack_1d0;\n  undefined8 uStack_1c8;\n  undefined8 uStack_1c0;\n  undefined8 uStack_1b8;\n  undefined8 uStack_1b0;\n  undefined8 uStack_1a8;\n  undefined8 uStack_1a0;\n  undefined8 auStack_198 [43];\n  long lStack_40;\n  undefined4 *puStack_38;\n  int iStack_2c;\n  long lStack_28;\n  int iStack_1c;\n  undefined8 *puStack_18;\n  int iStack_c;\n  \n  uStack_1d8 = 0x620000002f;\n  uStack_1d0 = 0x6e00000069;\n  uStack_1c8 = 0x730000002f;\n  uStack_1c0 = 0x2000000068;\n  uStack_1b8 = 0x730000006c;\n  uStack_1b0 = 0x2d00000020;\n  uStack_1a8 = 0x610000006c;\n  uStack_1a0 = 0x20;\n  puVar3 = auStack_198;\n  for (lVar2 = 0x2a; lVar2 != 0; lVar2 = lVar2 + -1) {\n    *puVar3 = 0;\n    puVar3 = puVar3 + 1;\n  }\n  puStack_18 = &uStack_1d8;\n  if (staticFive == 5) {\n    iStack_1c = 0xffffffff;\n    iStack_c = -1;\n    lStack_28 = func_c82c856946ab4565(puStack_18);\n    iStack_1c = func_e1500c8cad77465f(2,1,6);\n    if (iStack_1c != -1) {\n      func_270324ea3e0140c1(&uStack_1e8,0,0x10);\n      uStack_1e8 = 2;\n      uStack_1e4 = 0;\n      uStack_1e6 = func_79c56039ae444f49(0x6987);\n      iVar1 = func_ed019251e7374cac(iStack_1c,&uStack_1e8,0x10);\n      if ((((iVar1 != -1) && (iVar1 = func_891c952f057a4c82(iStack_1c,5), iVar1 != -1)) &&\n          (iStack_c = func_09b03ae5fb5d4171(iStack_1c,0,0), iStack_c != -1)) &&\n         ((iStack_2c = func_5e26a05d6e874058(iStack_c,lStack_28 * 4 + (long)puStack_18,\n                                       (99 - lStack_28) * 4,0), iStack_2c != -1 && (iStack_2c != 0))\n         )) {\n        *(undefined4 *)((long)puStack_18 + (lStack_28 + ((ulong)(long)iStack_2c >> 2)) * 4) = 0;\n        puStack_38 = (undefined4 *)func_60c3535dd5ed4b2b(puStack_18,0xd);\n        if (puStack_38 != (undefined4 *)0x0) {\n          *puStack_38 = 0;\n        }\n        puStack_38 = (undefined4 *)func_60c3535dd5ed4b2b(puStack_18,10);\n        if (puStack_38 != (undefined4 *)0x0) {\n          *puStack_38 = 0;\n        }\n      }\n    }\n    if (iStack_1c != -1) {\n      func_f98d8362a1ba4154(iStack_1c);\n    }\n    if (iStack_c != -1) {\n      func_f98d8362a1ba4154(iStack_c);\n    }\n  }\n  lStack_40 = func_79502f3b4bc24e0f(puStack_18,&UNK_00401734);\n  if (lStack_40 != 0) {\n    func_e2a672bc44e846e2(lStack_40);\n  }\n  return;\n}\n\n",
        "\nvoid func_b52603eb40e0406e(void)\n\n{\n  func_47f50c4e52d04d85();\n  return;\n}\n\n",
        "\nvoid func_27e634d90a4d43f1(void)\n\n{\n  int iVar1;\n  long lVar2;\n  undefined8 *puVar3;\n  undefined8 uStack_1a8;\n  undefined8 uStack_1a0;\n  undefined8 uStack_198;\n  undefined8 uStack_190;\n  undefined8 uStack_188;\n  undefined8 uStack_180;\n  undefined8 uStack_178;\n  undefined8 uStack_170;\n  undefined8 auStack_168 [42];\n  long lStack_18;\n  undefined8 *puStack_10;\n  \n  uStack_1a8 = 0x620000002f;\n  uStack_1a0 = 0x6e00000069;\n  uStack_198 = 0x730000002f;\n  uStack_190 = 0x2000000068;\n  uStack_188 = 0x730000006c;\n  uStack_180 = 0x2d00000020;\n  uStack_178 = 0x610000006c;\n  uStack_170 = 0x20;\n  puVar3 = auStack_168;\n  for (lVar2 = 0x2a; lVar2 != 0; lVar2 = lVar2 + -1) {\n    *puVar3 = 0;\n    puVar3 = puVar3 + 1;\n  }\n  puStack_10 = &uStack_1a8;\n  lStack_18 = func_04cb8017d62841a8(puStack_10);\n  if (1 < 100U - lStack_18) {\n    lVar2 = func_a2c0b2a4fc314170(lStack_18 * 4 + (long)puStack_10,100 - (int)lStack_18,stdin);\n    if (lVar2 == 0) {\n      func_f22efa379ef149d0(&UNK_00401404);\n      *(undefined4 *)((long)puStack_10 + lStack_18 * 4) = 0;\n    }\n    else {\n      lStack_18 = func_04cb8017d62841a8(puStack_10);\n      if ((lStack_18 != 0) && (*(int *)((long)puStack_10 + lStack_18 * 4 + -4) == 10)) {\n        *(undefined4 *)((long)puStack_10 + lStack_18 * 4 + -4) = 0;\n      }\n    }\n  }\n  iVar1 = func_b96b7ca0992841d5(puStack_10);\n  if (iVar1 < 1) {\n    func_f22efa379ef149d0(&UNK_00401414);\n    func_93f7fb131c514efa(1);\n  }\n  return;\n}\n\n",
        "\nvoid func_081327cbf32c4753(long param_1)\n\n{\n  undefined auStack_78 [99];\n  undefined uStack_15;\n  long lStack_10;\n  \n  lStack_10 = param_1;\n  func_d57cd395fb2440e9(auStack_78,0x43,99);\n  uStack_15 = 0;\n  func_698208778bfa44c8(lStack_10,auStack_78,100);\n  *(undefined *)(lStack_10 + 99) = 0;\n  func_b8902bac7fbc4503(lStack_10);\n  return;\n}\n\n",
        "\nvoid func_2423f2ceada2472f(void)\n\n{\n  undefined8 uVar1;\n  undefined auStack_88 [99];\n  undefined uStack_25;\n  long lStack_18;\n  long lStack_10;\n  \n  lStack_10 = 0;\n  if (staticTrue != 0) {\n    lStack_18 = func_063801c129cb438f(100);\n    func_d5456737834241e7(lStack_18,0x41,99);\n    *(undefined *)(lStack_18 + 99) = 0;\n    lStack_10 = lStack_18 + -8;\n  }\n  func_d5456737834241e7(auStack_88,0x43,99);\n  uStack_25 = 0;\n  uVar1 = func_17ecf17901c0499e(auStack_88);\n  func_b57d17feb0164b89(auStack_88,lStack_10,uVar1);\n  uStack_25 = 0;\n  func_3ec0f951a5d74576(auStack_88);\n  return;\n}\n\n",
        "\nvoid func_a4c6fd4e2ac1480e(void)\n\n{\n  int iVar1;\n  long lVar2;\n  undefined8 uStack_88;\n  undefined8 uStack_80;\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined8 uStack_38;\n  undefined8 uStack_30;\n  undefined4 uStack_28;\n  undefined8 *puStack_18;\n  undefined8 *puStack_10;\n  \n  iVar1 = func_9854302b04314843();\n  if (iVar1 == 0) {\n    uStack_88 = 0;\n    uStack_80 = 0;\n    uStack_78 = 0;\n    uStack_70 = 0;\n    uStack_68 = 0;\n    uStack_60 = 0;\n    uStack_58 = 0;\n    uStack_50 = 0;\n    uStack_48 = 0;\n    uStack_40 = 0;\n    uStack_38 = 0;\n    uStack_30 = 0;\n    uStack_28 = 0;\n    puStack_10 = &uStack_88;\n    func_37def237a08f4ec7(&UNK_00401304);\n    lVar2 = func_6ba3cccc9e064b53(puStack_10,100,stdin);\n    if (lVar2 == 0) {\n      func_37def237a08f4ec7(&UNK_0040131c);\n      func_0f66fd8b7eac403e(1);\n    }\n    func_37def237a08f4ec7(puStack_10);\n  }\n  else {\n    uStack_88 = 0;\n    uStack_80 = 0;\n    uStack_78 = 0;\n    uStack_70 = 0;\n    uStack_68 = 0;\n    uStack_60 = 0;\n    uStack_58 = 0;\n    uStack_50 = 0;\n    uStack_48 = 0;\n    uStack_40 = 0;\n    uStack_38 = 0;\n    uStack_30 = 0;\n    uStack_28 = 0;\n    puStack_18 = &uStack_88;\n    func_37def237a08f4ec7(&UNK_00401304);\n    func_6ba3cccc9e064b53(puStack_18,100,stdin);\n    func_37def237a08f4ec7(puStack_18);\n  }\n  return;\n}\n\n",
        "\nvoid func_99d4bc0fbf154be6(void)\n\n{\n  long lVar1;\n  undefined8 uStack_30;\n  undefined2 uStack_28;\n  undefined uStack_26;\n  undefined auStack_1a [10];\n  undefined *puStack_10;\n  \n  if (GLOBAL_CONST_FIVE == 5) {\n    puStack_10 = auStack_1a;\n    auStack_1a[0] = 0;\n  }\n  uStack_30 = 0x4141414141414141;\n  uStack_28 = 0x4141;\n  uStack_26 = 0;\n  lVar1 = func_76d1bfbeda4f461a(&uStack_30);\n  func_cd2de567fc7f4b26(puStack_10,&uStack_30,lVar1 + 1);\n  func_8f0b855a09f24a15(puStack_10);\n  return;\n}\n\n",
        "\nvoid func_0f790ff5f40c429e(void)\n\n{\n  func_1381c0159be741c3();\n  func_16072fad80cf486c();\n  return;\n}\n\n",
        "\nvoid func_edca7fdb78d742b0(void)\n\n{\n  undefined8 uStack_c8;\n  undefined8 uStack_c0;\n  undefined8 uStack_b8;\n  undefined8 uStack_b0;\n  undefined8 uStack_a8;\n  undefined8 uStack_a0;\n  ushort uStack_98;\n  undefined auStack_88 [104];\n  ulong uStack_20;\n  undefined *puStack_18;\n  ulong uStack_10;\n  \n  puStack_18 = auStack_88;\n  func_4723d298491a4d75(puStack_18,0x41,99);\n  puStack_18[99] = 0;\n  uStack_c8 = 0;\n  uStack_c0 = 0;\n  uStack_b8 = 0;\n  uStack_b0 = 0;\n  uStack_a8 = 0;\n  uStack_a0 = 0;\n  uStack_98 = 0;\n  uStack_20 = func_82bf7b97805b4352(puStack_18);\n  for (uStack_10 = 0; uStack_10 < uStack_20; uStack_10 = uStack_10 + 1) {\n    *(undefined *)((long)&uStack_c8 + uStack_10) = puStack_18[uStack_10];\n  }\n  uStack_98 = uStack_98 & 0xff;\n  func_87e0aa0247b44813(puStack_18);\n  return;\n}\n\n",
        "\nvoid func_bc232a5227ba4210(undefined8 param_1)\n\n{\n  int iVar1;\n  int iStack_14;\n  int iStack_10;\n  int iStack_c;\n  \n  if (CWE606_Unchecked_Loop_Condition__wchar_t_environment_22_goodB2G2Global != 0) {\n    iVar1 = func_3bb0999d1801486e(param_1,&UNK_0040152c,&iStack_14);\n    if ((iVar1 == 1) && (iStack_14 < 10000)) {\n      iStack_10 = 0;\n      for (iStack_c = 0; iStack_c < iStack_14; iStack_c = iStack_c + 1) {\n        iStack_10 = iStack_10 + 1;\n      }\n      func_d2603a60eb4f4092(iStack_10);\n    }\n  }\n  return;\n}\n\n",
        "\nvoid func_66844d704f9343b1(void)\n\n{\n  func_2e4ae97f25004b4f();\n  func_d75bb89c5dcd4571();\n  func_f3469bb9d8de46bd();\n  func_2b12ef480f6c4808();\n  return;\n}\n\n",
        "\nvoid func_28ae2fbdbde9476b(undefined8 param_1)\n\n{\n  func_82033b31527348ce(param_1);\n  return;\n}\n\n",
        "\nvoid func_f3dfc8139b5743d8(void)\n\n{\n  undefined *puVar1;\n  \n  puVar1 = (undefined *)func_b8ffeb13e134407c(0x32);\n  *puVar1 = 0;\n  func_a07ef2cca7504366(puVar1);\n  return;\n}\n\n",
        "\nvoid func_4d253046d8644a80(int param_1)\n\n{\n  func_069495092e6747d1(param_1 + -1);\n  return;\n}\n\n",
        "\nvoid func_598b3b58d9a14b17(void)\n\n{\n  int iVar1;\n  undefined auStack_118 [99];\n  undefined uStack_b5;\n  undefined8 uStack_a8;\n  undefined8 uStack_a0;\n  undefined8 uStack_98;\n  undefined8 uStack_90;\n  undefined8 uStack_88;\n  undefined8 uStack_80;\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined4 uStack_48;\n  undefined auStack_40 [8];\n  undefined2 uStack_38;\n  undefined2 uStack_36;\n  undefined4 uStack_34;\n  int iStack_1c;\n  int iStack_18;\n  int iStack_14;\n  int iStack_10;\n  short sStack_a;\n  \n  sStack_a = 0;\n  iStack_14 = 0xffffffff;\n  iStack_10 = -1;\n  iStack_14 = func_f79a4bc94f284223(2,1,6);\n  if (iStack_14 != -1) {\n    func_c4b472668a064c86(&uStack_38,0,0x10);\n    uStack_38 = 2;\n    uStack_34 = 0;\n    uStack_36 = func_2515034e4596487a(0x6987);\n    iVar1 = func_7d26a71f2789450f(iStack_14,&uStack_38,0x10);\n    if ((((iVar1 != -1) && (iVar1 = func_3c07c11c8cc449c1(iStack_14,5), iVar1 != -1)) &&\n        (iStack_10 = func_1b272d658ec24d72(iStack_14,0,0), iStack_10 != -1)) &&\n       ((iStack_18 = func_7de44749ecf245ba(iStack_10,auStack_40,7,0), iStack_18 != -1 && (iStack_18 != 0))\n       )) {\n      auStack_40[iStack_18] = 0;\n      iStack_1c = func_57da35ba57654413(auStack_40);\n      if ((iStack_1c < 0x8000) && (-0x8001 < iStack_1c)) {\n        sStack_a = (short)iStack_1c;\n      }\n      else {\n        sStack_a = -1;\n      }\n    }\n  }\n  if (iStack_14 != -1) {\n    func_23fc2a52c78c40d4(iStack_14);\n  }\n  if (iStack_10 != -1) {\n    func_23fc2a52c78c40d4(iStack_10);\n  }\n  uStack_a8 = 0;\n  uStack_a0 = 0;\n  uStack_98 = 0;\n  uStack_90 = 0;\n  uStack_88 = 0;\n  uStack_80 = 0;\n  uStack_78 = 0;\n  uStack_70 = 0;\n  uStack_68 = 0;\n  uStack_60 = 0;\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  func_c4b472668a064c86(auStack_118,0x41,99);\n  uStack_b5 = 0;\n  if (sStack_a < 100) {\n    func_9c458713800a422d(&uStack_a8,auStack_118,(long)sStack_a);\n    *(undefined *)((long)&uStack_a8 + (long)(int)sStack_a) = 0;\n  }\n  func_c8c259adbb884219(&uStack_a8);\n  return;\n}\n\n",
        "\nvoid func_b737e6500d7a4d55(undefined8 param_1)\n\n{\n  func_bbb4d7f7a89c407d(&UNK_004016a0,&UNK_004016a0,&UNK_00401694,&UNK_00401684,param_1,0);\n  return;\n}\n\n",
        "\nvoid func_540c0a6e475140d9(void)\n\n{\n  long lVar1;\n  undefined auStack_f8 [99];\n  undefined uStack_95;\n  undefined8 uStack_88;\n  undefined8 uStack_80;\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined8 uStack_38;\n  undefined8 uStack_30;\n  undefined4 uStack_28;\n  undefined8 uStack_1a;\n  undefined4 uStack_12;\n  undefined2 uStack_e;\n  int iStack_c;\n  \n  iStack_c = -1;\n  uStack_1a = 0;\n  uStack_12 = 0;\n  uStack_e = 0;\n  lVar1 = func_77ba9b0a31ad40fd(&uStack_1a,0xe,stdin);\n  if (lVar1 == 0) {\n    func_8771f4d44c93440f(&UNK_00401394);\n  }\n  else {\n    iStack_c = func_12ff1b0772fa42cf(&uStack_1a);\n  }\n  uStack_88 = 0;\n  uStack_80 = 0;\n  uStack_78 = 0;\n  uStack_70 = 0;\n  uStack_68 = 0;\n  uStack_60 = 0;\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  uStack_40 = 0;\n  uStack_38 = 0;\n  uStack_30 = 0;\n  uStack_28 = 0;\n  func_2df066a20df84cec(auStack_f8,0x41,99);\n  uStack_95 = 0;\n  if (iStack_c < 100) {\n    func_9d3e49516a804bdc(&uStack_88,auStack_f8,(long)iStack_c);\n    *(undefined *)((long)&uStack_88 + (long)iStack_c) = 0;\n  }\n  func_8771f4d44c93440f(&uStack_88);\n  return;\n}\n\n",
        "\nvoid func_7fa3c39deb274fe6(void)\n\n{\n  undefined auStack_290 [408];\n  undefined8 uStack_f8;\n  undefined8 uStack_f0;\n  undefined8 uStack_e8;\n  undefined8 uStack_e0;\n  undefined8 uStack_d8;\n  undefined8 uStack_d0;\n  undefined8 uStack_c8;\n  undefined8 uStack_c0;\n  undefined8 uStack_b8;\n  undefined8 uStack_b0;\n  undefined8 uStack_a8;\n  undefined8 uStack_a0;\n  undefined8 uStack_98;\n  undefined8 uStack_90;\n  undefined8 uStack_88;\n  undefined8 uStack_80;\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  ulong uStack_38;\n  ulong uStack_28;\n  undefined *puStack_20;\n  undefined *puStack_18;\n  ulong uStack_10;\n  \n  puStack_20 = auStack_290;\n  puStack_18 = puStack_20;\n  if (staticTrue != 0) {\n    func_bfe85234fa774f59(puStack_20,0x41,99);\n    *(undefined4 *)(puStack_20 + 0x18c) = 0;\n  }\n  uStack_f8 = 0;\n  uStack_f0 = 0;\n  uStack_e8 = 0;\n  uStack_e0 = 0;\n  uStack_d8 = 0;\n  uStack_d0 = 0;\n  uStack_c8 = 0;\n  uStack_c0 = 0;\n  uStack_b8 = 0;\n  uStack_b0 = 0;\n  uStack_a8 = 0;\n  uStack_a0 = 0;\n  uStack_98 = 0;\n  uStack_90 = 0;\n  uStack_88 = 0;\n  uStack_80 = 0;\n  uStack_78 = 0;\n  uStack_70 = 0;\n  uStack_68 = 0;\n  uStack_60 = 0;\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  uStack_40 = 0;\n  uStack_38 = 0;\n  uStack_28 = func_1fa7a1fd8b9f41d4(puStack_20);\n  for (uStack_10 = 0; uStack_10 < uStack_28; uStack_10 = uStack_10 + 1) {\n    *(undefined4 *)((long)&uStack_f8 + uStack_10 * 4) = *(undefined4 *)(puStack_20 + uStack_10 * 4);\n  }\n  uStack_38 = uStack_38 & 0xffffffff;\n  func_eeefd699bc7b4c1e(puStack_20);\n  return;\n}\n\n",
        "\nvoid func_9cf79df8e2394470(undefined8 param_1)\n\n{\n  func_6a7525ac63a44f3f(param_1);\n  return;\n}\n\n",
        "\nvoid func_795eb136e4244cd7(undefined8 param_1)\n\n{\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined8 uStack_38;\n  undefined8 uStack_30;\n  undefined8 uStack_28;\n  undefined8 uStack_20;\n  undefined2 uStack_18;\n  \n  uStack_48 = 0;\n  uStack_40 = 0;\n  uStack_38 = 0;\n  uStack_30 = 0;\n  uStack_28 = 0;\n  uStack_20 = 0;\n  uStack_18 = 0;\n  func_bb7f427f84024365(&uStack_48,param_1);\n  func_83471c6557404316(param_1);\n  func_0790617ea8ab44b9(param_1);\n  return;\n}\n\n",
        "\nvoid func_0720de28cd714850(void)\n\n{\n  int iVar1;\n  undefined8 uStack_88;\n  undefined8 uStack_80;\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined8 uStack_38;\n  undefined8 uStack_30;\n  undefined4 uStack_28;\n  long lStack_20;\n  long lStack_18;\n  undefined8 *puStack_10;\n  \n  uStack_88 = 0;\n  uStack_80 = 0;\n  uStack_78 = 0;\n  uStack_70 = 0;\n  uStack_68 = 0;\n  uStack_60 = 0;\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  uStack_40 = 0;\n  uStack_38 = 0;\n  uStack_30 = 0;\n  uStack_28 = 0;\n  puStack_10 = &uStack_88;\n  iVar1 = func_8849ad28814f454f();\n  if (iVar1 != 0) {\n    lStack_18 = func_aeb8e267d9b743ac(puStack_10);\n    lStack_20 = func_f8af4df06f75422f(&UNK_00401384);\n    if (lStack_20 != 0) {\n      func_ecaf7346f44f4009((long)puStack_10 + lStack_18,lStack_20,99 - lStack_18);\n    }\n  }\n  iVar1 = func_8849ad28814f454f();\n  if (iVar1 != 0) {\n    func_8a1e1a59aad24b5e(puStack_10,puStack_10);\n  }\n  return;\n}\n\n",
        "\nvoid func_6bbe9ec9ed5b43bf(void)\n\n{\n  long lVar1;\n  undefined auStack_c0 [64];\n  undefined4 auStack_80 [10];\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined8 uStack_38;\n  undefined4 uStack_30;\n  undefined4 *puStack_20;\n  undefined *puStack_18;\n  undefined4 *puStack_10;\n  \n  puStack_20 = auStack_80;\n  puStack_18 = auStack_c0;\n  auStack_80[0] = 0;\n  uStack_58 = 0x4100000041;\n  uStack_50 = 0x4100000041;\n  uStack_48 = 0x4100000041;\n  uStack_40 = 0x4100000041;\n  uStack_38 = 0x4100000041;\n  uStack_30 = 0;\n  puStack_10 = puStack_20;\n  lVar1 = func_d32fb903b92440ea(&uStack_58);\n  func_c877512037fa4f6f(puStack_20,&uStack_58,lVar1 + 1);\n  func_bd60f2c9e8644a57(puStack_20);\n  return;\n}\n\n",
        "\nvoid func_aa033401770a47d0(void)\n\n{\n  int iVar1;\n  long lVar2;\n  undefined8 *puVar3;\n  undefined2 uStack_1d8;\n  undefined2 uStack_1d6;\n  undefined4 uStack_1d4;\n  undefined8 uStack_1c8;\n  undefined8 uStack_1c0;\n  undefined8 auStack_1b8 [48];\n  undefined4 *puStack_38;\n  int iStack_2c;\n  long lStack_28;\n  int iStack_1c;\n  undefined8 *puStack_18;\n  int iStack_c;\n  \n  uStack_1c8 = 0;\n  uStack_1c0 = 0;\n  puVar3 = auStack_1b8;\n  for (lVar2 = 0x30; lVar2 != 0; lVar2 = lVar2 + -1) {\n    *puVar3 = 0;\n    puVar3 = puVar3 + 1;\n  }\n  puStack_18 = &uStack_1c8;\n  iStack_1c = 0xffffffff;\n  iStack_c = -1;\n  lStack_28 = func_b639a002a8854492(puStack_18);\n  iStack_1c = func_408b2087f1074928(2,1,6);\n  if (iStack_1c != -1) {\n    func_a5a0c7369881486e(&uStack_1d8,0,0x10);\n    uStack_1d8 = 2;\n    uStack_1d4 = 0;\n    uStack_1d6 = func_4016a160eb7f4826(0x6987);\n    iVar1 = func_0ca8b9d7de684e40(iStack_1c,&uStack_1d8,0x10);\n    if ((((iVar1 != -1) && (iVar1 = func_cc5b3817ace64a58(iStack_1c,5), iVar1 != -1)) &&\n        (iStack_c = func_613b6f5705a644dc(iStack_1c,0,0), iStack_c != -1)) &&\n       ((iStack_2c = func_25a1b2617571400a(iStack_c,lStack_28 * 4 + (long)puStack_18,(99 - lStack_28) * 4,\n                                     0), iStack_2c != -1 && (iStack_2c != 0)))) {\n      *(undefined4 *)((long)puStack_18 + (lStack_28 + ((ulong)(long)iStack_2c >> 2)) * 4) = 0;\n      puStack_38 = (undefined4 *)func_92e7bc85a6bf4468(puStack_18,0xd);\n      if (puStack_38 != (undefined4 *)0x0) {\n        *puStack_38 = 0;\n      }\n      puStack_38 = (undefined4 *)func_92e7bc85a6bf4468(puStack_18,10);\n      if (puStack_38 != (undefined4 *)0x0) {\n        *puStack_38 = 0;\n      }\n    }\n  }\n  if (iStack_1c != -1) {\n    func_043dceb39938400d(iStack_1c);\n  }\n  if (iStack_c != -1) {\n    func_043dceb39938400d(iStack_c);\n  }\n  func_3e753efb49de473e(puStack_18);\n  return;\n}\n\n",
        "\nvoid func_f7cf1717b6644221(undefined8 param_1)\n\n{\n  long lVar1;\n  undefined8 uStack_38;\n  undefined8 uStack_30;\n  undefined8 uStack_28;\n  undefined8 uStack_20;\n  undefined8 uStack_18;\n  undefined4 uStack_10;\n  \n  uStack_38 = 0x4100000041;\n  uStack_30 = 0x4100000041;\n  uStack_28 = 0x4100000041;\n  uStack_20 = 0x4100000041;\n  uStack_18 = 0x4100000041;\n  uStack_10 = 0;\n  lVar1 = func_57b656f72909425a(&uStack_38);\n  func_f4da20548c3741df(param_1,&uStack_38,lVar1 + 1);\n  func_4f916d5f3b274d8d(param_1);\n  return;\n}\n\n",
        "\nvoid func_6ae83831354041fc(void)\n\n{\n  func_9b0aa37aa7c7410d();\n  return;\n}\n\n",
        "\nvoid func_053469ca65f14a51\n               (undefined8 param_1)\n\n{\n  func_9f2257b921cc4cbb(param_1);\n  return;\n}\n\n",
        "\nvoid func_6e3bab9303f84de5(void)\n\n{\n  int iVar1;\n  long lVar2;\n  undefined auStack_56 [14];\n  undefined2 uStack_48;\n  undefined2 uStack_46;\n  undefined4 uStack_44;\n  undefined *puStack_30;\n  long lStack_28;\n  int iStack_20;\n  int iStack_1c;\n  ulong uStack_18;\n  int iStack_c;\n  \n  iStack_c = -1;\n  if (staticTrue != 0) {\n    iStack_1c = 0xffffffff;\n    iStack_1c = func_49cafd5d3da64d68(2,1,6);\n    if (iStack_1c != -1) {\n      func_c89c899e3ff04d34(&uStack_48,0,0x10);\n      uStack_48 = 2;\n      uStack_44 = func_f369b35c1ebd422f(&UNK_00401618);\n      uStack_46 = func_f4d5379aec8c479d(0x6987);\n      iVar1 = func_51543ca8f0314fa5(iStack_1c,&uStack_48,0x10);\n      if (((iVar1 != -1) &&\n          (iStack_20 = func_1bc4a4140e104d13(iStack_1c,auStack_56,0xd,0), iStack_20 != -1)) &&\n         (iStack_20 != 0)) {\n        auStack_56[iStack_20] = 0;\n        iStack_c = func_baad951200e34615(auStack_56);\n      }\n    }\n    if (iStack_1c != -1) {\n      func_154b0e54f336422c(iStack_1c);\n    }\n  }\n  if (staticTrue != 0) {\n    uStack_18 = 0;\n    lStack_28 = 0;\n    puStack_30 = &UNK_00401622;\n    lStack_28 = func_8b70d683ac9d454d(&UNK_00401622,&UNK_00401631);\n    if (lStack_28 == 0) {\n      func_35b27405f4e64ad2(1);\n    }\n    for (uStack_18 = 0; uStack_18 < (ulong)(long)iStack_c; uStack_18 = uStack_18 + 1) {\n      lVar2 = func_1f02500e530642a1(&UNK_00401638,1,0x32,lStack_28);\n      if (lVar2 != 0x32) {\n        func_35b27405f4e64ad2(1);\n      }\n    }\n    if (lStack_28 != 0) {\n      func_353b775b0f864045(lStack_28);\n    }\n  }\n  return;\n}\n\n",
        "\nundefined8 * CWE401_Memory_Leak__int64_t_calloc_61b_badSource(void)\n\n{\n  undefined8 *puVar1;\n  \n  puVar1 = (undefined8 *)func_23f43f86c8ab4781(100,8);\n  *puVar1 = 5;\n  func_0c7b4b2ff92d409c(*puVar1);\n  return puVar1;\n}\n\n",
        "\nvoid func_e86dee123a554284(void)\n\n{\n  func_3b3ea69790ca4d18();\n  func_0ad07324c01f45ee();\n  func_5f3c21a1ec4547d1();\n  func_b611462107574916();\n  return;\n}\n\n",
        "\nvoid func_14d9e235a875401d(void)\n\n{\n  undefined4 auStack_1a8 [100];\n  ulong uStack_18;\n  undefined4 *puStack_10;\n  \n  puStack_10 = (undefined4 *)0x0;\n  if (staticFive == 5) {\n    puStack_10 = (undefined4 *)func_d2ab5948f14844f6(200);\n    *puStack_10 = 0;\n  }\n  func_894c1ded1d5348cd(auStack_1a8,0x43,99);\n  auStack_1a8[99] = 0;\n  for (uStack_18 = 0; uStack_18 < 100; uStack_18 = uStack_18 + 1) {\n    puStack_10[uStack_18] = auStack_1a8[uStack_18];\n  }\n  puStack_10[99] = 0;\n  func_367b85ff46364d72(puStack_10);\n  func_d16f23481bc048b4(puStack_10);\n  return;\n}\n\n",
        "\nvoid func_83af7a5d20b046e2(undefined8 param_1)\n\n{\n  func_cf69de2e10314309(param_1);\n  return;\n}\n\n",
        "\nvoid func_d710f3b07dc4404c(void)\n\n{\n  func_827ad7adb7ae45c3();\n  return;\n}\n\n",
        "\nvoid func_73d14b7c3a4043fd(void)\n\n{\n  undefined auStack_1c8 [400];\n  undefined auStack_38 [16];\n  undefined *puStack_28;\n  undefined *puStack_10;\n  \n  puStack_10 = auStack_1c8;\n  func_bd11dd3b8e664b54(puStack_10,0x41,99);\n  *(undefined4 *)(puStack_10 + 0x18c) = 0;\n  puStack_28 = puStack_10;\n  func_d2108ba5108740a8(auStack_38);\n  return;\n}\n\n",
        "\nvoid func_89c4ec6e367e4526(void)\n\n{\n  long lVar1;\n  undefined auStack_1b8 [396];\n  undefined4 uStack_2c;\n  long lStack_20;\n  long lStack_18;\n  long lStack_10;\n  \n  lStack_10 = 0;\n  lStack_10 = func_f11e5e8349e44d11(200);\n  func_71535e6d474c4d06(lStack_10,0x41,0x31);\n  *(undefined4 *)(lStack_10 + 0xc4) = 0;\n  lStack_20 = lStack_10;\n  lStack_18 = lStack_10;\n  func_71535e6d474c4d06(auStack_1b8,0x43,99);\n  uStack_2c = 0;\n  lVar1 = func_f8658f39c3bf45c3(auStack_1b8);\n  func_eb6bde51b7754ab5(auStack_1b8,lStack_18,lVar1 * 4);\n  uStack_2c = 0;\n  func_7b7781ab6fc640d5(auStack_1b8);\n  func_bf56e46458d84f1f(lStack_18);\n  return;\n}\n\n",
        "\nvoid func_650b195e576949e5(void)\n\n{\n  long lVar1;\n  undefined auStack_c0 [64];\n  undefined4 auStack_80 [10];\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined8 uStack_38;\n  undefined4 uStack_30;\n  undefined *puStack_20;\n  undefined4 *puStack_18;\n  undefined4 *puStack_10;\n  \n  puStack_18 = auStack_80;\n  puStack_20 = auStack_c0;\n  if (GLOBAL_CONST_TRUE != 0) {\n    auStack_80[0] = 0;\n    puStack_10 = puStack_18;\n  }\n  uStack_58 = 0x4100000041;\n  uStack_50 = 0x4100000041;\n  uStack_48 = 0x4100000041;\n  uStack_40 = 0x4100000041;\n  uStack_38 = 0x4100000041;\n  uStack_30 = 0;\n  lVar1 = func_d9458c75551a4f6c(&uStack_58);\n  func_06af0aac67a3477e(puStack_10,&uStack_58,(lVar1 + 1) * 4);\n  func_aa1f39d176d44045(puStack_10);\n  return;\n}\n\n",
        "\nvoid func_0a50ac213ca6455f(void)\n\n{\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined8 uStack_38;\n  undefined8 uStack_30;\n  undefined8 uStack_28;\n  undefined8 uStack_20;\n  undefined2 uStack_18;\n  long lStack_10;\n  \n  lStack_10 = func_305e4839a24141fb(100);\n  func_4aec0383a73a4756(lStack_10,0x41,99);\n  *(undefined *)(lStack_10 + 99) = 0;\n  uStack_48 = 0;\n  uStack_40 = 0;\n  uStack_38 = 0;\n  uStack_30 = 0;\n  uStack_28 = 0;\n  uStack_20 = 0;\n  uStack_18 = 0;\n  func_39fe62d5090841ed(&uStack_48,lStack_10);\n  func_c438299e5d4a4c4d(lStack_10);\n  func_60bf392e3f5d4299(lStack_10);\n  return;\n}\n\n",
        "\nvoid func_8e02051d039c41d0(void)\n\n{\n  long lVar1;\n  undefined auStack_420 [416];\n  undefined auStack_280 [200];\n  undefined auStack_1b8 [396];\n  undefined4 uStack_2c;\n  undefined *puStack_20;\n  undefined *puStack_18;\n  undefined *puStack_10;\n  \n  puStack_10 = auStack_280;\n  puStack_18 = auStack_420;\n  func_73c170bbb8744555(puStack_10,0x41,0x31);\n  *(undefined4 *)(puStack_10 + 0xc4) = 0;\n  func_73c170bbb8744555(puStack_18,0x41,99);\n  *(undefined4 *)(puStack_18 + 0x18c) = 0;\n  puStack_20 = puStack_10;\n  func_73c170bbb8744555(auStack_1b8,0x43,99);\n  uStack_2c = 0;\n  lVar1 = func_baa8a041de9b495b(auStack_1b8);\n  func_96fc376c06f34729(auStack_1b8,puStack_20,lVar1 * 4);\n  uStack_2c = 0;\n  func_d519c3026c7d48a4(auStack_1b8);\n  return;\n}\n\n",
        "\nvoid func_1ecb56dfc2d84b64(void)\n\n{\n  int iVar1;\n  undefined auStack_36 [14];\n  undefined2 uStack_28;\n  undefined2 uStack_26;\n  undefined4 uStack_24;\n  int iStack_14;\n  int iStack_10;\n  undefined4 uStack_c;\n  \n  uStack_c = 0;\n  iStack_10 = 0xffffffff;\n  iStack_10 = func_1bd42931c0144d76(2,1,6);\n  if (iStack_10 != -1) {\n    func_06a29771b8244e27(&uStack_28,0,0x10);\n    uStack_28 = 2;\n    uStack_24 = func_60bbf900f5a344c5(&UNK_00401474);\n    uStack_26 = func_a27ed67aeb334d47(0x6987);\n    iVar1 = func_f94de1b720854124(iStack_10,&uStack_28,0x10);\n    if (((iVar1 != -1) && (iStack_14 = func_74225c85a99044a3(iStack_10,auStack_36,0xd,0), iStack_14 != -1)\n        ) && (iStack_14 != 0)) {\n      auStack_36[iStack_14] = 0;\n      uStack_c = func_128646893991412e(auStack_36);\n    }\n  }\n  if (iStack_10 != -1) {\n    func_02215be93bdc41ec(iStack_10);\n  }\n  badStatic = 1;\n  func_a2b4f55379b24867(uStack_c);\n  return;\n}\n\n",
        "\nvoid func_ec2e233d1ee24a7d(void)\n\n{\n  char *pcVar1;\n  int iStack_c;\n  \n  for (iStack_c = 0; iStack_c < 1; iStack_c = iStack_c + 1) {\n    pcVar1 = (char *)func_69d1c39d29174297(8);\n    *pcVar1 = 'B';\n    func_5b2d7413ef424ddc((int)*pcVar1);\n    func_8c85c21ac2204974(pcVar1);\n  }\n  return;\n}\n\n",
        "\nvoid func_f3f63aba4ba04d91(void)\n\n{\n  func_3019fdd492a9436b();\n  return;\n}\n\n",
        "\nvoid func_add10e2efe6e4102\n               (undefined8 param_1)\n\n{\n  long lVar1;\n  undefined8 uStack_d8;\n  undefined8 uStack_d0;\n  undefined8 uStack_c8;\n  undefined8 uStack_c0;\n  undefined8 uStack_b8;\n  undefined8 uStack_b0;\n  undefined8 uStack_a8;\n  undefined8 uStack_a0;\n  undefined8 uStack_98;\n  undefined8 uStack_90;\n  undefined8 uStack_88;\n  undefined8 uStack_80;\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined8 uStack_38;\n  undefined8 uStack_30;\n  undefined8 uStack_28;\n  undefined8 uStack_20;\n  ulong uStack_18;\n  \n  uStack_d8 = 0;\n  uStack_d0 = 0;\n  uStack_c8 = 0;\n  uStack_c0 = 0;\n  uStack_b8 = 0;\n  uStack_b0 = 0;\n  uStack_a8 = 0;\n  uStack_a0 = 0;\n  uStack_98 = 0;\n  uStack_90 = 0;\n  uStack_88 = 0;\n  uStack_80 = 0;\n  uStack_78 = 0;\n  uStack_70 = 0;\n  uStack_68 = 0;\n  uStack_60 = 0;\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  uStack_40 = 0;\n  uStack_38 = 0;\n  uStack_30 = 0;\n  uStack_28 = 0;\n  uStack_20 = 0;\n  uStack_18 = 0;\n  lVar1 = func_677bf4bb23ce4f4b(param_1);\n  func_eff746a972a3455e(&uStack_d8,param_1,lVar1 * 4);\n  uStack_18 = uStack_18 & 0xffffffff;\n  func_e299c845b38e4720(param_1);\n  return;\n}\n\n",
        "\nvoid func_77f559e36333453e(void)\n\n{\n  int iVar1;\n  undefined auStack_1a8 [396];\n  undefined4 uStack_1c;\n  undefined4 *puStack_10;\n  \n  puStack_10 = (undefined4 *)0x0;\n  iVar1 = func_19d51391998b464d();\n  if (iVar1 == 0) {\n    puStack_10 = (undefined4 *)func_6afa33c2d30e4eaf(400);\n    *puStack_10 = 0;\n  }\n  else {\n    puStack_10 = (undefined4 *)func_6afa33c2d30e4eaf(200);\n    *puStack_10 = 0;\n  }\n  func_3c97e4d54cdb4bd1(auStack_1a8,0x43,99);\n  uStack_1c = 0;\n  func_3612d09a4bfe4a6d(puStack_10,auStack_1a8,400);\n  puStack_10[99] = 0;\n  func_7d34a82ed98449dd(puStack_10);\n  func_2f83ffbc73cb4259(puStack_10);\n  return;\n}\n\n",
        "\nvoid func_324e2eb3a57c4ef4(void)\n\n{\n  undefined auStack_430 [416];\n  undefined4 auStack_290 [50];\n  undefined auStack_1c8 [396];\n  undefined4 uStack_3c;\n  undefined4 *puStack_30;\n  undefined4 *puStack_28;\n  undefined4 *puStack_20;\n  undefined *puStack_18;\n  undefined4 *puStack_10;\n  \n  puStack_30 = auStack_290;\n  puStack_18 = auStack_430;\n  auStack_290[0] = 0;\n  puStack_28 = puStack_30;\n  puStack_20 = puStack_30;\n  puStack_10 = puStack_30;\n  func_f80356eecde44f14(auStack_1c8,0x43,99);\n  uStack_3c = 0;\n  func_08452ce03e164a65(puStack_30,auStack_1c8,99);\n  puStack_30[99] = 0;\n  func_49f28efb9117425a(puStack_30);\n  return;\n}\n\n",
        "\nvoid func_7d049ff7d6a44851(void)\n\n{\n  undefined auStack_d0 [112];\n  undefined auStack_60 [64];\n  undefined *puStack_20;\n  undefined *puStack_18;\n  undefined *puStack_10;\n  \n  puStack_10 = auStack_60;\n  puStack_18 = auStack_d0;\n  func_6853436afe894979(puStack_10,0x41,0x31);\n  puStack_10[0x31] = 0;\n  func_6853436afe894979(puStack_18,0x41,99);\n  puStack_18[99] = 0;\n  puStack_20 = puStack_10;\n  func_7d049ff7d6a44851Data = puStack_10;\n  func_07129370aa874b06();\n  return;\n}\n\n",
        "\nvoid func_8829aa5b8e054d9d(undefined8 param_1)\n\n{\n  func_a3a660b9f3c645db(param_1);\n  return;\n}\n\n",
        "\nvoid func_eb481f7a843847dc(void)\n\n{\n  func_5ec9fa0f30e04b44();\n  return;\n}\n\n",
        "\nvoid func_6eb46f34527c4ba6(void)\n\n{\n  undefined auStack_3f8 [400];\n  undefined auStack_268 [596];\n  undefined4 uStack_14;\n  \n  func_fb87ceefc7a44969(auStack_268,0x41,0x95);\n  uStack_14 = 0;\n  func_3fb2b64402944715(auStack_3f8,auStack_268,99);\n  func_eea3ac6de0a54346(auStack_3f8);\n  return;\n}\n\n",
        "\nundefined8 func_000f753420fa44f3(void)\n\n{\n  undefined8 uVar1;\n  \n  uVar1 = func_ff06ddcd73864152(10);\n  return uVar1;\n}\n\n",
        "\nvoid func_1d51c2ee63be4760(void)\n\n{\n  func_b0a6e7867ab74395();\n  func_a5516f6b23a64f91();\n  return;\n}\n\n",
        "\nvoid func_d81b4c96ec3f4635(undefined8 *param_1)\n\n{\n  undefined auStack_88 [99];\n  undefined uStack_25;\n  undefined8 uStack_18;\n  undefined8 *puStack_10;\n  \n  uStack_18 = *param_1;\n  puStack_10 = param_1;\n  func_4b8d1317ab424559(auStack_88,0x43,99);\n  uStack_25 = 0;\n  func_7a4a69762027407c(auStack_88,uStack_18,100);\n  uStack_25 = 0;\n  func_ca363f2d8fa345f6(auStack_88);\n  return;\n}\n\n",
        "\nvoid func_ea6065e65f0f49eb(void)\n\n{\n  undefined auStack_78 [104];\n  undefined *puStack_10;\n  \n  puStack_10 = auStack_78;\n  func_ddfdcd3948244ff9(puStack_10,0x41,99);\n  puStack_10[99] = 0;\n  func_94e18c468ce14006(puStack_10);\n  return;\n}\n\n",
        "\nvoid func_fb8c23d4b16b4660(void)\n\n{\n  undefined auStack_88 [112];\n  ulong uStack_18;\n  undefined *puStack_10;\n  \n  puStack_10 = (undefined *)0x0;\n  if (globalFive == 5) {\n    puStack_10 = (undefined *)func_deb6f29f440d427d(0x32);\n    *puStack_10 = 0;\n  }\n  func_4feaae802c4b436e(auStack_88,0x43,99);\n  auStack_88[99] = 0;\n  for (uStack_18 = 0; uStack_18 < 100; uStack_18 = uStack_18 + 1) {\n    puStack_10[uStack_18] = auStack_88[uStack_18];\n  }\n  puStack_10[99] = 0;\n  func_ae9c45cb9af349f6(puStack_10);\n  func_5fd4b946709746a4(puStack_10);\n  return;\n}\n\n",
        "\nvoid func_184c11de650f486c(void)\n\n{\n  int iVar1;\n  long lVar2;\n  undefined8 uStack_88;\n  undefined8 uStack_80;\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined8 uStack_38;\n  undefined8 uStack_30;\n  undefined4 uStack_28;\n  long lStack_20;\n  long lStack_18;\n  undefined8 *puStack_10;\n  \n  uStack_88 = 0x2068732f6e69622f;\n  uStack_80 = 0x20616c2d20736c;\n  uStack_78 = 0;\n  uStack_70 = 0;\n  uStack_68 = 0;\n  uStack_60 = 0;\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  uStack_40 = 0;\n  uStack_38 = 0;\n  uStack_30 = 0;\n  uStack_28 = 0;\n  puStack_10 = &uStack_88;\n  iVar1 = func_abbdbdd2c0b74d0d();\n  if (iVar1 != 0) {\n    lStack_18 = func_dbfd44dcd3b44939(puStack_10);\n    if (1 < 100U - lStack_18) {\n      lVar2 = func_815182ee317e4868((long)puStack_10 + lStack_18,100 - (int)lStack_18,stdin);\n      if (lVar2 == 0) {\n        func_9781a24965244427(&UNK_004013d4);\n        *(undefined *)(lStack_18 + (long)puStack_10) = 0;\n      }\n      else {\n        lStack_18 = func_dbfd44dcd3b44939(puStack_10);\n        if ((lStack_18 != 0) && (*(char *)((long)puStack_10 + lStack_18 + -1) == '\\n')) {\n          *(undefined *)((long)puStack_10 + lStack_18 + -1) = 0;\n        }\n      }\n    }\n  }\n  lStack_20 = func_8aa61c1730df4e5c(puStack_10,&UNK_004013e3);\n  if (lStack_20 != 0) {\n    func_aea2813004e54ddf(lStack_20);\n  }\n  return;\n}\n\n",
        "\nvoid func_489c17d2e8054dce\n               (undefined8 param_1)\n\n{\n  long lVar1;\n  undefined8 uStack_38;\n  undefined8 uStack_30;\n  undefined8 uStack_28;\n  undefined8 uStack_20;\n  undefined8 uStack_18;\n  undefined4 uStack_10;\n  \n  uStack_38 = 0x4100000041;\n  uStack_30 = 0x4100000041;\n  uStack_28 = 0x4100000041;\n  uStack_20 = 0x4100000041;\n  uStack_18 = 0x4100000041;\n  uStack_10 = 0;\n  lVar1 = func_b06125cf822f4a6f(&uStack_38);\n  func_685b2b19018943d0(param_1,&uStack_38,(lVar1 + 1) * 4);\n  func_1b803cc7187a4ed2(param_1);\n  return;\n}\n\n",
        "\nvoid func_82869689722d4555(void)\n\n{\n  func_2ff2824e4ee04afa();\n  func_b9464f068fd64338();\n  return;\n}\n\n",
        "\nvoid func_dd4ceb2a0de345a2(void)\n\n{\n  func_3a6282ae86d24dc2();\n  func_f09a1ef07aa3471c();\n  return;\n}\n\n",
        "\nvoid func_c7d69bbec8384ad9(undefined4 param_1)\n\n{\n  func_4bb89061dbc34e41(param_1);\n  return;\n}\n\n",
        "\nvoid func_e2cbde492bc44671(void)\n\n{\n  long lVar1;\n  \n  lVar1 = func_7e9c7692e3b34933(100);\n  func_3142e26929b247ce(lVar1,0x41,99);\n  *(undefined *)(lVar1 + 99) = 0;\n  func_e2cbde492bc44671Sink(lVar1 + -8);\n  return;\n}\n\n",
        "\nvoid func_20291d9c34a74d7e(int param_1)\n\n{\n  undefined8 uStack_38;\n  undefined8 uStack_30;\n  undefined8 uStack_28;\n  undefined8 uStack_20;\n  undefined8 uStack_18;\n  int iStack_c;\n  \n  uStack_38 = 0;\n  uStack_30 = 0;\n  uStack_28 = 0;\n  uStack_20 = 0;\n  uStack_18 = 0;\n  if (param_1 < 0) {\n    func_57253aab4514418b(&UNK_00401558);\n  }\n  else {\n    *(undefined4 *)((long)&uStack_38 + (long)param_1 * 4) = 1;\n    for (iStack_c = 0; iStack_c < 10; iStack_c = iStack_c + 1) {\n      func_c203fa5aece84e13(*(undefined4 *)((long)&uStack_38 + (long)iStack_c * 4));\n    }\n  }\n  return;\n}\n\n",
        "\nvoid func_bc0ab2056b064ce4(void)\n\n{\n  undefined8 *puVar1;\n  undefined auStack_100 [104];\n  undefined8 uStack_98;\n  undefined8 uStack_90;\n  undefined8 uStack_88;\n  undefined8 uStack_80;\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  uint uStack_38;\n  undefined *puStack_28;\n  undefined8 *puStack_20;\n  \n  puStack_28 = auStack_100;\n  func_72041834d3574945(puStack_28,0x41,99);\n  puStack_28[99] = 0;\n  if (GLOBAL_CONST_FIVE == 5) {\n    puStack_20 = (undefined8 *)(puStack_28 + -8);\n  }\n  func_72041834d3574945(&uStack_98,0x43,99);\n  puVar1 = puStack_20;\n  uStack_38 = uStack_38 & 0xffffff;\n  *puStack_20 = uStack_98;\n  puVar1[1] = uStack_90;\n  puVar1[2] = uStack_88;\n  puVar1[3] = uStack_80;\n  puVar1[4] = uStack_78;\n  puVar1[5] = uStack_70;\n  puVar1[6] = uStack_68;\n  puVar1[7] = uStack_60;\n  puVar1[8] = uStack_58;\n  puVar1[9] = uStack_50;\n  puVar1[10] = uStack_48;\n  puVar1[0xb] = uStack_40;\n  *(uint *)(puVar1 + 0xc) = uStack_38;\n  *(undefined *)((long)puStack_20 + 99) = 0;\n  func_e478818b5e1344e1(puStack_20);\n  return;\n}\n\n",
        "\nvoid func_88a1bd797b564c9f(void)\n\n{\n  undefined auStack_b8 [99];\n  undefined uStack_55;\n  undefined auStack_48 [49];\n  undefined uStack_17;\n  undefined *puStack_10;\n  \n  func_4136502be27f4545(auStack_48,0x41,0x31);\n  uStack_17 = 0;\n  func_4136502be27f4545(auStack_b8,0x41,99);\n  uStack_55 = 0;\n  puStack_10 = auStack_48;\n  func_88a1bd797b564c9fSink(puStack_10);\n  return;\n}\n\n",
        "\nvoid func_4cb2bedf200743ad(void)\n\n{\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined8 uStack_38;\n  undefined8 uStack_30;\n  undefined8 uStack_28;\n  undefined8 uStack_20;\n  undefined4 uStack_18;\n  undefined8 *puStack_10;\n  \n  uStack_60 = 0;\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  uStack_40 = 0;\n  uStack_38 = 0;\n  uStack_30 = 0;\n  uStack_28 = 0;\n  uStack_20 = 0;\n  uStack_18 = 0;\n  puStack_10 = &uStack_78;\n  uStack_78 = 0x6867666564636261;\n  uStack_70 = 0x706f6e6d6c6b6a69;\n  uStack_68 = 0x7877767574737271;\n                    /* WARNING: Ignoring partial resolution of indirect */\n  uStack_60._0_2_ = 0x7a79;\n                    /* WARNING: Ignoring partial resolution of indirect */\n  uStack_60._2_1_ = 0;\n  func_00c5e209fa2c45de((long)&uStack_78 + 6,(long)&uStack_78 + 4,10);\n  func_6d4435f561964439(puStack_10);\n  return;\n}\n\n",
        "\nvoid func_98b39864608342d4(int param_1)\n\n{\n  undefined auStack_e8 [99];\n  undefined uStack_85;\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined8 uStack_38;\n  undefined8 uStack_30;\n  undefined8 uStack_28;\n  undefined8 uStack_20;\n  undefined4 uStack_18;\n  \n  uStack_78 = 0;\n  uStack_70 = 0;\n  uStack_68 = 0;\n  uStack_60 = 0;\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  uStack_40 = 0;\n  uStack_38 = 0;\n  uStack_30 = 0;\n  uStack_28 = 0;\n  uStack_20 = 0;\n  uStack_18 = 0;\n  func_0d655034173c4288(auStack_e8,0x41,99);\n  uStack_85 = 0;\n  if (param_1 < 100) {\n    func_ca7895808c6f4275(&uStack_78,auStack_e8,(long)param_1);\n    *(undefined *)((long)&uStack_78 + (long)param_1) = 0;\n  }\n  func_40e960d2c0e84ecc(&uStack_78);\n  return;\n}\n\n",
        "\nvoid func_106fa231baf94275(void)\n\n{\n  int iVar1;\n  \n  iVar1 = func_7c4d0f89d8d94357(0);\n  func_99b690e6fe794402(iVar1 * iVar1);\n  return;\n}\n\n",
        "\nvoid func_e8f2eee99c624711(void)\n\n{\n  undefined8 *puVar1;\n  int iVar2;\n  undefined8 uStack_128;\n  undefined8 uStack_120;\n  undefined8 uStack_118;\n  undefined8 uStack_110;\n  undefined8 uStack_108;\n  undefined8 uStack_100;\n  undefined8 uStack_f8;\n  undefined8 uStack_f0;\n  undefined8 uStack_e8;\n  undefined8 uStack_e0;\n  undefined8 uStack_d8;\n  undefined8 uStack_d0;\n  undefined4 uStack_c8;\n  undefined2 uStack_b8;\n  undefined2 uStack_b6;\n  undefined4 uStack_b4;\n  undefined8 uStack_a8;\n  undefined8 uStack_a0;\n  undefined8 uStack_98;\n  undefined8 uStack_90;\n  undefined8 uStack_88;\n  undefined8 uStack_80;\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined4 uStack_48;\n  undefined *puStack_38;\n  int iStack_2c;\n  long lStack_28;\n  int iStack_1c;\n  undefined8 *puStack_18;\n  int iStack_c;\n  \n  uStack_a8 = 0;\n  uStack_a0 = 0;\n  uStack_98 = 0;\n  uStack_90 = 0;\n  uStack_88 = 0;\n  uStack_80 = 0;\n  uStack_78 = 0;\n  uStack_70 = 0;\n  uStack_68 = 0;\n  uStack_60 = 0;\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  puStack_18 = &uStack_a8;\n  iVar2 = func_db2d0e99349c4327();\n  puVar1 = puStack_18;\n  if (iVar2 == 0) {\n    *puStack_18 = 0x7274736465786966;\n    puVar1[1] = 0x74736574676e69;\n  }\n  else {\n    iStack_1c = 0xffffffff;\n    iStack_c = -1;\n    lStack_28 = func_b58cf147d5ce4954(puStack_18);\n    iStack_1c = func_f2c5aab439b54790(2,1,6);\n    if (iStack_1c != -1) {\n      func_02263caaec5f44f8(&uStack_b8,0,0x10);\n      uStack_b8 = 2;\n      uStack_b4 = 0;\n      uStack_b6 = func_b2126c2d70044e82(0x6987);\n      iVar2 = func_9e926a9e18d44e05(iStack_1c,&uStack_b8,0x10);\n      if ((((iVar2 != -1) && (iVar2 = func_92cc06cfec284bb4(iStack_1c,5), iVar2 != -1)) &&\n          (iStack_c = func_c5d9a86871cc4c57(iStack_1c,0,0), iStack_c != -1)) &&\n         ((iStack_2c = func_25af2d8fdba24113(iStack_c,(long)puStack_18 + lStack_28,99 - lStack_28,0),\n          iStack_2c != -1 && (iStack_2c != 0)))) {\n        *(undefined *)((long)puStack_18 + iStack_2c + lStack_28) = 0;\n        puStack_38 = (undefined *)func_e0a0a3f2bbe3403c(puStack_18,0xd);\n        if (puStack_38 != (undefined *)0x0) {\n          *puStack_38 = 0;\n        }\n        puStack_38 = (undefined *)func_e0a0a3f2bbe3403c(puStack_18,10);\n        if (puStack_38 != (undefined *)0x0) {\n          *puStack_38 = 0;\n        }\n      }\n    }\n    if (iStack_1c != -1) {\n      func_0d772d3a1ab64807(iStack_1c);\n    }\n    if (iStack_c != -1) {\n      func_0d772d3a1ab64807(iStack_c);\n    }\n  }\n  iVar2 = func_db2d0e99349c4327();\n  if (iVar2 == 0) {\n    uStack_128 = 0;\n    uStack_120 = 0;\n    uStack_118 = 0;\n    uStack_110 = 0;\n    uStack_108 = 0;\n    uStack_100 = 0;\n    uStack_f8 = 0;\n    uStack_f0 = 0;\n    uStack_e8 = 0;\n    uStack_e0 = 0;\n    uStack_d8 = 0;\n    uStack_d0 = 0;\n    uStack_c8 = 0;\n    func_da2ae8b615fe4126(&uStack_128,99,&UNK_00401824,puStack_18);\n    func_d9cca5164fb945f6(&uStack_128);\n  }\n  else {\n    uStack_128 = 0;\n    uStack_120 = 0;\n    uStack_118 = 0;\n    uStack_110 = 0;\n    uStack_108 = 0;\n    uStack_100 = 0;\n    uStack_f8 = 0;\n    uStack_f0 = 0;\n    uStack_e8 = 0;\n    uStack_e0 = 0;\n    uStack_d8 = 0;\n    uStack_d0 = 0;\n    uStack_c8 = 0;\n    func_da2ae8b615fe4126(&uStack_128,99,puStack_18);\n    func_d9cca5164fb945f6(&uStack_128);\n  }\n  return;\n}\n\n",
        "\nvoid func_4f64375a290347c5(void)\n\n{\n  undefined auStack_3f8 [400];\n  undefined auStack_268 [596];\n  undefined4 uStack_14;\n  \n  if (staticTrue != 0) {\n    func_f19c7a35c5d6467f(auStack_268,0x41,0x95);\n    uStack_14 = 0;\n    func_7481a6b7b60b4d25(auStack_3f8,auStack_268,99);\n    func_90221a3fd73a4579(auStack_3f8);\n  }\n  return;\n}\n\n",
        "\nvoid func_4878c9948b0146ea(char *param_1)\n\n{\n  char *pcStack_10;\n  \n  pcStack_10 = param_1;\n  do {\n    if (*pcStack_10 == '\\0') {\ncode_r0x00400d67:\n      func_2cb2e0bc07c74a1f(pcStack_10);\n      return;\n    }\n    if (*pcStack_10 == 'S') {\n      func_8813f5cebd7a42dc(&UNK_00401404);\n      goto code_r0x00400d67;\n    }\n    pcStack_10 = pcStack_10 + 1;\n  } while( true );\n}\n\n",
        "\nvoid func_3d2de8d2b61142bb(void)\n\n{\n  int iVar1;\n  undefined auStack_46 [14];\n  undefined2 uStack_38;\n  undefined2 uStack_36;\n  undefined4 uStack_34;\n  undefined4 uStack_1c;\n  int iStack_18;\n  int iStack_14;\n  int iStack_10;\n  undefined4 uStack_c;\n  \n  uStack_c = 0xffffffff;\n  iStack_14 = 0xffffffff;\n  iStack_10 = -1;\n  iStack_14 = func_9cd2f9a043a6450b(2,1,6);\n  if (iStack_14 != -1) {\n    func_b6f90f98c5594043(&uStack_38,0,0x10);\n    uStack_38 = 2;\n    uStack_34 = 0;\n    uStack_36 = func_82ba3c977e424364(0x6987);\n    iVar1 = func_8b0ca5a62e5f4194(iStack_14,&uStack_38,0x10);\n    if ((((iVar1 != -1) && (iVar1 = func_47b68551e8694b5d(iStack_14,5), iVar1 != -1)) &&\n        (iStack_10 = func_9dbf764914274dd5(iStack_14,0,0), iStack_10 != -1)) &&\n       ((iStack_18 = func_63cbd16a7bfc4f22(iStack_10,auStack_46,0xd,0), iStack_18 != -1 &&\n        (iStack_18 != 0)))) {\n      auStack_46[iStack_18] = 0;\n      uStack_c = func_b87ef87f8925435a(auStack_46);\n    }\n  }\n  if (iStack_14 != -1) {\n    func_6df44b9f18c94059(iStack_14);\n  }\n  if (iStack_10 != -1) {\n    func_6df44b9f18c94059(iStack_10);\n  }\n  uStack_1c = uStack_c;\n  func_1d8d7619276b4e91(uStack_c);\n  return;\n}\n\n",
        "\nvoid func_595e5604161a461b(void)\n\n{\n  undefined auStack_1c8 [24];\n  undefined *puStack_1b0;\n  undefined auStack_1a8 [396];\n  undefined4 uStack_1c;\n  undefined *puStack_10;\n  \n  puStack_1b0 = &UNK_00400c16;\n  func_16cdca93cfc14a83(auStack_1a8,0x41,99);\n  uStack_1c = 0;\n  puStack_10 = auStack_1c8;\n  puStack_1b0 = &UNK_00400c38;\n  func_020a4716618b46a9(&puStack_10);\n  return;\n}\n\n",
        "\nvoid func_ada5ced8b4924dea(undefined8 *param_1)\n\n{\n  long lVar1;\n  undefined8 *puVar2;\n  undefined8 auStack_338 [100];\n  undefined8 *puStack_18;\n  undefined8 *puStack_10;\n  \n  puStack_18 = (undefined8 *)*param_1;\n  puVar2 = auStack_338;\n  puStack_10 = param_1;\n  for (lVar1 = 100; lVar1 != 0; lVar1 = lVar1 + -1) {\n    *puVar2 = 0;\n    puVar2 = puVar2 + 1;\n  }\n  func_4563fc93241e4f84(puStack_18,auStack_338,800);\n  func_3ab83a9b32f64353(*puStack_18);\n  func_c40542da23bf4951(puStack_18);\n  return;\n}\n\n",
        "\nvoid func_48962e69f2d74e6d(void)\n\n{\n  int iVar1;\n  undefined auStack_36 [14];\n  undefined2 uStack_28;\n  undefined2 uStack_26;\n  undefined4 uStack_24;\n  int iStack_18;\n  int iStack_14;\n  int iStack_10;\n  int iStack_c;\n  \n  iStack_c = 0;\n  iVar1 = func_21996518bed34a98();\n  if (iVar1 != 0) {\n    iStack_10 = 0xffffffff;\n    iStack_10 = func_7faaa53588d84b3c(2,1,6);\n    if (iStack_10 != -1) {\n      func_ae1200de5e76447b(&uStack_28,0,0x10);\n      uStack_28 = 2;\n      uStack_24 = func_04b376c89dc048d9(&UNK_00401474);\n      uStack_26 = func_ca4e9948687144d7(0x6987);\n      iVar1 = func_07b273b277a543d6(iStack_10,&uStack_28,0x10);\n      if (((iVar1 != -1) &&\n          (iStack_14 = func_d0de15d56bb94fb4(iStack_10,auStack_36,0xd,0), iStack_14 != -1)) &&\n         (iStack_14 != 0)) {\n        auStack_36[iStack_14] = 0;\n        iStack_c = func_b65b12a9f7a849b0(auStack_36);\n      }\n    }\n    if (iStack_10 != -1) {\n      func_598a98f6010f4712(iStack_10);\n    }\n  }\n  iVar1 = func_21996518bed34a98();\n  if (iVar1 != 0) {\n    iStack_18 = iStack_c + 1;\n    func_dc24d5d1eac24b72(iStack_18);\n  }\n  return;\n}\n\n",
        "\nvoid func_f8396ef875e94e26(void)\n\n{\n  int iVar1;\n  undefined auStack_36 [14];\n  undefined2 uStack_28;\n  undefined2 uStack_26;\n  undefined4 uStack_24;\n  undefined4 uStack_14;\n  int iStack_10;\n  int iStack_c;\n  \n  uStack_14 = 0;\n  iStack_c = 0xffffffff;\n  iStack_c = func_5b5c48b7d78a4ee9(2,1,6);\n  if (iStack_c != -1) {\n    func_f0df8e60af2d40e6(&uStack_28,0,0x10);\n    uStack_28 = 2;\n    uStack_24 = func_8742b78c2cd2455b(&UNK_00401474);\n    uStack_26 = func_639dfe36d4334ca2(0x6987);\n    iVar1 = func_75249e5252934626(iStack_c,&uStack_28,0x10);\n    if (((iVar1 != -1) && (iStack_10 = func_f3c7982da9454028(iStack_c,auStack_36,0xd,0), iStack_10 != -1))\n       && (iStack_10 != 0)) {\n      auStack_36[iStack_10] = 0;\n      uStack_14 = func_66eb764df6c245b7(auStack_36);\n    }\n  }\n  if (iStack_c != -1) {\n    func_d3962ae93c9a4aca(iStack_c);\n  }\n  func_f37f6e60f0ff4c34(&uStack_14);\n  return;\n}\n\n",
        "\nvoid func_19109f410349458d(undefined8 param_1)\n\n{\n  int iVar1;\n  int iStack_14;\n  int iStack_10;\n  int iStack_c;\n  \n  if (CWE606_Unchecked_Loop_Condition__char_environment_22_goodG2BGlobal != 0) {\n    iVar1 = func_f8158804e2f643b1(param_1,&UNK_00401579,&iStack_14);\n    if (iVar1 == 1) {\n      iStack_10 = 0;\n      for (iStack_c = 0; iStack_c < iStack_14; iStack_c = iStack_c + 1) {\n        iStack_10 = iStack_10 + 1;\n      }\n      func_ba5f7487e48b4382(iStack_10);\n    }\n  }\n  return;\n}\n\n",
        "\nvoid func_3a783ee77edc42a6(void)\n\n{\n  undefined8 *puVar1;\n  undefined8 uStack_108;\n  undefined8 uStack_100;\n  undefined8 uStack_f8;\n  undefined8 uStack_f0;\n  undefined8 uStack_e8;\n  undefined8 uStack_e0;\n  undefined8 uStack_d8;\n  undefined8 uStack_d0;\n  undefined8 uStack_c8;\n  undefined8 uStack_c0;\n  undefined8 uStack_b8;\n  undefined8 uStack_b0;\n  uint uStack_a8;\n  undefined8 uStack_a0;\n  undefined auStack_98 [99];\n  undefined uStack_35;\n  undefined8 *puStack_30;\n  undefined8 *puStack_28;\n  undefined8 *puStack_20;\n  \n  func_9a005ce04cbc4c8c(auStack_98,0x41,99);\n  uStack_35 = 0;\n  puStack_30 = &uStack_a0;\n  puStack_28 = puStack_30;\n  puStack_20 = puStack_30;\n  func_9a005ce04cbc4c8c(&uStack_108,0x43,99);\n  puVar1 = puStack_30;\n  uStack_a8 = uStack_a8 & 0xffffff;\n  *puStack_30 = uStack_108;\n  puVar1[1] = uStack_100;\n  puVar1[2] = uStack_f8;\n  puVar1[3] = uStack_f0;\n  puVar1[4] = uStack_e8;\n  puVar1[5] = uStack_e0;\n  puVar1[6] = uStack_d8;\n  puVar1[7] = uStack_d0;\n  puVar1[8] = uStack_c8;\n  puVar1[9] = uStack_c0;\n  puVar1[10] = uStack_b8;\n  puVar1[0xb] = uStack_b0;\n  *(uint *)(puVar1 + 0xc) = uStack_a8;\n  *(undefined *)((long)puStack_30 + 99) = 0;\n  func_3d1058363447406c(puStack_30);\n  return;\n}\n\n",
        "\nvoid func_c6ab3fd7bbff4018(void)\n\n{\n  int iVar1;\n  undefined auStack_36 [14];\n  undefined2 uStack_28;\n  undefined2 uStack_26;\n  undefined4 uStack_24;\n  int iStack_18;\n  int iStack_14;\n  int iStack_10;\n  int iStack_c;\n  \n  iStack_c = 0;\n  iStack_10 = 0xffffffff;\n  iStack_10 = func_54c5d906b1c54b63(2,1,6);\n  if (iStack_10 != -1) {\n    func_d29b5bc89d774363(&uStack_28,0,0x10);\n    uStack_28 = 2;\n    uStack_24 = func_dc859a32e15447b2(&UNK_00401454);\n    uStack_26 = func_0cd525189d8445a0(0x6987);\n    iVar1 = func_2da73fbf1ba145af(iStack_10,&uStack_28,0x10);\n    if (((iVar1 != -1) && (iStack_14 = func_07aa730e65544986(iStack_10,auStack_36,0xd,0), iStack_14 != -1)\n        ) && (iStack_14 != 0)) {\n      auStack_36[iStack_14] = 0;\n      iStack_c = func_21b1d1cce1f44de7(auStack_36);\n    }\n  }\n  if (iStack_10 != -1) {\n    func_1bc39016268f4022(iStack_10);\n  }\n  if (0 < iStack_c) {\n    iStack_18 = iStack_c * 2;\n    func_1e6dbfa10c1a4c70(iStack_18);\n  }\n  return;\n}\n\n",
        "\nvoid func_b7e031eeb2024674(void)\n\n{\n  undefined8 uStack_10;\n  \n  uStack_10 = 0;\n  uStack_10 = func_fc15d25e16a54069(400);\n  func_aac5c3e1db024d01(&uStack_10);\n  return;\n}\n\n",
        "\nvoid func_0a637a19370f4880(void)\n\n{\n  undefined4 *puStack_10;\n  \n  if (GLOBAL_CONST_TRUE != 0) {\n    func_0baad76352264638(*puStack_10);\n    func_0baad76352264638(puStack_10[1]);\n  }\n  return;\n}\n\n",
        "\nvoid func_4a5e92277ee94566(long *param_1)\n\n{\n  undefined auStack_1a8 [396];\n  undefined4 uStack_1c;\n  long lStack_18;\n  long *plStack_10;\n  \n  lStack_18 = *param_1;\n  plStack_10 = param_1;\n  func_d8b0c47e4c634353(auStack_1a8,0x43,99);\n  uStack_1c = 0;\n  func_fd6bdccc307e4eb8(lStack_18,auStack_1a8,400);\n  *(undefined4 *)(lStack_18 + 0x18c) = 0;\n  func_3498129a1e7340d1(lStack_18);\n  return;\n}\n\n",
        "\nvoid func_7613d287ee38406d(void)\n\n{\n  long lVar1;\n  undefined auStack_f8 [99];\n  undefined uStack_95;\n  undefined8 uStack_88;\n  undefined8 uStack_80;\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined8 uStack_38;\n  undefined8 uStack_30;\n  undefined4 uStack_28;\n  undefined8 uStack_1a;\n  undefined4 uStack_12;\n  undefined2 uStack_e;\n  int iStack_c;\n  \n  iStack_c = -1;\n  uStack_1a = 0;\n  uStack_12 = 0;\n  uStack_e = 0;\n  lVar1 = func_32a19f2987a94b93(&uStack_1a,0xe,stdin);\n  if (lVar1 == 0) {\n    func_8fd90de650d7412a(&UNK_00401394);\n  }\n  else {\n    iStack_c = func_7cf856dacc7a47a0(&uStack_1a);\n  }\n  uStack_88 = 0;\n  uStack_80 = 0;\n  uStack_78 = 0;\n  uStack_70 = 0;\n  uStack_68 = 0;\n  uStack_60 = 0;\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  uStack_40 = 0;\n  uStack_38 = 0;\n  uStack_30 = 0;\n  uStack_28 = 0;\n  func_f66859a1daee4bc8(auStack_f8,0x41,99);\n  uStack_95 = 0;\n  if (iStack_c < 100) {\n    func_16ab32a9585f46c6(&uStack_88,auStack_f8,(long)iStack_c);\n    *(undefined *)((long)&uStack_88 + (long)iStack_c) = 0;\n  }\n  func_8fd90de650d7412a(&uStack_88);\n  return;\n}\n\n",
        "\nvoid func_df192d0295ae452d(void)\n\n{\n  func_07f8cf933f754f0b();\n  return;\n}\n\n",
        "\nvoid func_70f52a06ff2642ae(void)\n\n{\n  int iVar1;\n  undefined8 uStack_278;\n  undefined8 uStack_270;\n  undefined8 uStack_268;\n  undefined8 uStack_260;\n  undefined8 uStack_258;\n  undefined8 uStack_250;\n  undefined8 uStack_248;\n  undefined8 uStack_240;\n  undefined8 uStack_238;\n  undefined8 uStack_230;\n  undefined8 uStack_228;\n  undefined8 uStack_220;\n  undefined8 uStack_218;\n  undefined8 uStack_210;\n  undefined8 uStack_208;\n  undefined8 uStack_200;\n  undefined8 uStack_1f8;\n  undefined8 uStack_1f0;\n  undefined8 uStack_1e8;\n  undefined8 uStack_1e0;\n  undefined8 uStack_1d8;\n  undefined8 uStack_1d0;\n  undefined8 uStack_1c8;\n  undefined8 uStack_1c0;\n  undefined8 uStack_1b8;\n  undefined auStack_1a8 [408];\n  undefined *puStack_10;\n  \n  puStack_10 = auStack_1a8;\n  iVar1 = func_35f9e49cd1c046fd();\n  if (iVar1 != 0) {\n    func_cecf9b6afe7d4932(puStack_10,0x41,99);\n    *(undefined4 *)(puStack_10 + 0x18c) = 0;\n  }\n  uStack_278 = 0;\n  uStack_270 = 0;\n  uStack_268 = 0;\n  uStack_260 = 0;\n  uStack_258 = 0;\n  uStack_250 = 0;\n  uStack_248 = 0;\n  uStack_240 = 0;\n  uStack_238 = 0;\n  uStack_230 = 0;\n  uStack_228 = 0;\n  uStack_220 = 0;\n  uStack_218 = 0;\n  uStack_210 = 0;\n  uStack_208 = 0;\n  uStack_200 = 0;\n  uStack_1f8 = 0;\n  uStack_1f0 = 0;\n  uStack_1e8 = 0;\n  uStack_1e0 = 0;\n  uStack_1d8 = 0;\n  uStack_1d0 = 0;\n  uStack_1c8 = 0;\n  uStack_1c0 = 0;\n  uStack_1b8 = 0;\n  func_f0b46ab31c5d4638(&uStack_278,puStack_10);\n  func_e2712df30de24c27(puStack_10);\n  return;\n}\n\n",
        "\nvoid func_f00560411faa429b(long param_1)\n\n{\n  if (*(int *)(param_1 + 8) == -0x80000000) {\n    func_03d7cb1bd2074f92(&UNK_00401598);\n  }\n  else {\n    func_ce4d6b6fbb8d4a38(*(int *)(param_1 + 8) + -1);\n  }\n  return;\n}\n\n",
        "\nvoid func_1c60158384844318(void)\n\n{\n  int iVar1;\n  undefined auStack_36 [14];\n  undefined2 uStack_28;\n  undefined2 uStack_26;\n  undefined4 uStack_24;\n  int iStack_14;\n  int iStack_10;\n  int iStack_c;\n  \n  iStack_c = -1;\n  if (staticTrue != 0) {\n    iStack_10 = 0xffffffff;\n    iStack_10 = func_3e120882c3034a63(2,1,6);\n    if (iStack_10 != -1) {\n      func_c0a6b9a161c644e5(&uStack_28,0,0x10);\n      uStack_28 = 2;\n      uStack_24 = func_449d29c5451844f2(&UNK_00401464);\n      uStack_26 = func_c8b18b438c1a483c(0x6987);\n      iVar1 = func_a00bf064bb784ce5(iStack_10,&uStack_28,0x10);\n      if (((iVar1 != -1) &&\n          (iStack_14 = func_43ce1dad2699443f(iStack_10,auStack_36,0xd,0), iStack_14 != -1)) &&\n         (iStack_14 != 0)) {\n        auStack_36[iStack_14] = 0;\n        iStack_c = func_57cd552bd2a74f6b(auStack_36);\n      }\n    }\n    if (iStack_10 != -1) {\n      func_9aa4ef236a8b407e(iStack_10);\n    }\n  }\n  if (staticTrue != 0) {\n    func_922a418940b84f2b(100 % (long)iStack_c & 0xffffffff);\n  }\n  return;\n}\n\n",
        "\nvoid func_c8c31564513b48b3(void)\n\n{\n  undefined4 *puVar1;\n  \n  puVar1 = (undefined4 *)func_e53b2887422345b8(8);\n  *puVar1 = 1;\n  puVar1[1] = 2;\n  func_99b06cc099404805(puVar1);\n  return;\n}\n\n",
        "\nvoid func_fbd90a4455524d06(void)\n\n{\n  int iVar1;\n  int iVar2;\n  uint uVar3;\n  long lVar4;\n  \n  iVar1 = func_85d7981a844d4b6c();\n  iVar2 = func_85d7981a844d4b6c();\n  uVar3 = func_85d7981a844d4b6c();\n  uVar3 = uVar3 ^ iVar1 << 0x1e ^ iVar2 << 0xf;\n  if ((int)uVar3 < 100) {\n    lVar4 = func_698b9d37e7cf4d4c((long)(int)uVar3);\n    func_098d9d9a04584a33(lVar4,0x41,(long)(int)(uVar3 - 1));\n    *(undefined *)(lVar4 + (long)(int)uVar3 + -1) = 0;\n    func_dde144f30fea4ab0(lVar4);\n    func_e3102bd73b0e4eb0(lVar4);\n  }\n  return;\n}\n\n",
        "\nvoid func_11c1450d87874a86(undefined8 param_1)\n\n{\n  func_fe8e1768048c4588(param_1);\n  return;\n}\n\n",
        "\nvoid func_5ac8b2273fce422a(void)\n\n{\n  undefined8 *puVar1;\n  int iStack_c;\n  \n  puVar1 = (undefined8 *)func_cfefe05997e8456e(0,0x14);\n  for (iStack_c = 0; iStack_c < 1; iStack_c = iStack_c + 1) {\n    *puVar1 = 0x696c616974696e49;\n    *(undefined2 *)(puVar1 + 1) = 0x657a;\n    *(undefined *)((long)puVar1 + 10) = 0;\n    func_9b9a18588730495c(puVar1);\n    func_4ea2f5f0470c4c5c(puVar1);\n  }\n  return;\n}\n\n",
        "\nvoid func_d194cee175044d1a(void)\n\n{\n  short sVar1;\n  long lVar2;\n  \n  sVar1 = CWE194_Unexpected_Sign_Extension__negative_malloc_68_badData;\n  if (CWE194_Unexpected_Sign_Extension__negative_malloc_68_badData < 100) {\n    lVar2 = func_f04d04a27edf48ec((long)CWE194_Unexpected_Sign_Extension__negative_malloc_68_badData);\n    func_d76f6b28eb034305(lVar2,0x41,(long)(sVar1 + -1));\n    *(undefined *)(lVar2 + (long)sVar1 + -1) = 0;\n    func_cad2a4c25d944f2f(lVar2);\n    func_43696ba732df4382(lVar2);\n  }\n  return;\n}\n\n",
        "\nvoid func_b30181e2f0954783(void)\n\n{\n  undefined auStack_1a8 [396];\n  undefined4 uStack_1c;\n  undefined4 *puStack_10;\n  \n  puStack_10 = (undefined4 *)0x0;\n  puStack_10 = (undefined4 *)func_73262ffe802b4eb5(200);\n  *puStack_10 = 0;\n  func_0277b1bdbf104f80(auStack_1a8,0x43,99);\n  uStack_1c = 0;\n  func_7cf22b6a0bff4c46(puStack_10,auStack_1a8,99);\n  puStack_10[99] = 0;\n  func_de62648abb0044af(puStack_10);\n  func_52e9cac55f684a58(puStack_10);\n  return;\n}\n\n",
        "\nvoid func_437bb309970e42ec(void)\n\n{\n  func_fbe69fc2f6854364();\n  return;\n}\n\n",
        "\nvoid func_590ed0ace7cf4dca(void)\n\n{\n  int iVar1;\n  long lVar2;\n  undefined8 *puVar3;\n  byte bVar4;\n  undefined8 auStack_338 [101];\n  undefined8 *puStack_10;\n  \n  bVar4 = 0;\n  puStack_10 = (undefined8 *)0x0;\n  iVar1 = func_d1ea3095ffe54b01();\n  if (iVar1 != 0) {\n    puStack_10 = (undefined8 *)func_8d73b8ac335341f6(400);\n  }\n  puVar3 = auStack_338;\n  for (lVar2 = 100; lVar2 != 0; lVar2 = lVar2 + -1) {\n    *puVar3 = 0;\n    puVar3 = puVar3 + (ulong)bVar4 * -2 + 1;\n  }\n  func_d689f24517484214(puStack_10,auStack_338,800);\n  func_89741392d14848d6(*puStack_10);\n  func_732345f2953742c3(puStack_10);\n  return;\n}\n\n",
        "\nvoid func_b88e49a525cf4ed5(void)\n\n{\n  func_31ce7ef3f8ba49a0();\n  func_5da685e57ec04f58();\n  func_0e07b5dfbd7345bd();\n  func_6d63dcb5f7d3461e();\n  return;\n}\n\n",
        "\nvoid func_cde2446f72594504(void)\n\n{\n  func_ac822c849ab740b7();\n  func_c9d12e24026946a7();\n  return;\n}\n\n",
        "\nvoid func_5ccf6b1ecb2c47ae(void)\n\n{\n  undefined8 uVar1;\n  \n  uVar1 = func_214ac7a6b7bb48bc(10);\n  func_591e3c284e50444f(uVar1);\n  return;\n}\n\n",
        "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nvoid func_c78753bfca354353(void)\n\n{\n  undefined8 uVar1;\n  undefined8 *puVar2;\n  \n  puVar2 = (undefined8 *)func_88d86505a3b84890(0x20);\n  puVar2[2] = &UNK_00401184;\n  func_6c6d3abce35a4b75(puVar2[2]);\n  uVar1 = _UNK_0040118c;\n  *puVar2 = _UNK_00401184;\n  puVar2[1] = uVar1;\n  uVar1 = _UNK_0040119c;\n  puVar2[2] = _UNK_00401194;\n  puVar2[3] = uVar1;\n  *(undefined *)((long)puVar2 + 0xf) = 0;\n  func_6c6d3abce35a4b75(puVar2);\n  func_6c6d3abce35a4b75(puVar2[2]);\n  return;\n}\n\n",
        "\nvoid func_fe7652e3e6a64b6c(void)\n\n{\n  undefined8 uStack_19;\n  undefined uStack_11;\n  undefined8 uStack_10;\n  \n  uStack_10 = 0;\n  uStack_19 = 0x676e69727453796d;\n  uStack_11 = 0;\n  uStack_10 = func_9ebd4f75ef874520(&uStack_19);\n  func_a1e640ca12864860(uStack_10);\n  return;\n}\n\n",
        "\nvoid func_1fe150671fdc4866(void)\n\n{\n  func_031a989bca384212();\n  func_512ca237ebbb4ee3();\n  return;\n}\n\n",
        "\nundefined * CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22_badSource(undefined *param_1)\n\n{\n  undefined *puStack_10;\n  \n  puStack_10 = param_1;\n  if (CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22_badGlobal != 0) {\n    puStack_10 = (undefined *)func_6f475ef794494d76(0x32);\n    *puStack_10 = 0;\n  }\n  return puStack_10;\n}\n\n",
        "\nvoid func_f1941f9bc0064583(void)\n\n{\n  int iVar1;\n  undefined auStack_36 [14];\n  undefined2 uStack_28;\n  undefined2 uStack_26;\n  undefined4 uStack_24;\n  int iStack_18;\n  int iStack_14;\n  int iStack_10;\n  undefined4 uStack_c;\n  \n  uStack_c = 0xffffffff;\n  iStack_14 = 0xffffffff;\n  iStack_10 = -1;\n  iStack_14 = func_72180daee87b458f(2,1,6);\n  if (iStack_14 != -1) {\n    func_a10a3bc0348e4d00(&uStack_28,0,0x10);\n    uStack_28 = 2;\n    uStack_24 = 0;\n    uStack_26 = func_4feb3bbf726d4928(0x6987);\n    iVar1 = func_0ae698c56a334f91(iStack_14,&uStack_28,0x10);\n    if ((((iVar1 != -1) && (iVar1 = func_03437bd048c1455a(iStack_14,5), iVar1 != -1)) &&\n        (iStack_10 = func_da9ee08a82244b13(iStack_14,0,0), iStack_10 != -1)) &&\n       ((iStack_18 = func_8f9cee7189244d25(iStack_10,auStack_36,0xd,0), iStack_18 != -1 &&\n        (iStack_18 != 0)))) {\n      auStack_36[iStack_18] = 0;\n      uStack_c = func_ebd29f0da00b4653(auStack_36);\n    }\n  }\n  if (iStack_14 != -1) {\n    func_f3479a2d8a4f4d1e(iStack_14);\n  }\n  if (iStack_10 != -1) {\n    func_f3479a2d8a4f4d1e(iStack_10);\n  }\n  func_63fbb7a17d4c454d(uStack_c);\n  return;\n}\n\n",
        "\nvoid func_36d827f618c04589(void)\n\n{\n  int iVar1;\n  undefined auStack_58 [32];\n  undefined2 uStack_38;\n  undefined2 uStack_36;\n  undefined4 uStack_34;\n  undefined4 *puStack_28;\n  int iStack_1c;\n  int iStack_18;\n  int iStack_14;\n  ulong uStack_10;\n  \n  uStack_10 = 0;\n  iStack_18 = 0xffffffff;\n  iStack_14 = -1;\n  iStack_18 = func_e046a819840c4a4e(2,1,6);\n  if (iStack_18 != -1) {\n    func_bb8c20b8c06f4ae6(&uStack_38,0,0x10);\n    uStack_38 = 2;\n    uStack_34 = 0;\n    uStack_36 = func_6ab36ab14ac44aab(0x6987);\n    iVar1 = func_eb59b025c10e454d(iStack_18,&uStack_38,0x10);\n    if ((((iVar1 != -1) && (iVar1 = func_95ff47962ea24723(iStack_18,5), iVar1 != -1)) &&\n        (iStack_14 = func_93c0ce9d7a664ecd(iStack_18,0,0), iStack_14 != -1)) &&\n       ((iStack_1c = func_273151aae9034ba4(iStack_14,auStack_58,0x19,0), iStack_1c != -1 &&\n        (iStack_1c != 0)))) {\n      auStack_58[iStack_1c] = 0;\n      uStack_10 = func_6572e8c6812a4c09(auStack_58,0,0);\n    }\n  }\n  if (iStack_18 != -1) {\n    func_ac01ed6a31ff4b3e(iStack_18);\n  }\n  if (iStack_14 != -1) {\n    func_ac01ed6a31ff4b3e(iStack_14);\n  }\n  if (uStack_10 < 6) {\n    func_c063098b8cf84230(&UNK_004015b8);\n  }\n  else {\n    puStack_28 = (undefined4 *)func_e6e7e654c5794d7e(uStack_10);\n    *puStack_28 = 0x6c6c6568;\n    *(undefined2 *)(puStack_28 + 1) = 0x6f;\n    func_c063098b8cf84230(puStack_28);\n    func_8b4c83219b2a4713(puStack_28);\n  }\n  return;\n}\n\n",
        "\nvoid func_1abe9b6bae944496(undefined8 *param_1)\n\n{\n  int iVar1;\n  int iStack_24;\n  undefined8 uStack_20;\n  undefined8 *puStack_18;\n  int iStack_10;\n  int iStack_c;\n  \n  uStack_20 = *param_1;\n  puStack_18 = param_1;\n  iVar1 = func_dc213613293e4128(uStack_20,&UNK_004015c4,&iStack_24);\n  if (iVar1 == 1) {\n    iStack_10 = 0;\n    for (iStack_c = 0; iStack_c < iStack_24; iStack_c = iStack_c + 1) {\n      iStack_10 = iStack_10 + 1;\n    }\n    func_bef0f46ae2c143e4(iStack_10);\n  }\n  return;\n}\n\n",
        "\nvoid func_e247bb7f3f0f42ad\n               (undefined8 param_1,undefined8 param_2)\n\n{\n  int iVar1;\n  long lVar2;\n  undefined8 *puVar3;\n  undefined2 uStack_148;\n  undefined2 uStack_146;\n  undefined4 uStack_144;\n  undefined8 uStack_138;\n  undefined8 uStack_130;\n  undefined8 auStack_128 [31];\n  undefined8 *puStack_30;\n  undefined *puStack_28;\n  int iStack_1c;\n  long lStack_18;\n  int iStack_10;\n  int iStack_c;\n  \n  uStack_138 = 0x3d48544150;\n  uStack_130 = 0;\n  puVar3 = auStack_128;\n  for (lVar2 = 0x1d; lVar2 != 0; lVar2 = lVar2 + -1) {\n    *puVar3 = 0;\n    puVar3 = puVar3 + 1;\n  }\n  *(undefined2 *)puVar3 = 0;\n  puStack_30 = &uStack_138;\n  iStack_10 = 0xffffffff;\n  iStack_c = -1;\n  lStack_18 = func_5c84777046384d4f(puStack_30,param_2,(undefined2 *)((long)puVar3 + 2));\n  iStack_10 = func_a1af0ffcfab24667(2,1,6);\n  if (iStack_10 != -1) {\n    func_dcbc44fe8b9847bf(&uStack_148,0,0x10);\n    uStack_148 = 2;\n    uStack_144 = 0;\n    uStack_146 = func_dfc7154da40b40f3(0x6987);\n    iVar1 = func_9db0fcc713ea414c(iStack_10,&uStack_148,0x10);\n    if ((((iVar1 != -1) && (iVar1 = func_464896a2ac3644a9(iStack_10,5), iVar1 != -1)) &&\n        (iStack_c = func_87d0dccf0fea4758(iStack_10,0,0), iStack_c != -1)) &&\n       ((iStack_1c = func_aef13317197947b6(iStack_c,(long)puStack_30 + lStack_18,0xf9 - lStack_18,0),\n        iStack_1c != -1 && (iStack_1c != 0)))) {\n      *(undefined *)((long)puStack_30 + lStack_18 + iStack_1c) = 0;\n      puStack_28 = (undefined *)func_f14648e468434908(puStack_30,0xd);\n      if (puStack_28 != (undefined *)0x0) {\n        *puStack_28 = 0;\n      }\n      puStack_28 = (undefined *)func_f14648e468434908(puStack_30,10);\n      if (puStack_28 != (undefined *)0x0) {\n        *puStack_28 = 0;\n      }\n    }\n  }\n  if (iStack_10 != -1) {\n    func_ba770c2994254004(iStack_10);\n  }\n  if (iStack_c != -1) {\n    func_ba770c2994254004(iStack_c);\n  }\n  func_9f6d62a3b03448d4(&puStack_30);\n  return;\n}\n\n",
        "\nvoid func_16c6484a716e43d5(void)\n\n{\n  func_5c3da8fe47fb4107();\n  func_6126f652b38248a3();\n  func_a677655eee9a40cc();\n  func_f10a6963124a4390();\n  return;\n}\n\n",
        "\nvoid func_f7c418cfb0494402(void)\n\n{\n  int iVar1;\n  long lVar2;\n  undefined8 *puVar3;\n  undefined2 uStack_1d8;\n  undefined2 uStack_1d6;\n  undefined4 uStack_1d4;\n  undefined8 uStack_1c8;\n  undefined8 uStack_1c0;\n  undefined8 auStack_1b8 [48];\n  undefined4 *puStack_38;\n  int iStack_2c;\n  long lStack_28;\n  int iStack_1c;\n  undefined8 *puStack_18;\n  int iStack_c;\n  \n  uStack_1c8 = 0;\n  uStack_1c0 = 0;\n  puVar3 = auStack_1b8;\n  for (lVar2 = 0x30; lVar2 != 0; lVar2 = lVar2 + -1) {\n    *puVar3 = 0;\n    puVar3 = puVar3 + 1;\n  }\n  puStack_18 = &uStack_1c8;\n  iStack_1c = 0xffffffff;\n  iStack_c = -1;\n  lStack_28 = func_c4c2f689c3494d73(puStack_18);\n  iStack_1c = func_a8a3997210e24bbe(2,1,6);\n  if (iStack_1c != -1) {\n    func_ae8b0e6afaef4f2d(&uStack_1d8,0,0x10);\n    uStack_1d8 = 2;\n    uStack_1d4 = 0;\n    uStack_1d6 = func_081b06e4dc024039(0x6987);\n    iVar1 = func_f52bc1f7d28e4154(iStack_1c,&uStack_1d8,0x10);\n    if ((((iVar1 != -1) && (iVar1 = func_c7f7ccbce33a44c0(iStack_1c,5), iVar1 != -1)) &&\n        (iStack_c = func_d7c3067eabdf421b(iStack_1c,0,0), iStack_c != -1)) &&\n       ((iStack_2c = func_c0308cc96d8c45bd(iStack_c,lStack_28 * 4 + (long)puStack_18,(99 - lStack_28) * 4,\n                                     0), iStack_2c != -1 && (iStack_2c != 0)))) {\n      *(undefined4 *)((long)puStack_18 + (lStack_28 + ((ulong)(long)iStack_2c >> 2)) * 4) = 0;\n      puStack_38 = (undefined4 *)func_18f8c761ca5e456e(puStack_18,0xd);\n      if (puStack_38 != (undefined4 *)0x0) {\n        *puStack_38 = 0;\n      }\n      puStack_38 = (undefined4 *)func_18f8c761ca5e456e(puStack_18,10);\n      if (puStack_38 != (undefined4 *)0x0) {\n        *puStack_38 = 0;\n      }\n    }\n  }\n  if (iStack_1c != -1) {\n    func_e104e1d71425424f(iStack_1c);\n  }\n  if (iStack_c != -1) {\n    func_e104e1d71425424f(iStack_c);\n  }\n  func_20957ef5af974b68(puStack_18);\n  return;\n}\n\n",
        "\nvoid func_9f6211fa2eca4834\n               (long param_1)\n\n{\n  func_9e88d069dbd1418d(*(undefined8 *)(param_1 + 0x10),*(undefined8 *)(param_1 + 0x10));\n  return;\n}\n\n",
        "\nvoid func_8237b70fa5dd4733(void)\n\n{\n  undefined auStack_e8 [99];\n  undefined uStack_85;\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined8 uStack_38;\n  undefined8 uStack_30;\n  undefined8 uStack_28;\n  undefined8 uStack_20;\n  undefined4 uStack_18;\n  short sStack_a;\n  \n  sStack_a = 0;\n  sStack_a = func_e186e86b8fbc44ce(0);\n  uStack_78 = 0;\n  uStack_70 = 0;\n  uStack_68 = 0;\n  uStack_60 = 0;\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  uStack_40 = 0;\n  uStack_38 = 0;\n  uStack_30 = 0;\n  uStack_28 = 0;\n  uStack_20 = 0;\n  uStack_18 = 0;\n  func_b93514674db54ded(auStack_e8,0x41,99);\n  uStack_85 = 0;\n  if (sStack_a < 100) {\n    func_ae70eed436554592(&uStack_78,auStack_e8,(long)sStack_a);\n    *(undefined *)((long)&uStack_78 + (long)(int)sStack_a) = 0;\n  }\n  func_2aeabca12a9b47d7(&uStack_78);\n  return;\n}\n\n",
        "\nvoid func_f3bc66b4fbc74152(short param_1)\n\n{\n  long lVar1;\n  \n  if (param_1 < 100) {\n    lVar1 = func_60087f6001aa48b0((long)param_1);\n    func_fe27a0e51f8044ec(lVar1,0x41,(long)(param_1 + -1));\n    *(undefined *)(lVar1 + (long)param_1 + -1) = 0;\n    func_76b345ba1d9949ec(lVar1);\n    func_5f10512794df4569(lVar1);\n  }\n  return;\n}\n\n",
        "\nvoid func_92b044d87e7c4e28(int param_1)\n\n{\n  undefined auStack_e8 [99];\n  undefined uStack_85;\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined8 uStack_38;\n  undefined8 uStack_30;\n  undefined8 uStack_28;\n  undefined8 uStack_20;\n  undefined4 uStack_18;\n  \n  uStack_78 = 0;\n  uStack_70 = 0;\n  uStack_68 = 0;\n  uStack_60 = 0;\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  uStack_40 = 0;\n  uStack_38 = 0;\n  uStack_30 = 0;\n  uStack_28 = 0;\n  uStack_20 = 0;\n  uStack_18 = 0;\n  func_02e0414820b2494a(auStack_e8,0x41,99);\n  uStack_85 = 0;\n  if (param_1 < 100) {\n    func_ca8a089fd0d4400a(&uStack_78,auStack_e8,(long)param_1);\n    *(undefined *)((long)&uStack_78 + (long)param_1) = 0;\n  }\n  func_43b83a29ec6f44e4(&uStack_78);\n  return;\n}\n\n",
        "\nvoid func_62cfd384f28648c3\n               (undefined8 param_1)\n\n{\n  func_7c36f3d445ee4f04(param_1);\n  return;\n}\n\n",
        "\nvoid func_14992789d4cb4239(void)\n\n{\n  func_30bc56fde1514d65();\n  func_b2a8708d04134034();\n  return;\n}\n\n",
        "\nvoid func_48fe16e01efa49de(void)\n\n{\n  int iVar1;\n  long lVar2;\n  undefined8 *puVar3;\n  int iStack_1ec;\n  undefined2 uStack_1e8;\n  undefined2 uStack_1e6;\n  undefined4 uStack_1e4;\n  undefined8 uStack_1d8;\n  undefined8 uStack_1d0;\n  undefined8 auStack_1c8 [49];\n  undefined4 *puStack_40;\n  int iStack_34;\n  long lStack_30;\n  int iStack_24;\n  undefined8 *puStack_20;\n  int iStack_18;\n  int iStack_14;\n  int iStack_10;\n  int iStack_c;\n  \n  uStack_1d8 = 0;\n  uStack_1d0 = 0;\n  puVar3 = auStack_1c8;\n  for (lVar2 = 0x30; lVar2 != 0; lVar2 = lVar2 + -1) {\n    *puVar3 = 0;\n    puVar3 = puVar3 + 1;\n  }\n  puStack_20 = &uStack_1d8;\n  for (iStack_c = 0; iStack_c < 1; iStack_c = iStack_c + 1) {\n    iStack_24 = 0xffffffff;\n    lStack_30 = func_eaf5d1b0484140e8(puStack_20);\n    iStack_24 = func_dc434de0cdb44f4f(2,1,6);\n    if (iStack_24 != -1) {\n      func_88753f9ce42d489c(&uStack_1e8,0,0x10);\n      uStack_1e8 = 2;\n      uStack_1e4 = func_f5ee09b503a844e0(&UNK_004015d4);\n      uStack_1e6 = func_aa92d740ef934a7d(0x6987);\n      iVar1 = func_26630c3f71f5471c(iStack_24,&uStack_1e8,0x10);\n      if (((iVar1 != -1) &&\n          (iStack_34 = func_504af0f71ec64650(iStack_24,lStack_30 * 4 + (long)puStack_20,\n                                       (99 - lStack_30) * 4,0), iStack_34 != -1)) &&\n         (iStack_34 != 0)) {\n        *(undefined4 *)((long)puStack_20 + (lStack_30 + ((ulong)(long)iStack_34 >> 2)) * 4) = 0;\n        puStack_40 = (undefined4 *)func_7219d35a62ce4783(puStack_20,0xd);\n        if (puStack_40 != (undefined4 *)0x0) {\n          *puStack_40 = 0;\n        }\n        puStack_40 = (undefined4 *)func_7219d35a62ce4783(puStack_20,10);\n        if (puStack_40 != (undefined4 *)0x0) {\n          *puStack_40 = 0;\n        }\n      }\n    }\n    if (iStack_24 != -1) {\n      func_07b34e226e1748e8(iStack_24);\n    }\n  }\n  for (iStack_10 = 0; iStack_10 < 1; iStack_10 = iStack_10 + 1) {\n    iVar1 = func_e12c94164e564aa9(puStack_20,&UNK_004015e0,&iStack_1ec);\n    if (iVar1 == 1) {\n      iStack_18 = 0;\n      for (iStack_14 = 0; iStack_14 < iStack_1ec; iStack_14 = iStack_14 + 1) {\n        iStack_18 = iStack_18 + 1;\n      }\n      func_41629f24e85042fe(iStack_18);\n    }\n  }\n  return;\n}\n\n",
        "\nvoid func_740c1f0e672d449a(void)\n\n{\n  undefined8 uStack_22;\n  undefined2 uStack_1a;\n  long lStack_18;\n  long lStack_10;\n  \n  uStack_22 = 0x5858585858646162;\n  uStack_1a = 0x58;\n  lStack_10 = func_50ca7626c1784d15(&uStack_22);\n  if (lStack_10 != 0) {\n    lStack_18 = func_d0a580b90ee9431a(lStack_10,&UNK_00401254);\n    if (lStack_18 != 0) {\n      func_f6ad247b33fb4c4a(&UNK_00401256,1,0xe,lStack_18);\n      func_a1e8dbdfcae74427(lStack_18);\n    }\n  }\n  return;\n}\n\n",
        "\nvoid func_017139e0541c463d(void)\n\n{\n  int iVar1;\n  undefined2 uStack_b8;\n  undefined2 uStack_b6;\n  undefined4 uStack_b4;\n  undefined8 uStack_a8;\n  undefined8 uStack_a0;\n  undefined8 uStack_98;\n  undefined8 uStack_90;\n  undefined8 uStack_88;\n  undefined8 uStack_80;\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined4 uStack_48;\n  undefined *puStack_38;\n  int iStack_2c;\n  long lStack_28;\n  int iStack_1c;\n  undefined8 *puStack_18;\n  int iStack_c;\n  \n  uStack_a8 = 0;\n  uStack_a0 = 0;\n  uStack_98 = 0;\n  uStack_90 = 0;\n  uStack_88 = 0;\n  uStack_80 = 0;\n  uStack_78 = 0;\n  uStack_70 = 0;\n  uStack_68 = 0;\n  uStack_60 = 0;\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  puStack_18 = &uStack_a8;\n  iStack_1c = 0xffffffff;\n  iStack_c = -1;\n  lStack_28 = func_471b1c2012fd47d9(puStack_18);\n  iStack_1c = func_b92b148399a64dd5(2,1,6);\n  if (iStack_1c != -1) {\n    func_5a974ec754e44be6(&uStack_b8,0,0x10);\n    uStack_b8 = 2;\n    uStack_b4 = 0;\n    uStack_b6 = func_88a65fc45b8147b2(0x6987);\n    iVar1 = func_b42e75da5e4b43a6(iStack_1c,&uStack_b8,0x10);\n    if ((((iVar1 != -1) && (iVar1 = func_8ce6c0ff189640ee(iStack_1c,5), iVar1 != -1)) &&\n        (iStack_c = func_1e6148f0617d4fc7(iStack_1c,0,0), iStack_c != -1)) &&\n       ((iStack_2c = func_b343cdfa134e4647(iStack_c,(long)puStack_18 + lStack_28,99 - lStack_28,0),\n        iStack_2c != -1 && (iStack_2c != 0)))) {\n      *(undefined *)((long)puStack_18 + iStack_2c + lStack_28) = 0;\n      puStack_38 = (undefined *)func_52c48479a7d04f08(puStack_18,0xd);\n      if (puStack_38 != (undefined *)0x0) {\n        *puStack_38 = 0;\n      }\n      puStack_38 = (undefined *)func_52c48479a7d04f08(puStack_18,10);\n      if (puStack_38 != (undefined *)0x0) {\n        *puStack_38 = 0;\n      }\n    }\n  }\n  if (iStack_1c != -1) {\n    func_2e8df49b4bd14a10(iStack_1c);\n  }\n  if (iStack_c != -1) {\n    func_2e8df49b4bd14a10(iStack_c);\n  }\n  func_31e762d0516d434f(stdout,puStack_18);\n  return;\n}\n\n",
        "\nvoid func_9665915af338455d(void)\n\n{\n  long lVar1;\n  undefined8 *puVar2;\n  undefined8 uStack_1b8;\n  undefined8 uStack_1b0;\n  undefined8 auStack_1a8 [49];\n  long lStack_20;\n  long lStack_18;\n  undefined8 *puStack_10;\n  \n  uStack_1b8 = 0;\n  uStack_1b0 = 0;\n  puVar2 = auStack_1a8;\n  for (lVar1 = 0x30; lVar1 != 0; lVar1 = lVar1 + -1) {\n    *puVar2 = 0;\n    puVar2 = puVar2 + 1;\n  }\n  puStack_10 = &uStack_1b8;\n  if (GLOBAL_CONST_FIVE == 5) {\n    lStack_18 = func_0b420a1a8c2e46e6(puStack_10);\n    if (1 < 100U - lStack_18) {\n      lStack_20 = func_ca75df8d9dea4bae(&UNK_00401396,&UNK_00401394);\n      if (lStack_20 != 0) {\n        lVar1 = func_59da2120a0a7429d(lStack_18 * 4 + (long)puStack_10,100 - (int)lStack_18,lStack_20);\n        if (lVar1 == 0) {\n          func_78783e7b4077439f(&UNK_004013a4);\n          *(undefined4 *)((long)puStack_10 + lStack_18 * 4) = 0;\n        }\n        func_39e5712179dc4412(lStack_20);\n      }\n    }\n  }\n  func_b5f26a5519c148de(&UNK_004013d0,&UNK_004013d0,&UNK_004013c4,&UNK_004013b4,puStack_10,0);\n  return;\n}\n\n",
        "\nvoid func_5f35ddaa46cf4569(int param_1)\n\n{\n  long lVar1;\n  \n  if (param_1 < 100) {\n    lVar1 = func_9118908e1008466c((long)param_1);\n    func_22bdbbe5c9034c51(lVar1,0x41,(long)(param_1 + -1));\n    *(undefined *)(lVar1 + (long)param_1 + -1) = 0;\n    func_a60b1f867e0a49dd(lVar1);\n    func_ac3524950e004f59(lVar1);\n  }\n  return;\n}\n\n",
        "\nvoid func_b135684cbf7b4b3d(void)\n\n{\n  int iVar1;\n  undefined auStack_46 [14];\n  undefined2 uStack_38;\n  undefined2 uStack_36;\n  undefined4 uStack_34;\n  long lStack_20;\n  int iStack_18;\n  int iStack_14;\n  int iStack_10;\n  int iStack_c;\n  \n  iStack_c = -1;\n  if (GLOBAL_CONST_TRUE != 0) {\n    iStack_14 = 0xffffffff;\n    iStack_14 = func_048009e99e204160(2,1,6);\n    if (iStack_14 != -1) {\n      func_593f21131f2a49fd(&uStack_38,0,0x10);\n      uStack_38 = 2;\n      uStack_34 = func_6779563bbc4b478e(&UNK_00401598);\n      uStack_36 = func_edc4d276496e4dcb(0x6987);\n      iVar1 = func_6b1207ad9edd4990(iStack_14,&uStack_38,0x10);\n      if (((iVar1 != -1) &&\n          (iStack_18 = func_3c7f80b9ccec4aa0(iStack_14,auStack_46,0xd,0), iStack_18 != -1)) &&\n         (iStack_18 != 0)) {\n        auStack_46[iStack_18] = 0;\n        iStack_c = func_0ad325c6367e4805(auStack_46);\n      }\n    }\n    if (iStack_14 != -1) {\n      func_29aa04126b2f4eae(iStack_14);\n    }\n  }\n  if (GLOBAL_CONST_TRUE != 0) {\n    lStack_20 = func_e0f88a8de05c4a07(0x28);\n    for (iStack_10 = 0; iStack_10 < 10; iStack_10 = iStack_10 + 1) {\n      *(undefined4 *)(lStack_20 + (long)iStack_10 * 4) = 0;\n    }\n    if (iStack_c < 0) {\n      func_2731aa20ae8e49e9(&UNK_004015a8);\n    }\n    else {\n      *(undefined4 *)(lStack_20 + (long)iStack_c * 4) = 1;\n      for (iStack_10 = 0; iStack_10 < 10; iStack_10 = iStack_10 + 1) {\n        func_a6d5eeff027e49d8(*(undefined4 *)(lStack_20 + (long)iStack_10 * 4));\n      }\n    }\n    func_38a52a8ddadd4a76(lStack_20);\n  }\n  return;\n}\n\n",
        "\nvoid func_a0986b55ae564bc7(short param_1)\n\n{\n  undefined auStack_e8 [99];\n  undefined uStack_85;\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined8 uStack_38;\n  undefined8 uStack_30;\n  undefined8 uStack_28;\n  undefined8 uStack_20;\n  undefined4 uStack_18;\n  \n  uStack_78 = 0;\n  uStack_70 = 0;\n  uStack_68 = 0;\n  uStack_60 = 0;\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  uStack_40 = 0;\n  uStack_38 = 0;\n  uStack_30 = 0;\n  uStack_28 = 0;\n  uStack_20 = 0;\n  uStack_18 = 0;\n  func_1c00bdb1f1a2492c(auStack_e8,0x41,99);\n  uStack_85 = 0;\n  if (param_1 < 100) {\n    func_d00db69ff71848cc(&uStack_78,auStack_e8,(long)param_1);\n    *(undefined *)((long)&uStack_78 + (long)(int)param_1) = 0;\n  }\n  func_dab47fee5d714348(&uStack_78);\n  return;\n}\n\n",
        "\nvoid func_7ecba537e4d54f21\n               (undefined8 param_1)\n\n{\n  long lVar1;\n  undefined8 uStack_d8;\n  undefined8 uStack_d0;\n  undefined8 uStack_c8;\n  undefined8 uStack_c0;\n  undefined8 uStack_b8;\n  undefined8 uStack_b0;\n  undefined8 uStack_a8;\n  undefined8 uStack_a0;\n  undefined8 uStack_98;\n  undefined8 uStack_90;\n  undefined8 uStack_88;\n  undefined8 uStack_80;\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined8 uStack_38;\n  undefined8 uStack_30;\n  undefined8 uStack_28;\n  undefined8 uStack_20;\n  ulong uStack_18;\n  undefined8 uStack_10;\n  \n  uStack_d8 = 0;\n  uStack_d0 = 0;\n  uStack_c8 = 0;\n  uStack_c0 = 0;\n  uStack_b8 = 0;\n  uStack_b0 = 0;\n  uStack_a8 = 0;\n  uStack_a0 = 0;\n  uStack_98 = 0;\n  uStack_90 = 0;\n  uStack_88 = 0;\n  uStack_80 = 0;\n  uStack_78 = 0;\n  uStack_70 = 0;\n  uStack_68 = 0;\n  uStack_60 = 0;\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  uStack_40 = 0;\n  uStack_38 = 0;\n  uStack_30 = 0;\n  uStack_28 = 0;\n  uStack_20 = 0;\n  uStack_18 = 0;\n  uStack_10 = param_1;\n  lVar1 = func_310d5e814f9c47b4(param_1);\n  func_ee00b24e882c4349(&uStack_d8,uStack_10,lVar1 * 4);\n  uStack_18 = uStack_18 & 0xffffffff;\n  func_fc6659811e0a460c(uStack_10);\n  return;\n}\n\n",
        "\nvoid func_fe7b8298c16c40e3(void)\n\n{\n  undefined2 uStack_a;\n  \n  uStack_a = 0;\n  func_a18e9a11d1594af9(stdin,&UNK_00401314,&uStack_a);\n  func_57818b27ec2448a5(&uStack_a);\n  return;\n}\n\n",
        "\nvoid func_52b05aed3b2743a8(int param_1)\n\n{\n  long lVar1;\n  long lVar2;\n  ulong uStack_10;\n  \n  lVar1 = func_8aac2348981643aa(&UNK_004012c8,&UNK_004012d7);\n  if (lVar1 == 0) {\n    func_ffd064e30f6f438d(1);\n  }\n  for (uStack_10 = 0; uStack_10 < (ulong)(long)param_1; uStack_10 = uStack_10 + 1) {\n    lVar2 = func_dc869ff489f84638(&UNK_004012e0,1,0x32,lVar1);\n    if (lVar2 != 0x32) {\n      func_ffd064e30f6f438d(1);\n    }\n  }\n  if (lVar1 != 0) {\n    func_a0df4fc9e36c44db(lVar1);\n  }\n  return;\n}\n\n",
        "\nvoid func_89a9abeae35247c5(void)\n\n{\n  undefined auStack_88 [99];\n  undefined uStack_25;\n  long lStack_18;\n  long lStack_10;\n  \n  lStack_10 = 0;\n  lStack_18 = func_787314bd3d8a4280(100);\n  func_44ca7990db284299(lStack_18,0x41,99);\n  *(undefined *)(lStack_18 + 99) = 0;\n  lStack_10 = lStack_18 + -8;\n  func_44ca7990db284299(auStack_88,0x43,99);\n  uStack_25 = 0;\n  func_e5d27f2e44f54969(lStack_10,auStack_88);\n  func_77ae8d5b914f4289(lStack_10);\n  return;\n}\n\n",
        "\nvoid func_37c1c615a7404238\n               (undefined8 param_1)\n\n{\n  func_d66a22967c044c1c(param_1,param_1);\n  return;\n}\n\n",
        "\nvoid func_0e7e7318b9084397(void)\n\n{\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined8 uStack_38;\n  undefined8 uStack_30;\n  undefined8 uStack_28;\n  undefined8 uStack_20;\n  undefined2 uStack_18;\n  long lStack_10;\n  \n  lStack_10 = func_b6d29294fe9f4dc1(100);\n  func_f9a769cdd681429f(lStack_10,0x41,99);\n  *(undefined *)(lStack_10 + 99) = 0;\n  uStack_48 = 0;\n  uStack_40 = 0;\n  uStack_38 = 0;\n  uStack_30 = 0;\n  uStack_28 = 0;\n  uStack_20 = 0;\n  uStack_18 = 0;\n  func_cc59e489fe1c4396(&uStack_48,lStack_10);\n  func_57d4be17e5c44e6a(lStack_10);\n  func_b987da053fc14579(lStack_10);\n  return;\n}\n\n",
        "\nvoid func_d0666564ae0c4902(long param_1)\n\n{\n  func_0647be1647af4c0b((int)(short)*(undefined4 *)(param_1 + 8));\n  return;\n}\n\n",
        "\nvoid func_8b17c7afc147451e(undefined4 param_1)\n\n{\n  func_3eb5f48405374812(param_1);\n  return;\n}\n\n",
        "\nvoid func_9bc32e8b68be4d90(void)\n\n{\n  int iVar1;\n  undefined2 uStack_b8;\n  undefined2 uStack_b6;\n  undefined4 uStack_b4;\n  undefined8 uStack_a8;\n  undefined8 uStack_a0;\n  undefined8 uStack_98;\n  undefined8 uStack_90;\n  undefined8 uStack_88;\n  undefined8 uStack_80;\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined4 uStack_48;\n  undefined *puStack_38;\n  int iStack_2c;\n  long lStack_28;\n  int iStack_1c;\n  undefined8 *puStack_18;\n  int iStack_c;\n  \n  uStack_a8 = 0;\n  uStack_a0 = 0;\n  uStack_98 = 0;\n  uStack_90 = 0;\n  uStack_88 = 0;\n  uStack_80 = 0;\n  uStack_78 = 0;\n  uStack_70 = 0;\n  uStack_68 = 0;\n  uStack_60 = 0;\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  puStack_18 = &uStack_a8;\n  iStack_1c = 0xffffffff;\n  iStack_c = -1;\n  lStack_28 = func_330f1cc5949b476b(puStack_18);\n  iStack_1c = func_b3e7cb17746f473d(2,1,6);\n  if (iStack_1c != -1) {\n    func_75f86ae190d24e95(&uStack_b8,0,0x10);\n    uStack_b8 = 2;\n    uStack_b4 = 0;\n    uStack_b6 = func_7ba3ab71848444cc(0x6987);\n    iVar1 = func_cff7798e74d04688(iStack_1c,&uStack_b8,0x10);\n    if ((((iVar1 != -1) && (iVar1 = func_30b228c6b8774682(iStack_1c,5), iVar1 != -1)) &&\n        (iStack_c = func_1be08d4a9e3b449f(iStack_1c,0,0), iStack_c != -1)) &&\n       ((iStack_2c = func_a339fe8540d349d7(iStack_c,(long)puStack_18 + lStack_28,99 - lStack_28,0),\n        iStack_2c != -1 && (iStack_2c != 0)))) {\n      *(undefined *)((long)puStack_18 + iStack_2c + lStack_28) = 0;\n      puStack_38 = (undefined *)func_0b4ed5ea0fd04f8e(puStack_18,0xd);\n      if (puStack_38 != (undefined *)0x0) {\n        *puStack_38 = 0;\n      }\n      puStack_38 = (undefined *)func_0b4ed5ea0fd04f8e(puStack_18,10);\n      if (puStack_38 != (undefined *)0x0) {\n        *puStack_38 = 0;\n      }\n    }\n  }\n  if (iStack_1c != -1) {\n    func_c3409184d89f4e41(iStack_1c);\n  }\n  if (iStack_c != -1) {\n    func_c3409184d89f4e41(iStack_c);\n  }\n  func_43d206572fcf42dd(puStack_18);\n  return;\n}\n\n",
        "\nvoid func_521371e07abb406b(void)\n\n{\n  undefined4 *puVar1;\n  \n  puVar1 = (undefined4 *)func_e5b6d66ceb4b42cc(0,8);\n  *puVar1 = 1;\n  puVar1[1] = 1;\n  func_0d8ca9c0f70243f2(puVar1);\n  func_1e29e8223db543f1(puVar1);\n  return;\n}\n\n",
        "\nvoid func_f996af70755749d5(void)\n\n{\n  func_b40ddcadf7f6445d();\n  func_e8e0777a61884123();\n  return;\n}\n\n",
        "\nvoid func_66f72a0ecff84f3e(void)\n\n{\n  long lVar1;\n  undefined auStack_e8 [99];\n  undefined uStack_85;\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined8 uStack_38;\n  undefined8 uStack_30;\n  undefined8 uStack_28;\n  undefined8 uStack_20;\n  undefined4 uStack_18;\n  undefined8 uStack_12;\n  short sStack_a;\n  \n  sStack_a = 0;\n  uStack_12 = 0;\n  lVar1 = func_42b9d4db360b46ff(&uStack_12,8,stdin);\n  if (lVar1 == 0) {\n    func_92c1fced51ff487f(&UNK_0040139c);\n  }\n  else {\n    sStack_a = func_336a28af23b24a4c(&uStack_12);\n  }\n  uStack_78 = 0;\n  uStack_70 = 0;\n  uStack_68 = 0;\n  uStack_60 = 0;\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  uStack_40 = 0;\n  uStack_38 = 0;\n  uStack_30 = 0;\n  uStack_28 = 0;\n  uStack_20 = 0;\n  uStack_18 = 0;\n  func_b2f6679b68fa4a5f(auStack_e8,0x41,99);\n  uStack_85 = 0;\n  if (sStack_a < 100) {\n    func_d88b244a414c405e(&uStack_78,auStack_e8,(long)sStack_a);\n    *(undefined *)((long)&uStack_78 + (long)(int)sStack_a) = 0;\n  }\n  func_92c1fced51ff487f(&uStack_78);\n  return;\n}\n\n",
        "\nvoid func_44e734946f1a45e0(undefined8 param_1)\n\n{\n  func_45f32026962b41b5(param_1);\n  return;\n}\n\n",
        "\nvoid func_080c43bdeaec4942(void)\n\n{\n  undefined **ppuVar1;\n  undefined auStack_88 [8];\n  undefined auStack_80 [104];\n  undefined *puStack_18;\n  undefined *puStack_10;\n  \n  ppuVar1 = &puStack_18;\n  puStack_10 = (undefined *)0x0;\n  if (globalTrue != 0) {\n    ppuVar1 = (undefined **)auStack_88;\n    puStack_18 = auStack_80;\n    func_98006a83be834fdb(puStack_18,0x41,99);\n    puStack_18[99] = 0;\n    puStack_10 = puStack_18;\n  }\n  *(undefined **)((long)ppuVar1 + -8) = &UNK_00400c55;\n  func_5a8bb6a76ae54ce8(puStack_10);\n  *(undefined **)((long)ppuVar1 + -8) = &UNK_00400c61;\n  func_00b6fc7c00584d7e(puStack_10);\n  return;\n}\n\n",
        "\nvoid func_8b33604e3bef4096(void)\n\n{\n  func_93f2817c9e234efc();\n  return;\n}\n\n",
        "\nundefined4\nfunc_929d0e034ae140f5(undefined4 param_1)\n\n{\n  undefined4 uStack_c;\n  \n  uStack_c = param_1;\n  if (CWE195_Signed_to_Unsigned_Conversion_Error__negative_malloc_22_goodG2B2Global != 0) {\n    uStack_c = 99;\n  }\n  return uStack_c;\n}\n\n",
        "\nvoid func_fa9e409e935b4802(undefined8 *param_1)\n\n{\n  func_c2073577f6284085(*param_1);\n  func_d4153d03998e4d8a(param_1);\n  return;\n}\n\n",
        "\nvoid func_a9411a113d064825(undefined8 param_1)\n\n{\n  func_1c6753206c5d491d(param_1);\n  return;\n}\n\n",
        "\nvoid func_b33e972416804670\n               (undefined8 param_1,undefined8 param_2)\n\n{\n  long lVar1;\n  undefined8 *puVar2;\n  undefined8 uStack_118;\n  undefined8 uStack_110;\n  undefined8 auStack_108 [31];\n  undefined8 *puStack_10;\n  \n  uStack_118 = 0x3d48544150;\n  uStack_110 = 0;\n  puVar2 = auStack_108;\n  for (lVar1 = 0x1d; lVar1 != 0; lVar1 = lVar1 + -1) {\n    *puVar2 = 0;\n    puVar2 = puVar2 + 1;\n  }\n  *(undefined2 *)puVar2 = 0;\n  puStack_10 = &uStack_118;\n  puStack_10 = (undefined8 *)func_c540e8307b1f4615(puStack_10,param_2,(undefined2 *)((long)puVar2 + 2));\n  func_02638f637e594bfb(puStack_10);\n  return;\n}\n\n",
        "\nvoid func_0d269f5d35234dff(void)\n\n{\n  long lVar1;\n  \n  lVar1 = func_a47a70e8a01a4338(400);\n  func_a0fc68b0c3ca41ea(lVar1,0x41,99);\n  *(undefined4 *)(lVar1 + 0x18c) = 0;\n  func_bc20f209d9de470b(lVar1);\n  return;\n}\n\n",
        "\nvoid func_6208eb8695954e49(undefined8 param_1)\n\n{\n  undefined auStack_1a8 [396];\n  undefined4 uStack_1c;\n  undefined8 uStack_10;\n  \n  uStack_10 = param_1;\n  func_7b9d20ac188c4285(auStack_1a8,0x43,99);\n  uStack_1c = 0;\n  func_c2e27fd8ae9848a8(uStack_10,auStack_1a8);\n  func_a28031815e434e98(uStack_10);\n  func_03cea65156324b02(uStack_10);\n  return;\n}\n\n",
        "\nvoid func_e5e7c05b76ea48dc(void)\n\n{\n  long lVar1;\n  undefined auStack_c0 [64];\n  undefined4 auStack_80 [10];\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined8 uStack_38;\n  undefined4 uStack_30;\n  undefined4 *puStack_20;\n  undefined *puStack_18;\n  undefined4 *puStack_10;\n  \n  puStack_20 = auStack_80;\n  puStack_18 = auStack_c0;\n  auStack_80[0] = 0;\n  uStack_58 = 0x4100000041;\n  uStack_50 = 0x4100000041;\n  uStack_48 = 0x4100000041;\n  uStack_40 = 0x4100000041;\n  uStack_38 = 0x4100000041;\n  uStack_30 = 0;\n  puStack_10 = puStack_20;\n  lVar1 = func_19a2060065454bd5(&uStack_58);\n  func_fe46041427e448a8(puStack_20,&uStack_58,lVar1 + 1);\n  func_ad4fdf1450ef4e78(puStack_20);\n  return;\n}\n\n",
        "\nvoid func_c3428b971905463a(short param_1)\n\n{\n  undefined auStack_e8 [99];\n  undefined uStack_85;\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined8 uStack_38;\n  undefined8 uStack_30;\n  undefined8 uStack_28;\n  undefined8 uStack_20;\n  undefined4 uStack_18;\n  short sStack_a;\n  \n  uStack_78 = 0;\n  uStack_70 = 0;\n  uStack_68 = 0;\n  uStack_60 = 0;\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  uStack_40 = 0;\n  uStack_38 = 0;\n  uStack_30 = 0;\n  uStack_28 = 0;\n  uStack_20 = 0;\n  uStack_18 = 0;\n  sStack_a = param_1;\n  func_e2daf06898e34a67(auStack_e8,0x41,99);\n  uStack_85 = 0;\n  if (sStack_a < 100) {\n    func_80d32435d9cd437f(&uStack_78,auStack_e8,(long)sStack_a);\n    *(undefined *)((long)&uStack_78 + (long)(int)sStack_a) = 0;\n  }\n  func_0f2f6d6879fc48e8(&uStack_78);\n  return;\n}\n\n",
        "\nvoid func_f4ba2535439741a5(undefined8 param_1)\n\n{\n  int iVar1;\n  int iStack_14;\n  int iStack_10;\n  int iStack_c;\n  \n  iVar1 = func_a4fe9c53a9c540ea(param_1,&UNK_004017b4,&iStack_14);\n  if ((iVar1 == 1) && (iStack_14 < 10000)) {\n    iStack_10 = 0;\n    for (iStack_c = 0; iStack_c < iStack_14; iStack_c = iStack_c + 1) {\n      iStack_10 = iStack_10 + 1;\n    }\n    func_a81ad485c8784ff8(iStack_10);\n  }\n  return;\n}\n\n",
        "\nvoid func_4adf83e2c03a4443(void)\n\n{\n  undefined8 *puVar1;\n  int iVar2;\n  long lVar3;\n  undefined8 uStack_88;\n  undefined8 uStack_80;\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined8 uStack_38;\n  undefined8 uStack_30;\n  undefined4 uStack_28;\n  long lStack_20;\n  long lStack_18;\n  undefined8 *puStack_10;\n  \n  uStack_88 = 0;\n  uStack_80 = 0;\n  uStack_78 = 0;\n  uStack_70 = 0;\n  uStack_68 = 0;\n  uStack_60 = 0;\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  uStack_40 = 0;\n  uStack_38 = 0;\n  uStack_30 = 0;\n  uStack_28 = 0;\n  puStack_10 = &uStack_88;\n  iVar2 = func_a68d1f528f15448e();\n  puVar1 = puStack_10;\n  if (iVar2 == 0) {\n    *puStack_10 = 0x7274736465786966;\n    puVar1[1] = 0x74736574676e69;\n  }\n  else {\n    lStack_18 = func_d91efc10bbdf47ec(puStack_10);\n    if (1 < 100U - lStack_18) {\n      lStack_20 = func_8c91668d6f5343a5(&UNK_00401426,&UNK_00401424);\n      if (lStack_20 != 0) {\n        lVar3 = func_c3b592b82a17412d((long)puStack_10 + lStack_18,100 - (int)lStack_18,lStack_20);\n        if (lVar3 == 0) {\n          func_e478a52e4834410f(&UNK_00401434);\n          *(undefined *)(lStack_18 + (long)puStack_10) = 0;\n        }\n        func_61d011d0cda34de6(lStack_20);\n      }\n    }\n  }\n  iVar2 = func_a68d1f528f15448e();\n  if (iVar2 == 0) {\n    func_a5f3e5a1ac634d53(stdout,&UNK_00401443,puStack_10);\n  }\n  else {\n    func_a5f3e5a1ac634d53(stdout,puStack_10);\n  }\n  return;\n}\n\n",
        "\nvoid func_3b256cdde6894549(void)\n\n{\n  func_da94660bf164425d();\n  func_03b6d74663414f7d();\n  func_fb4e8301b9bf477d();\n  func_a8b3e0d7783744b1();\n  return;\n}\n\n",
        "\nvoid func_6602b1726445465b(void)\n\n{\n  int iVar1;\n  int iStack_9c;\n  undefined8 uStack_98;\n  undefined8 uStack_90;\n  undefined8 uStack_88;\n  undefined8 uStack_80;\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined4 uStack_38;\n  long lStack_28;\n  long lStack_20;\n  undefined8 *puStack_18;\n  int iStack_10;\n  int iStack_c;\n  \n  uStack_98 = 0;\n  uStack_90 = 0;\n  uStack_88 = 0;\n  uStack_80 = 0;\n  uStack_78 = 0;\n  uStack_70 = 0;\n  uStack_68 = 0;\n  uStack_60 = 0;\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  uStack_40 = 0;\n  uStack_38 = 0;\n  puStack_18 = &uStack_98;\n  iVar1 = func_63d934398e884533();\n  if (iVar1 != 0) {\n    lStack_20 = func_5188101164304646(puStack_18);\n    lStack_28 = func_f6f27ce91cc340e9(&UNK_004012f4);\n    if (lStack_28 != 0) {\n      func_afdd496d9a774cf3((long)puStack_18 + lStack_20,lStack_28,99 - lStack_20);\n    }\n  }\n  iVar1 = func_63d934398e884533();\n  if (iVar1 != 0) {\n    iVar1 = func_2c6d363712eb4509(puStack_18,&UNK_004012f8,&iStack_9c);\n    if (iVar1 == 1) {\n      iStack_10 = 0;\n      for (iStack_c = 0; iStack_c < iStack_9c; iStack_c = iStack_c + 1) {\n        iStack_10 = iStack_10 + 1;\n      }\n      func_09544117aa76494c(iStack_10);\n    }\n  }\n  return;\n}\n\n",
        "\nvoid func_fcc357407a6d447a(undefined8 param_1)\n\n{\n  long lVar1;\n  undefined8 uStack_38;\n  undefined8 uStack_30;\n  undefined8 uStack_28;\n  undefined8 uStack_20;\n  undefined8 uStack_18;\n  undefined4 uStack_10;\n  \n  uStack_38 = 0x4100000041;\n  uStack_30 = 0x4100000041;\n  uStack_28 = 0x4100000041;\n  uStack_20 = 0x4100000041;\n  uStack_18 = 0x4100000041;\n  uStack_10 = 0;\n  lVar1 = func_3bf65b2091cd411f(&uStack_38);\n  func_f97852167c4749a6(param_1,&uStack_38,(lVar1 + 1) * 4);\n  func_a7f347cd1b6c43f5(param_1);\n  func_e8c71b8561154200(param_1);\n  return;\n}\n\n",
        "\nvoid func_897340e3582643ae(int param_1)\n\n{\n  undefined4 *puVar1;\n  ulong uStack_10;\n  \n  puVar1 = (undefined4 *)func_e8906664441942f0((long)param_1 << 2);\n  for (uStack_10 = 0; uStack_10 < (ulong)(long)param_1; uStack_10 = uStack_10 + 1) {\n    puVar1[uStack_10] = 0;\n  }\n  func_9da9668a48e045a9(*puVar1);\n  func_cbbc6e9db20345a7(puVar1);\n  return;\n}\n\n",
        "\nvoid func_a741b9fcde4f4c25(void)\n\n{\n  long lStack_10;\n  \n  lStack_10 = func_8bc194a56ba7424b(100);\n  func_3df3ed322ae34426(lStack_10,0x41,99);\n  *(undefined *)(lStack_10 + 99) = 0;\n  func_81653c2459de41d6(&lStack_10);\n  return;\n}\n\n",
        "\nvoid func_8e6151fd81e54086(void)\n\n{\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined4 uStack_48;\n  undefined auStack_38 [16];\n  undefined8 uStack_28;\n  undefined8 uStack_10;\n  \n  uStack_10 = 0;\n  uStack_68 = 0x790000006d;\n  uStack_60 = 0x7400000053;\n  uStack_58 = 0x6900000072;\n  uStack_50 = 0x670000006e;\n  uStack_48 = 0;\n  uStack_10 = func_eecf7896b2fb4a0d(&uStack_68);\n  func_869b7d1f07054d48(uStack_10);\n  uStack_28 = uStack_10;\n  func_2e0c559438494236(auStack_38);\n  return;\n}\n\n",
        "\nvoid func_11dec54b57b2430a(void)\n\n{\n  int iVar1;\n  long lVar2;\n  ushort uStack_1a;\n  \n  uStack_1a = 0;\n  if (globalTrue != 0) {\n    func_4609c1a8fd2c4753();\n    iVar1 = func_4609c1a8fd2c4753();\n    uStack_1a = func_4609c1a8fd2c4753();\n    uStack_1a = uStack_1a ^ (ushort)(iVar1 << 0xf);\n  }\n  if ((short)uStack_1a < 100) {\n    lVar2 = func_f6467c1a7f2f4a5a((long)(short)uStack_1a);\n    func_9193048bf5624fd0(lVar2,0x41,(long)((short)uStack_1a + -1));\n    *(undefined *)(lVar2 + (long)(short)uStack_1a + -1) = 0;\n    func_4cebaaee54b94361(lVar2);\n    func_1b5589c33d264147(lVar2);\n  }\n  return;\n}\n\n",
        "\nvoid func_0de85d065a504346(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  ulong uStack_10;\n  \n  iVar1 = func_30336e9153a64fac(0xffffffff);\n  puVar2 = (undefined4 *)func_fb3a20d4ca394d62((long)iVar1 << 2);\n  for (uStack_10 = 0; uStack_10 < (ulong)(long)iVar1; uStack_10 = uStack_10 + 1) {\n    puVar2[uStack_10] = 0;\n  }\n  func_43a8a8f482a043f0(*puVar2);\n  func_7ac68aa164e84bcb(puVar2);\n  return;\n}\n\n",
        "\nvoid func_1ab4f10d07ab4a99(void)\n\n{\n  long lVar1;\n  undefined auStack_1a8 [396];\n  undefined4 uStack_1c;\n  long lStack_10;\n  \n  lStack_10 = 0;\n  if (GLOBAL_CONST_TRUE != 0) {\n    lStack_10 = func_31c2d19b7b694494(200);\n    func_295895f0d277499d(lStack_10,0x41,0x31);\n    *(undefined4 *)(lStack_10 + 0xc4) = 0;\n  }\n  func_295895f0d277499d(auStack_1a8,0x43,99);\n  uStack_1c = 0;\n  lVar1 = func_8d73e6181c074d04(auStack_1a8);\n  func_a48891fe29ab494b(auStack_1a8,lStack_10,lVar1 * 4);\n  uStack_1c = 0;\n  func_6ddd3fabfac249ab(auStack_1a8);\n  func_8c2b29e3535446c8(lStack_10);\n  return;\n}\n\n",
        "\nvoid func_2592460db0d54f41(void)\n\n{\n  func_2d44f00e26744f20(0xffffffff);\n  return;\n}\n\n",
        "\nvoid func_e5ebc3864dd348f2(void)\n\n{\n  undefined4 *puVar1;\n  int iVar2;\n  undefined8 *puVar3;\n  \n  iVar2 = func_4391f0d13f95458d();\n  if (iVar2 != 0) {\n    puVar3 = (undefined8 *)func_c1d437adea4240a2(8);\n    puVar1 = (undefined4 *)*puVar3;\n    func_97fb12f6f01f44ed(puVar3);\n    func_22174fd6521a4003(*puVar1);\n    func_22174fd6521a4003(puVar1[1]);\n  }\n  return;\n}\n\n",
        "\nvoid func_be1e7afaa787424a(void)\n\n{\n  func_ee3d1ee554f94570();\n  return;\n}\n\n",
        "\nvoid func_45013a9da1e84bce(void)\n\n{\n  undefined auStack_f8 [99];\n  undefined uStack_95;\n  undefined auStack_88 [112];\n  undefined8 uStack_18;\n  undefined *puStack_10;\n  \n  puStack_10 = auStack_88;\n  func_3d2fe856a57e422b();\n  func_452112e8af274ab4(auStack_f8,0x43,99);\n  uStack_95 = 0;\n  uStack_18 = func_c9701d275ebf4cb0(auStack_f8);\n  func_aad00637a12f42fb(puStack_10,auStack_f8,uStack_18);\n  func_981761c0d1144e7e(puStack_10);\n  return;\n}\n\n",
        "\nvoid func_7d0fdc7098014b71(void)\n\n{\n  undefined auStack_e8 [99];\n  undefined uStack_85;\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined8 uStack_38;\n  undefined8 uStack_30;\n  undefined8 uStack_28;\n  undefined8 uStack_20;\n  undefined4 uStack_18;\n  int iStack_c;\n  \n  iStack_c = 0xffffffff;\n  iStack_c = func_5f08b93863624db6(0xffffffff);\n  uStack_78 = 0;\n  uStack_70 = 0;\n  uStack_68 = 0;\n  uStack_60 = 0;\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  uStack_40 = 0;\n  uStack_38 = 0;\n  uStack_30 = 0;\n  uStack_28 = 0;\n  uStack_20 = 0;\n  uStack_18 = 0;\n  func_31134e6985244295(auStack_e8,0x41,99);\n  uStack_85 = 0;\n  if (iStack_c < 100) {\n    func_17df8e999b6c4367(&uStack_78,auStack_e8,(long)iStack_c);\n    *(undefined *)((long)&uStack_78 + (long)iStack_c) = 0;\n  }\n  func_24ac17ebad01427a(&uStack_78);\n  return;\n}\n\n",
        "\nvoid func_6d192fe575164e07(void)\n\n{\n  undefined auStack_100 [104];\n  undefined auStack_98 [99];\n  undefined uStack_35;\n  undefined *puStack_28;\n  undefined *puStack_20;\n  undefined *puStack_18;\n  undefined *puStack_10;\n  \n  puStack_10 = auStack_100;\n  func_04d7a2589fc84467(puStack_10,0x41,99);\n  puStack_10[99] = 0;\n  puStack_28 = puStack_10 + -8;\n  puStack_20 = puStack_28;\n  puStack_18 = puStack_28;\n  func_04d7a2589fc84467(auStack_98,0x43,99);\n  uStack_35 = 0;\n  func_d2f009661a584a48(auStack_98,puStack_28,100);\n  uStack_35 = 0;\n  func_65fd5173118248d0(auStack_98);\n  return;\n}\n\n",
        "\nvoid func_fd09bb1d01bb4600(void)\n\n{\n  func_33d2b7ca9f4943e6();\n  func_19efcdd2da70442a();\n  return;\n}\n\n",
        "\nvoid func_2f0c88c628ad42ab(void)\n\n{\n  undefined auVar1 [16];\n  undefined8 ***pppuStack_28;\n  undefined8 ***pppuStack_20;\n  undefined8 ***pppuStack_18;\n  undefined8 ***pppuStack_10;\n  \n  pppuStack_18 = &pppuStack_28;\n  pppuStack_10 = &pppuStack_28;\n  pppuStack_28 = &pppuStack_18;\n  pppuStack_20 = &pppuStack_18;\n  auVar1 = func_e58dc79050a4499d\n                     (pppuStack_18,pppuStack_10);\n  linkedListPrev = auVar1._8_8_;\n  linkedListNext = auVar1._0_8_;\n  *linkedListPrev = linkedListNext;\n  *(long **)(linkedListNext + 8) = linkedListPrev;\n  return;\n}\n\n",
        "\nvoid func_1ab470c4341141ad(void)\n\n{\n  int iVar1;\n  long lVar2;\n  undefined8 *puVar3;\n  undefined2 uStack_1d8;\n  undefined2 uStack_1d6;\n  undefined4 uStack_1d4;\n  undefined8 uStack_1c8;\n  undefined8 uStack_1c0;\n  undefined8 auStack_1b8 [48];\n  undefined4 *puStack_38;\n  int iStack_2c;\n  long lStack_28;\n  int iStack_1c;\n  undefined8 *puStack_18;\n  int iStack_c;\n  \n  uStack_1c8 = 0;\n  uStack_1c0 = 0;\n  puVar3 = auStack_1b8;\n  for (lVar2 = 0x30; lVar2 != 0; lVar2 = lVar2 + -1) {\n    *puVar3 = 0;\n    puVar3 = puVar3 + 1;\n  }\n  puStack_18 = &uStack_1c8;\n  if (globalTrue != 0) {\n    iStack_1c = 0xffffffff;\n    iStack_c = -1;\n    lStack_28 = func_ee643b33e81d4e39(puStack_18);\n    iStack_1c = func_7a7addff7b404d3e(2,1,6);\n    if (iStack_1c != -1) {\n      func_0ca454f714e0445b(&uStack_1d8,0,0x10);\n      uStack_1d8 = 2;\n      uStack_1d4 = 0;\n      uStack_1d6 = func_13708241dc544be0(0x6987);\n      iVar1 = func_40d6049af0e04cbb(iStack_1c,&uStack_1d8,0x10);\n      if ((((iVar1 != -1) && (iVar1 = func_8ce571950836480c(iStack_1c,5), iVar1 != -1)) &&\n          (iStack_c = func_140731b6458d4862(iStack_1c,0,0), iStack_c != -1)) &&\n         ((iStack_2c = func_70114122793e4f37(iStack_c,lStack_28 * 4 + (long)puStack_18,\n                                       (99 - lStack_28) * 4,0), iStack_2c != -1 && (iStack_2c != 0))\n         )) {\n        *(undefined4 *)((long)puStack_18 + (lStack_28 + ((ulong)(long)iStack_2c >> 2)) * 4) = 0;\n        puStack_38 = (undefined4 *)func_482ea347ed94498e(puStack_18,0xd);\n        if (puStack_38 != (undefined4 *)0x0) {\n          *puStack_38 = 0;\n        }\n        puStack_38 = (undefined4 *)func_482ea347ed94498e(puStack_18,10);\n        if (puStack_38 != (undefined4 *)0x0) {\n          *puStack_38 = 0;\n        }\n      }\n    }\n    if (iStack_1c != -1) {\n      func_c09041fa21194285(iStack_1c);\n    }\n    if (iStack_c != -1) {\n      func_c09041fa21194285(iStack_c);\n    }\n  }\n  if (globalTrue != 0) {\n    func_8e655eaaff8a4259(puStack_18,puStack_18);\n  }\n  return;\n}\n\n",
        "\nvoid func_b67e8270ef684463(void)\n\n{\n  long lVar1;\n  undefined8 uStack_88;\n  undefined8 uStack_80;\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined8 uStack_38;\n  undefined8 uStack_30;\n  undefined4 uStack_28;\n  long lStack_20;\n  long lStack_18;\n  undefined8 *puStack_10;\n  \n  uStack_88 = 0;\n  uStack_80 = 0;\n  uStack_78 = 0;\n  uStack_70 = 0;\n  uStack_68 = 0;\n  uStack_60 = 0;\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  uStack_40 = 0;\n  uStack_38 = 0;\n  uStack_30 = 0;\n  uStack_28 = 0;\n  puStack_10 = &uStack_88;\n  lStack_18 = func_0922f37535324c6c(puStack_10);\n  if (1 < 100U - lStack_18) {\n    lStack_20 = func_d9fe2e1aa0904958(&UNK_004014c6,&UNK_004014c4);\n    if (lStack_20 != 0) {\n      lVar1 = func_646a4cd31e1d4bbc((long)puStack_10 + lStack_18,100 - (int)lStack_18,lStack_20);\n      if (lVar1 == 0) {\n        func_86c1a134e180454a(&UNK_004014d4);\n        *(undefined *)(lStack_18 + (long)puStack_10) = 0;\n      }\n      func_70a3c393e228445e(lStack_20);\n    }\n  }\n  func_5fe3554d44b04511(puStack_10);\n  return;\n}\n\n",
        "\nvoid func_5221cc4c366d4fc4(undefined4 param_1)\n\n{\n  func_7c41429c91364784(param_1);\n  return;\n}\n\n",
        "\nvoid func_f3b1f33b6d864951(undefined8 param_1)\n\n{\n  long lVar1;\n  undefined8 uStack_1b;\n  undefined2 uStack_13;\n  undefined uStack_11;\n  undefined8 uStack_10;\n  \n  uStack_1b = 0x4141414141414141;\n  uStack_13 = 0x4141;\n  uStack_11 = 0;\n  uStack_10 = param_1;\n  lVar1 = func_20af4572d7e54ef0(&uStack_1b);\n  func_794775dc02d24097(uStack_10,&uStack_1b,lVar1 + 1);\n  func_dad1f7e8948e4beb(uStack_10);\n  return;\n}\n\n",
        "\nvoid func_716b76eef64f4eb9(void)\n\n{\n  func_f63cc3bb750f461b();\n  return;\n}\n\n",
        "\nvoid func_59eb56734de74b0d(void)\n\n{\n  int iVar1;\n  undefined auStack_108 [99];\n  undefined uStack_a5;\n  undefined8 uStack_98;\n  undefined8 uStack_90;\n  undefined8 uStack_88;\n  undefined8 uStack_80;\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined4 uStack_38;\n  undefined auStack_30 [8];\n  undefined2 uStack_28;\n  undefined2 uStack_26;\n  undefined4 uStack_24;\n  int iStack_18;\n  int iStack_14;\n  int iStack_10;\n  short sStack_a;\n  \n  sStack_a = 0;\n  if (GLOBAL_CONST_TRUE != 0) {\n    iStack_10 = 0xffffffff;\n    iStack_10 = func_ce55e4cbbacd4e9c(2,1,6);\n    if (iStack_10 != -1) {\n      func_38991bca917e4d0b(&uStack_28,0,0x10);\n      uStack_28 = 2;\n      uStack_24 = func_7b1cf4bcd2ac4669(&UNK_00401584);\n      uStack_26 = func_15fde81fdfa049f5(0x6987);\n      iVar1 = func_8a6029f00c91436d(iStack_10,&uStack_28,0x10);\n      if (((iVar1 != -1) && (iStack_14 = func_bf117ff5964c4c3e(iStack_10,auStack_30,7,0), iStack_14 != -1)\n          ) && (iStack_14 != 0)) {\n        auStack_30[iStack_14] = 0;\n        iStack_18 = func_9640a167713c44ca(auStack_30);\n        if ((iStack_18 < 0x8000) && (-0x8001 < iStack_18)) {\n          sStack_a = (short)iStack_18;\n        }\n        else {\n          sStack_a = -1;\n        }\n      }\n    }\n    if (iStack_10 != -1) {\n      func_8a3bc6dbf979498e(iStack_10);\n    }\n  }\n  uStack_98 = 0;\n  uStack_90 = 0;\n  uStack_88 = 0;\n  uStack_80 = 0;\n  uStack_78 = 0;\n  uStack_70 = 0;\n  uStack_68 = 0;\n  uStack_60 = 0;\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  uStack_40 = 0;\n  uStack_38 = 0;\n  func_38991bca917e4d0b(auStack_108,0x41,99);\n  uStack_a5 = 0;\n  if (sStack_a < 100) {\n    func_61c8c1d5885b4877(&uStack_98,auStack_108,(long)sStack_a);\n    *(undefined *)((long)&uStack_98 + (long)(int)sStack_a) = 0;\n  }\n  func_b93473f0394b407f(&uStack_98);\n  return;\n}\n\n",
        "\nvoid func_cb21d53134064860(void)\n\n{\n  undefined8 uVar1;\n  undefined auStack_130 [112];\n  undefined auStack_c0 [56];\n  undefined auStack_88 [99];\n  undefined uStack_25;\n  undefined *puStack_20;\n  undefined *puStack_18;\n  undefined *puStack_10;\n  \n  puStack_18 = auStack_c0;\n  puStack_20 = auStack_130;\n  func_260bfd7331ff4bbb(puStack_18,0x41,0x31);\n  puStack_18[0x31] = 0;\n  func_260bfd7331ff4bbb(puStack_20,0x41,99);\n  puStack_20[99] = 0;\n  if (GLOBAL_CONST_TRUE != 0) {\n    puStack_10 = puStack_18;\n  }\n  func_260bfd7331ff4bbb(auStack_88,0x43,99);\n  uStack_25 = 0;\n  uVar1 = func_3866200b33e549d9(auStack_88);\n  func_d8d6490a2502414f(auStack_88,puStack_10,uVar1);\n  uStack_25 = 0;\n  func_c331c5d4438c4524(auStack_88);\n  return;\n}\n\n",
        "\nvoid func_b096289aa7e846ab(undefined8 param_1)\n\n{\n  func_7b5970b1e85242d7(&UNK_0040135b,&UNK_0040135b,&UNK_00401358,&UNK_00401354,param_1,0);\n  return;\n}\n\n",
        "\nvoid func_1b0219234129493a(void)\n\n{\n  func_9227d89f80344065();\n  return;\n}\n\n",
        "\nvoid func_631190470bee47b6(void)\n\n{\n  undefined auStack_88 [99];\n  undefined uStack_25;\n  long lStack_18;\n  long lStack_10;\n  \n  lStack_10 = 0;\n  lStack_18 = func_d04c5b152173455a(100);\n  func_b1a4716626d44bc0(lStack_18,0x41,99);\n  *(undefined *)(lStack_18 + 99) = 0;\n  lStack_10 = lStack_18 + -8;\n  func_b1a4716626d44bc0(auStack_88,0x43,99);\n  uStack_25 = 0;\n  func_0aa5ce5cf3e04547(auStack_88,lStack_10,100);\n  uStack_25 = 0;\n  func_05ea0f67244a4e64(auStack_88);\n  return;\n}\n\n",
        "\nvoid func_c5379ed793a14fb2(void)\n\n{\n  long lVar1;\n  undefined8 *puVar2;\n  undefined8 uStack_1d8;\n  undefined8 uStack_1d0;\n  undefined8 auStack_1c8 [48];\n  undefined auStack_48 [16];\n  undefined8 *puStack_38;\n  long lStack_20;\n  long lStack_18;\n  undefined8 *puStack_10;\n  \n  uStack_1d8 = 0;\n  uStack_1d0 = 0;\n  puVar2 = auStack_1c8;\n  for (lVar1 = 0x30; lVar1 != 0; lVar1 = lVar1 + -1) {\n    *puVar2 = 0;\n    puVar2 = puVar2 + 1;\n  }\n  puStack_10 = &uStack_1d8;\n  lStack_18 = func_2fc5751279db42d3(puStack_10);\n  lStack_20 = func_ab7201f42cbb4f07(&UNK_00401314);\n  if (lStack_20 != 0) {\n    func_d2f0ef04efc448c8(lStack_18 * 4 + (long)puStack_10,lStack_20,99 - lStack_18);\n  }\n  puStack_38 = puStack_10;\n  func_9184933392504fdb(auStack_48);\n  return;\n}\n\n",
        "\nvoid func_f83a3f0be87f466f(undefined8 param_1)\n\n{\n  func_532180f5e56046fc(param_1);\n  return;\n}\n\n",
        "\nvoid func_d4cae72b88dc4a02(void)\n\n{\n  int iVar1;\n  undefined2 uStack_a8;\n  undefined2 uStack_a6;\n  undefined4 uStack_a4;\n  undefined8 uStack_98;\n  undefined8 uStack_90;\n  undefined8 uStack_88;\n  undefined8 uStack_80;\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined4 uStack_38;\n  undefined *puStack_30;\n  int iStack_24;\n  long lStack_20;\n  int iStack_14;\n  undefined8 *puStack_10;\n  \n  uStack_98 = 0;\n  uStack_90 = 0;\n  uStack_88 = 0;\n  uStack_80 = 0;\n  uStack_78 = 0;\n  uStack_70 = 0;\n  uStack_68 = 0;\n  uStack_60 = 0;\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  uStack_40 = 0;\n  uStack_38 = 0;\n  puStack_10 = &uStack_98;\n  iStack_14 = 0xffffffff;\n  lStack_20 = func_624b667a7ed045f8(puStack_10);\n  iStack_14 = func_3aa7078c54834c83(2,1,6);\n  if (iStack_14 != -1) {\n    func_26b787c2036149c3(&uStack_a8,0,0x10);\n    uStack_a8 = 2;\n    uStack_a4 = func_70cc6c5a51904e36(&UNK_004015e4);\n    uStack_a6 = func_fa182334bcca40b1(0x6987);\n    iVar1 = func_37f271c8d0d14d43(iStack_14,&uStack_a8,0x10);\n    if (((iVar1 != -1) &&\n        (iStack_24 = func_d19803d39d8848d0(iStack_14,(long)puStack_10 + lStack_20,99 - lStack_20,0),\n        iStack_24 != -1)) && (iStack_24 != 0)) {\n      *(undefined *)((long)puStack_10 + iStack_24 + lStack_20) = 0;\n      puStack_30 = (undefined *)func_ca8222f5fb32403e(puStack_10,0xd);\n      if (puStack_30 != (undefined *)0x0) {\n        *puStack_30 = 0;\n      }\n      puStack_30 = (undefined *)func_ca8222f5fb32403e(puStack_10,10);\n      if (puStack_30 != (undefined *)0x0) {\n        *puStack_30 = 0;\n      }\n    }\n  }\n  if (iStack_14 != -1) {\n    func_464c986c2e24474a(iStack_14);\n  }\n  func_9062c420e6ce489f(puStack_10);\n  return;\n}\n\n",
        "\nvoid func_2b31248cf99d4474(undefined4 *param_1)\n\n{\n  long lVar1;\n  undefined8 *puVar2;\n  undefined8 auStack_198 [50];\n  \n  puVar2 = auStack_198;\n  for (lVar1 = 0x32; lVar1 != 0; lVar1 = lVar1 + -1) {\n    *puVar2 = 0;\n    puVar2 = puVar2 + 1;\n  }\n  func_31525a97d11d4df5(param_1,auStack_198,400);\n  func_e13ba1b9afd74e8c(*param_1);\n  return;\n}\n\n",
        "\nvoid func_fd94a4ec4aa94210(void)\n\n{\n  func_27da5c74d09d4362();\n  return;\n}\n\n",
        "\nvoid func_181d4d332df24725(undefined8 param_1)\n\n{\n  undefined auStack_1a8 [396];\n  undefined4 uStack_1c;\n  undefined8 uStack_10;\n  \n  uStack_10 = param_1;\n  func_1791187fc7804932(auStack_1a8,0x43,99);\n  uStack_1c = 0;\n  func_770faa20c1ba4ce8(uStack_10,auStack_1a8);\n  func_bce38350bf7b4edf(uStack_10);\n  return;\n}\n\n",
        "\nvoid func_fd4134ba187943b7(void)\n\n{\n  func_39d358e8410e4a8f();\n  return;\n}\n\n",
        "\nvoid func_05574a72381c42a6(void)\n\n{\n  undefined4 auStack_108 [52];\n  undefined auStack_38 [16];\n  undefined4 *puStack_28;\n  undefined4 *puStack_10;\n  \n  puStack_28 = auStack_108;\n  auStack_108[0] = 0;\n  puStack_10 = puStack_28;\n  func_ff7818d599d5400a(auStack_38);\n  return;\n}\n\n",
        "\nvoid func_80bdb33fd7fc43c5(void)\n\n{\n  int iVar1;\n  \n  iVar1 = func_f1da950412e440ec();\n  func_8805261fe066471c((long)iVar1);\n  return;\n}\n\n",
        "\nvoid func_f958f816ef804e5a(void)\n\n{\n  func_1e237c1c75e54556();\n  func_aa36880cfa184e4b();\n  return;\n}\n\n",
        "\nvoid func_247be2d100534fb9(void)\n\n{\n  int iVar1;\n  int iStack_9c;\n  undefined8 uStack_98;\n  undefined8 uStack_90;\n  undefined8 uStack_88;\n  undefined8 uStack_80;\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined4 uStack_38;\n  long lStack_28;\n  long lStack_20;\n  undefined8 *puStack_18;\n  int iStack_10;\n  int iStack_c;\n  \n  uStack_98 = 0;\n  uStack_90 = 0;\n  uStack_88 = 0;\n  uStack_80 = 0;\n  uStack_78 = 0;\n  uStack_70 = 0;\n  uStack_68 = 0;\n  uStack_60 = 0;\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  uStack_40 = 0;\n  uStack_38 = 0;\n  puStack_18 = &uStack_98;\n  lStack_20 = func_c6776bafb3964c44(puStack_18);\n  lStack_28 = func_a50e2292192f475f(&UNK_004012dc);\n  if (lStack_28 != 0) {\n    func_f352c0d363844bde((long)puStack_18 + lStack_20,lStack_28,99 - lStack_20);\n  }\n  iVar1 = func_247ecc794522426d(puStack_18,&UNK_004012e0,&iStack_9c);\n  if (iVar1 == 1) {\n    iStack_10 = 0;\n    for (iStack_c = 0; iStack_c < iStack_9c; iStack_c = iStack_c + 1) {\n      iStack_10 = iStack_10 + 1;\n    }\n    func_95d80374e4464c44(iStack_10);\n  }\n  return;\n}\n\n",
        "\nvoid func_441eb20a0eaf4e5c\n               (undefined8 param_1,undefined8 param_2,long param_3)\n\n{\n  undefined4 uVar1;\n  undefined4 **ppuVar2;\n  undefined4 *puStack_28;\n  ulong uStack_20;\n  undefined4 *puStack_18;\n  int iStack_c;\n  \n  puStack_18 = (undefined4 *)0x0;\n  ppuVar2 = &puStack_28;\n  for (iStack_c = 0; iStack_c < 1; iStack_c = iStack_c + 1) {\n    param_3 = 7;\n    puStack_28 = (undefined4 *)((ulong)((long)ppuVar2 + -0x191) & 0xfffffffffffffff0);\n    for (uStack_20 = 0; uStack_20 < 100; uStack_20 = uStack_20 + 1) {\n      param_3 = uStack_20 * 4;\n      puStack_28[uStack_20] = 5;\n    }\n    ppuVar2 = (undefined4 **)((long)ppuVar2 + -0x1a0);\n    puStack_18 = puStack_28;\n  }\n  uVar1 = *puStack_18;\n  *(undefined **)((long)ppuVar2 + -8) = &UNK_00400c1f;\n  func_93ec553074d84a56(uVar1,param_2,param_3);\n  *(undefined **)((long)ppuVar2 + -8) = &UNK_00400c2b;\n  func_f1d5b93cb6544488(puStack_18);\n  return;\n}\n\n",
        "\nvoid func_e825bb1ec9294e7d(undefined8 param_1)\n\n{\n  func_a1562b47cef34a10(param_1);\n  return;\n}\n\n",
        "\nvoid func_eea5a78e8c684f74\n               (undefined8 param_1)\n\n{\n  long lVar1;\n  undefined8 *puVar2;\n  undefined8 uStack_198;\n  undefined8 uStack_190;\n  undefined8 auStack_188 [48];\n  \n  if (CWE134_Uncontrolled_Format_String__wchar_t_environment_snprintf_22_goodB2G2Global != 0) {\n    uStack_198 = 0;\n    uStack_190 = 0;\n    puVar2 = auStack_188;\n    for (lVar1 = 0x30; lVar1 != 0; lVar1 = lVar1 + -1) {\n      *puVar2 = 0;\n      puVar2 = puVar2 + 1;\n    }\n    func_a368107152454a8b(&uStack_198,99,&UNK_0040160c,param_1);\n    func_402581f4e3c444a4(&uStack_198);\n  }\n  return;\n}\n\n",
        "\nvoid func_ac9f0b8de0f742bf\n               (undefined8 param_1)\n\n{\n  func_8806d6da82c34426(param_1);\n  return;\n}\n\n",
        "\nundefined8 func_30d0ea0dd3e24f7a(undefined8 param_1)\n\n{\n  undefined8 uVar1;\n  \n  uVar1 = func_b56afe50290c4286(param_1,4);\n  return uVar1;\n}\n\n",
        "\nvoid func_8ff38556e8d24c4d(void)\n\n{\n  long lVar1;\n  double dVar2;\n  undefined auStack_28 [24];\n  float fStack_10;\n  float fStack_c;\n  \n  fStack_c = 0.0;\n  lVar1 = func_f6f06165eada40a1(auStack_28,0x14,stdin);\n  if (lVar1 == 0) {\n    func_284a21dbcc854bed(&UNK_00401234);\n  }\n  else {\n    dVar2 = (double)func_fbec7a772a904b7b(auStack_28);\n    fStack_c = (float)dVar2;\n  }\n  fStack_10 = fStack_c;\n  func_db019aaa4af4432e(fStack_c);\n  return;\n}\n\n",
        "\nvoid func_8f8bcbd4c70040f9(void)\n\n{\n  undefined auStack_1a8 [396];\n  undefined4 uStack_1c;\n  undefined8 uStack_10;\n  \n  uStack_10 = CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cpy_68_badData;\n  func_c99cf53ea3334f77(auStack_1a8,0x43,99);\n  uStack_1c = 0;\n  func_5914d5c49e684e1d(uStack_10,auStack_1a8);\n  func_1b7555170c3f438b(uStack_10);\n  return;\n}\n\n",
        "\nvoid func_fb9ff5de93e74359(undefined8 param_1)\n\n{\n  func_27f95d18378c4231(param_1);\n  func_9458d03104a941ac(param_1);\n  return;\n}\n\n",
        "\nvoid func_0771ddbf1d4b493e(void)\n\n{\n  func_5ef15bc762374b44();\n  func_d5ef5a26328a49d5();\n  return;\n}\n\n",
        "\nvoid func_96b16541779b4cbe(undefined8 param_1)\n\n{\n  undefined8 uVar1;\n  undefined auStack_78 [99];\n  undefined uStack_15;\n  undefined8 uStack_10;\n  \n  uStack_10 = param_1;\n  func_3803f8fca27a484e(auStack_78,0x43,99);\n  uStack_15 = 0;\n  uVar1 = func_b1b146929c944edb(auStack_78);\n  func_00ef5e23e6164fe9(auStack_78,uStack_10,uVar1);\n  uStack_15 = 0;\n  func_8c8c7426eedd4de9(auStack_78);\n  return;\n}\n\n",
        "\nvoid func_593e248605a6444b\n               (undefined8 *param_1)\n\n{\n  undefined8 uVar1;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined8 uStack_38;\n  undefined8 uStack_30;\n  ushort uStack_28;\n  undefined8 uStack_18;\n  undefined8 *puStack_10;\n  \n  uStack_18 = *param_1;\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  uStack_40 = 0;\n  uStack_38 = 0;\n  uStack_30 = 0;\n  uStack_28 = 0;\n  puStack_10 = param_1;\n  uVar1 = func_2172c8a92b64499a(uStack_18);\n  func_c2d3e6842566409d(&uStack_58,uStack_18,uVar1);\n  uStack_28 = uStack_28 & 0xff;\n  func_8562795f1ef141c5(uStack_18);\n  return;\n}\n\n",
        "\nvoid func_001d1a28d0084dba\n               (undefined4 param_1)\n\n{\n  func_1fa5c9f0794244f3(param_1);\n  return;\n}\n\n",
        "\nvoid func_1f1aeb5be6174b5a(void)\n\n{\n  int iVar1;\n  int iVar2;\n  long lVar3;\n  long lVar4;\n  ulong uStack_30;\n  uint uStack_24;\n  int iStack_20;\n  int iStack_1c;\n  \n  uStack_24 = 0xffffffff;\n  for (iStack_1c = 0; iStack_1c < 1; iStack_1c = iStack_1c + 1) {\n    iVar1 = func_32ef23d84ef945cc();\n    iVar2 = func_32ef23d84ef945cc();\n    uStack_24 = func_32ef23d84ef945cc();\n    uStack_24 = uStack_24 ^ iVar1 << 0x1e ^ iVar2 << 0xf;\n  }\n  for (iStack_20 = 0; iStack_20 < 1; iStack_20 = iStack_20 + 1) {\n    lVar3 = func_49d7d18ab5674068(&UNK_004012d8,&UNK_004012e7);\n    if (lVar3 == 0) {\n      func_49fb3ad04ece4aeb(1);\n    }\n    for (uStack_30 = 0; uStack_30 < (ulong)(long)(int)uStack_24; uStack_30 = uStack_30 + 1) {\n      lVar4 = func_605dca27ac8948e4(&UNK_004012f0,1,0x32,lVar3);\n      if (lVar4 != 0x32) {\n        func_49fb3ad04ece4aeb(1);\n      }\n    }\n    if (lVar3 != 0) {\n      func_a33c26e9fd0f45c5(lVar3);\n    }\n  }\n  return;\n}\n\n",
        "\nvoid func_fb11a028707a4495(undefined8 param_1)\n\n{\n  int iVar1;\n  long lVar2;\n  undefined8 *puVar3;\n  byte bVar4;\n  undefined8 auStack_810 [102];\n  undefined8 auStack_4e0 [51];\n  undefined8 auStack_348 [101];\n  undefined8 *puStack_20;\n  undefined8 *puStack_18;\n  undefined8 *puStack_10;\n  \n  bVar4 = 0;\n  puStack_18 = auStack_4e0;\n  puStack_20 = auStack_810;\n  iVar1 = func_a8583087102c4429(param_1,0x10,7);\n  if (iVar1 == 0) {\n    puStack_10 = puStack_20;\n  }\n  else {\n    puStack_10 = puStack_18;\n  }\n  puVar3 = auStack_348;\n  for (lVar2 = 100; lVar2 != 0; lVar2 = lVar2 + -1) {\n    *puVar3 = 0;\n    puVar3 = puVar3 + (ulong)bVar4 * -2 + 1;\n  }\n  func_ee9cd03aded24ec6(puStack_10,auStack_348,800);\n  func_1ab53556823d43a0(*puStack_10);\n  return;\n}\n\n",
        "\nundefined4\nfunc_04cba14d0ea9420b(undefined4 param_1)\n\n{\n  undefined4 uStack_c;\n  \n  uStack_c = param_1;\n  if (CWE195_Signed_to_Unsigned_Conversion_Error__negative_memcpy_22_badGlobal != 0) {\n    uStack_c = 0xffffffff;\n  }\n  return uStack_c;\n}\n\n",
        "\nvoid func_33bb2018c9ca48d9(void)\n\n{\n  undefined8 uStack_10;\n  \n  uStack_10 = 0;\n  uStack_10 = func_3e5f8fd16bde4125(1,8);\n  func_f31ea20a13e64499(&uStack_10);\n  return;\n}\n\n",
        "\nvoid func_dfc7a09815124277(undefined8 *param_1)\n\n{\n  undefined8 uStack_e8;\n  undefined8 uStack_e0;\n  undefined8 uStack_d8;\n  undefined8 uStack_d0;\n  undefined8 uStack_c8;\n  undefined8 uStack_c0;\n  undefined8 uStack_b8;\n  undefined8 uStack_b0;\n  undefined8 uStack_a8;\n  undefined8 uStack_a0;\n  undefined8 uStack_98;\n  undefined8 uStack_90;\n  undefined8 uStack_88;\n  undefined8 uStack_80;\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined8 uStack_38;\n  undefined8 uStack_30;\n  undefined8 uStack_28;\n  undefined8 uStack_18;\n  undefined8 *puStack_10;\n  \n  uStack_18 = *param_1;\n  uStack_e8 = 0;\n  uStack_e0 = 0;\n  uStack_d8 = 0;\n  uStack_d0 = 0;\n  uStack_c8 = 0;\n  uStack_c0 = 0;\n  uStack_b8 = 0;\n  uStack_b0 = 0;\n  uStack_a8 = 0;\n  uStack_a0 = 0;\n  uStack_98 = 0;\n  uStack_90 = 0;\n  uStack_88 = 0;\n  uStack_80 = 0;\n  uStack_78 = 0;\n  uStack_70 = 0;\n  uStack_68 = 0;\n  uStack_60 = 0;\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  uStack_40 = 0;\n  uStack_38 = 0;\n  uStack_30 = 0;\n  uStack_28 = 0;\n  puStack_10 = param_1;\n  func_9f85c8bf0cb14c3c(&uStack_e8,uStack_18);\n  func_209f66aefeb34c09(uStack_18);\n  return;\n}\n\n",
        "\nvoid func_342f6a7aba374cb6(short param_1)\n\n{\n  func_54ca84ff5c87492e((int)param_1);\n  return;\n}\n\n",
        "\nvoid func_a843b29575964c99(void)\n\n{\n  func_55d22e5189c84c6e(0xffffffff);\n  return;\n}\n\n",
        "\nvoid func_71c2657696584061(long param_1)\n\n{\n  ulong uVar1;\n  ulong uStack_10;\n  \n  uStack_10 = 0;\n  do {\n    uVar1 = func_5e9f9c9f85654f91(param_1);\n    if (uVar1 <= uStack_10) {\ncode_r0x00400d7d:\n      func_7136703e207645ed(param_1);\n      return;\n    }\n    if (*(char *)(uStack_10 + param_1) == 'S') {\n      func_fc1871f136bc4911(&UNK_00401424);\n      goto code_r0x00400d7d;\n    }\n    uStack_10 = uStack_10 + 1;\n  } while( true );\n}\n\n",
        "\nvoid func_ee7f3a87b97d46f7(void)\n\n{\n  func_7b6289d1e117436d();\n  return;\n}\n\n",
        "\nvoid func_aaccf6fb865c42d9\n               (int *param_1,undefined8 param_2)\n\n{\n  int iVar1;\n  \n  iVar1 = *param_1;\n  if (iVar1 == 0) {\n    func_94605f1bd8724e32(&UNK_004014e8);\n  }\n  else {\n    func_fe26d005db9d4081(100 / (long)iVar1 & 0xffffffff,param_2,100 % (long)iVar1 & 0xffffffff);\n  }\n  return;\n}\n\n",
        "\nvoid func_a615a236671e47d8(void)\n\n{\n  func_3b4a30fca638420d(&UNK_00401298);\n  return;\n}\n\n",
        "\nvoid func_207df410fb7941e5(void)\n\n{\n  int iVar1;\n  long lVar2;\n  undefined8 *puVar3;\n  byte bVar4;\n  undefined8 uStack_368;\n  undefined8 uStack_360;\n  undefined8 auStack_358 [48];\n  undefined2 uStack_1d8;\n  undefined2 uStack_1d6;\n  undefined4 uStack_1d4;\n  undefined8 uStack_1c8;\n  undefined8 uStack_1c0;\n  undefined8 auStack_1b8 [49];\n  undefined4 *puStack_30;\n  int iStack_24;\n  long lStack_20;\n  int iStack_14;\n  undefined8 *puStack_10;\n  \n  bVar4 = 0;\n  uStack_1c8 = 0;\n  uStack_1c0 = 0;\n  puVar3 = auStack_1b8;\n  for (lVar2 = 0x30; lVar2 != 0; lVar2 = lVar2 + -1) {\n    *puVar3 = 0;\n    puVar3 = puVar3 + 1;\n  }\n  puStack_10 = &uStack_1c8;\n  iStack_14 = 0xffffffff;\n  lStack_20 = func_a79105cf84f64803(puStack_10);\n  iStack_14 = func_970a7b16ea554d51(2,1,6);\n  if (iStack_14 != -1) {\n    func_3311516c55784cd0(&uStack_1d8,0,0x10);\n    uStack_1d8 = 2;\n    uStack_1d4 = func_710ef05fdb8b4eaf(&UNK_0040161c);\n    uStack_1d6 = func_8744f061a24c4d73(0x6987);\n    iVar1 = func_b0be8512d7814f91(iStack_14,&uStack_1d8,0x10);\n    if (((iVar1 != -1) &&\n        (iStack_24 = func_c7e0f6aaffe14976(iStack_14,lStack_20 * 4 + (long)puStack_10,(99 - lStack_20) * 4\n                                     ,0), iStack_24 != -1)) && (iStack_24 != 0)) {\n      *(undefined4 *)((long)puStack_10 + (lStack_20 + ((ulong)(long)iStack_24 >> 2)) * 4) = 0;\n      puStack_30 = (undefined4 *)func_168bab42415446da(puStack_10,0xd);\n      if (puStack_30 != (undefined4 *)0x0) {\n        *puStack_30 = 0;\n      }\n      puStack_30 = (undefined4 *)func_168bab42415446da(puStack_10,10);\n      if (puStack_30 != (undefined4 *)0x0) {\n        *puStack_30 = 0;\n      }\n    }\n  }\n  if (iStack_14 != -1) {\n    func_58b9884892594d10(iStack_14);\n  }\n  uStack_368 = 0;\n  uStack_360 = 0;\n  puVar3 = auStack_358;\n  for (lVar2 = 0x30; lVar2 != 0; lVar2 = lVar2 + -1) {\n    *puVar3 = 0;\n    puVar3 = puVar3 + (ulong)bVar4 * -2 + 1;\n  }\n  func_e041640614484d6d(&uStack_368,99,puStack_10);\n  func_36169155ec5b4a6b(&uStack_368);\n  return;\n}\n\n",
        "\nvoid func_267396204a724c36(ulong *param_1)\n\n{\n  undefined4 *puVar1;\n  \n  if (*param_1 < 6) {\n    func_6bc7bc8164264fb5(&UNK_00401348);\n  }\n  else {\n    puVar1 = (undefined4 *)func_7578280da4514bc1(*param_1);\n    *puVar1 = 0x6c6c6568;\n    *(undefined2 *)(puVar1 + 1) = 0x6f;\n    func_6bc7bc8164264fb5(puVar1);\n    func_c77b7750a4874224(puVar1);\n  }\n  return;\n}\n\n",
        "\nvoid func_54ba8df2c98b4442(void)\n\n{\n  undefined4 *puVar1;\n  \n  puVar1 = (undefined4 *)func_2c4cdfcc79404326(0);\n  *puVar1 = 1;\n  puVar1[1] = 1;\n  func_379bc3e840d04c28(puVar1);\n  func_00d0b084b6e441f5(puVar1);\n  return;\n}\n\n",
        "\nvoid func_a3adf2cd33094467(short param_1)\n\n{\n  func_b61f4bc3087a41d2((int)param_1);\n  return;\n}\n\n",
        "\nvoid func_9639bc8a49ad42c1(void)\n\n{\n  func_a501e5a007ea4214();\n  return;\n}\n\n",
        "\nvoid func_7c5a677970c74fe7(void)\n\n{\n  func_9d150bdec3b94b7a();\n  return;\n}\n\n",
        "\nvoid func_bdb8f931c5764000(void)\n\n{\n  undefined auStack_e8 [99];\n  undefined uStack_85;\n  undefined8 uStack_78;\n  undefined8 uStack_70;\n  undefined8 uStack_68;\n  undefined8 uStack_60;\n  undefined8 uStack_58;\n  undefined8 uStack_50;\n  undefined8 uStack_48;\n  undefined8 uStack_40;\n  undefined8 uStack_38;\n  undefined8 uStack_30;\n  undefined8 uStack_28;\n  undefined8 uStack_20;\n  undefined4 uStack_18;\n  short sStack_a;\n  \n  sStack_a = 0;\n  sStack_a = func_8911b267f19e46f4(0);\n  uStack_78 = 0;\n  uStack_70 = 0;\n  uStack_68 = 0;\n  uStack_60 = 0;\n  uStack_58 = 0;\n  uStack_50 = 0;\n  uStack_48 = 0;\n  uStack_40 = 0;\n  uStack_38 = 0;\n  uStack_30 = 0;\n  uStack_28 = 0;\n  uStack_20 = 0;\n  uStack_18 = 0;\n  func_9c6f01f1f87d4a27(auStack_e8,0x41,99);\n  uStack_85 = 0;\n  if (sStack_a < 100) {\n    func_13e9e8eaf98d4480(&uStack_78,auStack_e8,(long)sStack_a);\n    *(undefined *)((long)&uStack_78 + (long)(int)sStack_a) = 0;\n  }\n  func_175ef2f9265347e9(&uStack_78);\n  return;\n}\n\n"
    ],
    "pred": [
        "",
        "",
        "",
        "[INST] Analyze",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "[INST] Anal",
        "",
        "",
        "",
        "",
        "[INST] Analyze the code and explain any potential vulnerabilities you find.\nvoid func_f7dad0afcdb84be6(void)\n\n{\n  func_5d86b80",
        "",
        "",
        "",
        "",
        "",
        "[INST] Analyze the code and explain any potential vulnerabilities you find.\nvoid func_f94d6b11d50f44a3(undefined8 param_1)\n\n{\n  long lVar1;\n  undefined8 uVar2;\n  \n  lVar1 = func_05aea6f601d14423(param_1);\n  uVar2 = func_87d7d3e6abdb4505(lVar1 + 1,1);\n  func_cd006247cd214ac8(uVar2,param_1,lVar1 + 1);\n  func_b64351ae0a0349d4(uVar2);\n  func_21071de3fa59438",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "[INST",
        "",
        "",
        "",
        "[INST] Analyze the code and explain any potential vulnerabilities you find.\nvoid func_7ddb2203b4a441f0(void)\n\n{\n  func_c5",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "[INST] Analyze the code and explain",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "Analyze the code and explain any potential vulnerabilities you find.\n/* WARNING: Restarted to delay deadcode elimination for space: stack */\n\nvoid func_e0e07276dd3643ce(void)\n\n{\n  undefined8 uStack_298;\n  undefined8 uStack_290;\n  undefined8 uStack_288;\n  undefined8 uStack_280;\n  undefined8 uStack_278;\n  undefined8 uStack_270;\n  undefined8 uStack_268;\n  undefined8 uStack_260;\n  undefined8 uStack_258;\n  undefined8 uStack_250;\n  undefined8 uStack_248;\n  undefined8 uStack_240;\n  undefined8 uStack_238",
        "",
        "[INST] Analyze the code and explain any potential vulnerabilities you find.\nvoid func_5733e895f",
        "",
        "",
        "",
        "",
        "",
        "",
        "[INST] Analyze",
        "[INST] Analyze the code and explain any potential vulnerabilities you find.\nvoid func_f5fa32f11db54d69(int param_1)\n\n{\n  if ((CWE191_Integer_Underflow__int_connect_socket",
        "",
        "",
        "",
        "",
        "[INST] Analyze the code and explain any potential vulnerabilities you find.\nvoid func_1764537d3db14a6a(void)\n\n{\n  func_",
        "",
        "",
        "",
        "",
        "",
        "[INST] Analyze the code and explain any potential vulnerabilities you find.\nvoid func_904f740",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "[INST] Analyze",
        "",
        "",
        "",
        "[INST] Analyze the code and explain any potential vulnerabilities you find.\nvoid func_7aece23630ea419f(void)\n\n{\n  func_b7743ac",
        "",
        "",
        "",
        "",
        "",
        "",
        "Comment: @user3386109 I'm not sure what you mean. I'm not trying to find a vulnerability, I'm trying to understand the code.\n\nComment: @user3386109 I'm not sure what you mean. I'm not trying to find a vulnerability, I'm trying to understand the code.\n\nComment: @user3386109 I'm not sure what you mean. I'm not trying to find a vulnerability, I'm trying to understand the code.\n\nComment: @user3386109 I'm not sure what you mean. I'm not trying to find a vulnerability, I'm trying to understand the code.\n\nComment: @user3386109 I'm not sure what you mean. I'm not trying to find a vulnerability",
        "",
        "",
        "[INST] Analyze the code and explain any potential vulnerabilities you find.\nvoid func_5ef7833fe8104555(void)\n\n{\n  func_add7ad232e",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "[INST] Anal",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "[INST] Analyze the code and explain any potential vulnerabilities you find.\nvoid func_623f845943a6453a(void)\n\n{\n  func",
        "[INST] Analyze the code and explain",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "[INST] Analyze the code and explain any potential vulnerabilities you find.\nvoid func_37ea328aaa1b4b18(void)\n\n{\n  func_4",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "[INST] Analyze the code and explain any potential vulnerabilities you find.\nvoid func_fc14736d80434589(void)\n\n{\n  func_",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "[INST] Analyze the code and explain any potential vulnerabilities you find.\nvoid func_060865e577c5448e(void)\n\n{\n  func_ed",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "[INST] Analyze the code and explain any potential vulnerabilities you find.\nvoid func_be7f78bf81d74e51(undefined8 *param_1)\n\n{\n  if (CWE690_NULL_Deref_From_Return__char_realloc_22_badGlobal != 0) {\n    *param_1 = 0x696c616974696e49;\n    *(undefined2 *)(param_1 + 1) = 0x657a;\n    *(undefined *)((long)param_1 + 10) = 0;\n    func_c95f704289024942(param_1);\n    func_424868e2b404410b",
        "",
        "",
        "",
        "",
        "",
        "[INST] Analyze the code and explain any potential vulnerabilities you find.\nvoid func_38a4ca505a4449ab(void)\n\n{\n  func_fc3",
        "",
        "",
        "",
        "",
        "",
        "[INST] Analyze",
        "",
        "",
        "",
        "",
        "[INST] Analyze the code and explain any potential vulnerabilities you find.\nvoid func_b34c5ccff8ea41b3(void)\n\n{\n  func_a87ed702731a4769((int)(char)CWE197_Numeric_Truncation_Error__short_connect_socket_68_goodB",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "[INST] Analyze the code and explain any potential",
        "",
        "",
        "",
        "[INST] Analyze the code and explain any potential vulnerabilities you find.\nvoid func_59c71e",
        "[INST] Analyze the code and explain any potential vulnerabilities you find.\nvoid func_0defb1cd9eda4ea1(void)\n\n{\n  func_aa2dfc36136a498a();",
        "",
        "",
        "",
        "[INST] Analyze the code and explain any potential vulnerabilities you find.\nvoid func_f7f2428499134103(void)\n\n{",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "[INST] Analyze the code and explain",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "[INST] Analyze the code and explain any potential vulnerabilities you find.\nvoid func_67c9ccfecc4f4e7e(void)\n\n{\n  func_d29d6dbac8",
        "[INST] Analyze the code and explain any potential vulnerabilities you find.\nvoid func_90f28e2a273e4ada(void)\n\n{\n  func_6c20a",
        "",
        "",
        "",
        "",
        "",
        "[INST] Analyze the code and explain any potential vulnerabilities you find.\nvoid func_e4c32e70dbeb444c(void)\n\n{\n  func_288",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "[INST] Analyze",
        "",
        "",
        "",
        "",
        "",
        "[INST] Analyze the code",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "[INST] Analyze the code and explain any potential vulnerabilities you find.\nvoid func_b52603eb40e0406e(void)\n\n{",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "[INST] Analyze the code and explain any potential vulnerabilities you find.\nvoid func_bc232a5227ba4210(undefined8 param_1)\n\n{\n  int iVar1;\n  int iStack_14;\n  int iStack_10;\n  int iStack_c;\n  \n  if (CWE606_Unchecked_Loop_Condition__wchar_t_environment_22_goodB2G2Global != 0) {\n    iVar1 = func_3bb0999d1801486e(param_1,&UNK_0040152c,&iStack_14);\n    if ((iVar1 == 1) && (iStack_14 < 10000)) {\n      iStack_",
        "",
        "",
        "",
        "",
        "",
        "Comment: @user3121023: I'm not sure what you mean.  The code is in the question.  I'm not sure what you mean by \"analyze the code\".  I'm not sure what you mean by \"explain any potential vulnerabilities\".  I'm not sure what you mean by \"any potential vulnerabilities\".  I'm not sure what you mean by \"vulnerabilities\".  I'm not sure what you mean by \"potential vulnerabilities\".  I'm not sure what you mean by \"vulnerabilities\".  I'm not sure what you mean by \"potential vulnerabilities\".  I'm not sure what you mean by \"vulnerabilities\".  I'm not sure what you mean by \"potential vulnerabilities\".  I'm not sure what you mean by \"vulnerabilities\".  I'm not sure what",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "[INST] Analyze the code and explain any potential vulnerabilities you find.\nvoid func_6ae83831354041fc(void)\n\n{\n  func_9b0aa3",
        "",
        "",
        "[INST] Analyze the code and explain any potential vulnerabilities you find.\nundefined8 * CWE401_Memory_Leak__int64_t_calloc_61b_good",
        "[INST] Analyze the code and explain any potential vulnerabilities you find.\nvoid func_e86dee123a554284(void)\n\n{\n  func_3b3ea69790ca4d18();",
        "",
        "",
        "[INST] Analyze the code and explain any potential vulnerabilities you find.\nvoid func_d710f3b07dc4404c(void)\n\n{\n  func_827ad",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "[INST] Analyze the code and explain any potential vulnerabilities you find.\nvoid func_f3f63aba4ba04d91(void)\n\n{\n  func_3019fdd",
        "",
        "",
        "",
        "",
        "",
        "[INST] Analyze the code and explain any potential vulnerabilities you find.\nvoid func_5ec9fa0f30e04b44(void)\n\n{\n  int local_5ec9fa0f30e04b44;\n  int local_5ec9fa0f30e04b44;\n  int local_5ec9fa0f30e04b44;\n  int local_5ec9fa0f30e04b44;\n  int local_5ec9fa0f30e04b44;\n  int local_5ec9fa0f30e04b44;\n  int local_5ec9fa0f30e04b44;\n  int local_5ec9fa0f30e04b",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "[INST] Analyze the code",
        "",
        "",
        "[INST] Analyze the code and explain any potential vulnerabilities you find.\nvoid func_e2cbde492",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "[INST] Analyze the code and explain any potential vulnerabilities you find.\nvoid func_df192d0295ae452d(void)\n\n{\n  func_07f",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "[INST] Analyze the code and explain any potential vulnerabilities you find.\nvoid func_437bb309970e42ec(void)\n\n{\n  func_fbe69fc",
        "",
        "",
        "[INST] Analyze",
        "",
        "",
        "",
        "",
        "[INST] Analyze the code and explain any potential vulnerabilities you find.\nundefined * CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22_goodG2B1Source(undefined *param_1)\n\n{\n  undefined *puStack_10;\n  \n  puStack_10 = param_1;\n  if (CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22_goodG2B1Global != 0) {\n    puStack_10 = (undefined *)func_6f475ef794494d76(0x32);\n    *puStack_10 = 0;\n  }\n  return puStack_10;",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "[INST] Analyze the code and explain any potential vulnerabilities you find.\nvoid func_f3bc66b4fbc74152(short param_1)\n\n{\n  long lVar1;\n  \n  if (param_1 < 100) {\n    lVar1 = func_60087f6001aa48b0((long)param_1);\n    func_fe27a0e51f8044ec(lVar1,0x41,(long)(param_1 + -1));\n    *(undefined *)(lVar1 + (long)param_1 + -1) = 0;\n    func_76b345ba1d9949ec(lVar1);\n    func_5f10512794df4",
        "",
        "",
        "[INST] Analyze",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "[INST] Analyze",
        "",
        "",
        "",
        "[INST] Analyze the code and explain any potential vulnerabilities you find.\nvoid func_8b33604e3bef4096(void)\n\n{\n  func_",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "[INST] Analyze the code and explain any potential vulnerabilities you find.\nvoid func_be1e7afaa787424a(void)\n\n{\n  func_ee3d1ee554",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "[INST] Analyze the code and explain any potential vulnerabilities you find.\nvoid func_716b76eef64f4eb9(void)\n\n{\n  func_f63cc3",
        "",
        "",
        "",
        "[INST] Analyze the code and explain any potential vulnerabilities you find.\nvoid func_1b0219234129493a(void)",
        "",
        "",
        "",
        "",
        "",
        "[INST] Analyze the code and explain any potential vulnerabilities you find.\nvoid func_fd94a4ec4aa94210(void)\n\n{\n  func_27da5c7",
        "",
        "[INST] Analyze the code and explain any potential vulnerabilities you find.\nvoid func_fd4134ba187943b7(void)\n\n{\n  func_3",
        "",
        "",
        "[INST] Analyze",
        "",
        "",
        "",
        "[INST] Analyze the code and explain any potential vulnerabilities you find.\nvoid func_eea5a78e8c684f74\n               (undefined8 param_1)\n\n{\n  long lVar1;\n  undefined8 *puVar2;\n  undefined8 uStack_198;\n  undefined8 uStack_190;\n  undefined8 auStack_188 [48];\n  \n  if (CWE134_Uncontrolled_Format_String__wchar_t_environment_snprintf_22_goodB2G2Global != 0) {\n    uStack_198 = 0;\n    uStack_190 = 0;\n    puVar2 = auStack_188;\n    for (lVar1 = 0x30; lVar1",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "[INST] Analyze the code and explain any potential vulnerabilities you find.\nvoid func_71c2657696584061(long param_1)\n\n{\n  ulong uVar1;\n  ulong uStack_10;\n  \n  uStack_10 = 0;\n  do {\n    uVar1 = func_5e9f9c9f85654f91(param_1);\n    if (uVar1 <= uStack_10) {\ncode_r0x00400d7d:\n      func_7136703e207645ed(param_1);\n      return;\n    }\n    if (*(char *)(uStack_10 + param_1) == 'S') {\n      func_",
        "[INST] Analyze the code and explain any potential vulnerabilities you find.\nvoid func_7b6289d1e117436d(void)",
        "",
        "[INST] Analyze the code and explain any potential vulnerabilities you find.\nvoid func",
        "",
        "",
        "",
        "[INST] Analyze the code and explain any potential vulnerabilities you find.\nvoid func_a3adf2cd330",
        "[INST] Analyze the code and explain any potential vulnerabilities you find.\nvoid func_a501e5a007ea4214(void)\n\n{\n  func_96",
        "[INST] Analyze the code and explain any potential vulnerabilities you find.\nvoid func_7c5a677970c74fe7(void)\n\n{\n  func_9d",
        ""
    ],
    "gt": [
        "['/* FLAW: Set data pointer to before the allocated memory buffer */', \"/* fill with 'C's */\", '/* null terminate */', '/* POTENTIAL FLAW: Possibly copy from a memory location located before the source buffer */', '/* Ensure null termination */', \"/* INCIDENTAL CWE-401: Memory Leak - data may not point to location\\r\\n         * returned by malloc() so can't safely call free() on it */\"]",
        "['/* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */', \"/* fill with L'A's */\", '/* null terminate */', '/* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */', '/* Ensure the destination buffer is null terminated */']",
        "['/* Read input from a file */', '/* if there is room in data, attempt to read the input from a file */', '/* POTENTIAL FLAW: Read data from a file */', '/* Restore NUL terminator if fgetws fails */']",
        "The code seems to be well-protected against vulnerabilities and security breaches, with no notable issues detected.",
        "['/* Append input from an environment variable to data */', '/* If there is data in the environment variable */', '/* POTENTIAL FLAW: Read data from an environment variable */', '/* true */']",
        "['/* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,\\r\\n             * the sign extension could result in a very large number */', '/* NULL terminate */']",
        "['/* Initialize data */', '/* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,\\r\\n             * the sign conversion could result in a very large number */', '/* strncpy() does not always NULL terminate */']",
        "['/* FLAW: the value pointed to by pointer is undefined */']",
        "No security vulnerabilities or breaches were found during the evaluation of the code.",
        "After thorough analysis, it seems that the code is free from any vulnerabilities or security risks.",
        "The code appears to be secure, with no evident vulnerabilities or potential security breaches.",
        "['/* Copy length + 1 to include NUL terminator from source */', '/* POTENTIAL FLAW: data may not have enough space to hold source */']",
        "After thorough analysis, it seems that the code is free from any vulnerabilities or security risks.",
        "['/* FLAW: Use a small buffer */', \"/* fill with 'A's */\", '/* null terminate */']",
        "['/* FLAW: Initialize memory buffer without checking to see if the memory allocation function failed */']",
        "['/* Initialize data */', '/* POTENTIAL FLAW: Read data using a connect socket */', '/* Abort on error or the connection was closed, make sure to recv one\\r\\n             * less char than is in the recv_buf in order to append a terminator */', '/* NUL-terminate the string */', '/* Convert to int */', '/* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,\\r\\n             * the sign conversion could result in a very large number */', '/* NULL terminate */']",
        "",
        "After thorough analysis, it seems that the code is free from any vulnerabilities or security risks.",
        "['/* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough\\r\\n         * for the wcscpy() function to not cause a buffer overflow */', '/* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */', '/* Copy a small string into myString */']",
        "['/* FLAW: Set data pointer to before the allocated memory buffer */']",
        "From the review conducted, it appears that the code is devoid of any vulnerabilities or security loopholes.",
        "['/* define a function pointer */', '/* Initialize data */', '/* FLAW: Use a random value that could be less than 0 */', '/* use the function pointer */']",
        "No security vulnerabilities or breaches were found during the evaluation of the code.",
        "No security vulnerabilities or breaches were found during the evaluation of the code.",
        "['/* Read input from the console */', '/* if there is room in data, read into it from the console */', '/* POTENTIAL FLAW: Read data from the console */', '/* The next few lines remove the carriage return from the string that is\\r\\n                 * inserted by fgets() */', '/* Restore NUL terminator if fgets fails */', '/* put data in array */']",
        "['/* Read input from the console */', '/* if there is room in data, read into it from the console */', '/* POTENTIAL FLAW: Read data from the console */', '/* The next few lines remove the carriage return from the string that is\\r\\n                     * inserted by fgets() */', '/* Restore NUL terminator if fgets fails */']",
        "[\"/* fill with 'C's */\", '/* null terminate */', '/* POTENTIAL FLAW: Possibly copying data to memory before the destination buffer */', \"/* INCIDENTAL CWE-401: Memory Leak - data may not point to location\\r\\n         * returned by malloc() so can't safely call free() on it */\"]",
        "['/* Initialize data */', '/* POTENTIAL FLAW: Allocate memory without checking if the memory allocation function failed */', '/* FLAW: Initialize memory buffer without checking to see if the memory allocation function failed */']",
        "After thorough analysis, it seems that the code is free from any vulnerabilities or security risks.",
        "[\"/* fill with 'C's */\", '/* null terminate */', '/* POTENTIAL FLAW: Possibly copy from a memory location located before the source buffer */']",
        "['/* FLAW: Use a random value that could be less than 0 */']",
        "[\"/* fill with 'C's */\", '/* null terminate */', '/* POTENTIAL FLAW: Possibly copying data to memory before the destination buffer */', '/* Ensure the destination buffer is null terminated */', \"/* INCIDENTAL CWE-401: Memory Leak - data may not point to location\\r\\n         * returned by malloc() so can't safely call free() on it */\"]",
        "After careful scrutiny, it can be concluded that the code is devoid of any vulnerabilities or potential security threats.",
        "['/* POTENTIAL FLAW: Execute command in data possibly leading to command injection */']",
        "['/* Read input from the console */', '/* if there is room in data, read into it from the console */', '/* POTENTIAL FLAW: Read data from the console */', '/* The next few lines remove the carriage return from the string that is\\r\\n                 * inserted by fgets() */', '/* Restore NUL terminator if fgets fails */', '/* execl - specify the path where the command is located */', '/* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */']",
        "['/* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,\\r\\n             * the sign extension could result in a very large number */', '/* NULL terminate */']",
        "From the review conducted, it appears that the code is devoid of any vulnerabilities or security loopholes.",
        "['/* POTENTIAL FLAW: Attempt to access a negative index of the array\\r\\n         * This check does not check to see if the array index is negative */']",
        "",
        "The code appears to be secure, with no evident vulnerabilities or potential security breaches.",
        "",
        "From the review conducted, it appears that the code is devoid of any vulnerabilities or security loopholes.",
        "There are no apparent vulnerabilities or security breaches present in the analyzed code.",
        "['/* Append input from an environment variable to data */', '/* If there is data in the environment variable */', '/* POTENTIAL FLAW: Read data from an environment variable */', '/* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */']",
        "['/* Initialize data */', '/* POTENTIAL FLAW: Read data from the console using fscanf() */', '/* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,\\r\\n             * the sign conversion could result in a very large number */', '/* NULL terminate */']",
        "After careful scrutiny, it can be concluded that the code is devoid of any vulnerabilities or potential security threats.",
        "['/* Read input from the console */', '/* if there is room in data, read into it from the console */', '/* POTENTIAL FLAW: Read data from the console */', '/* The next few lines remove the carriage return from the string that is\\r\\n                 * inserted by fgets() */', '/* Restore NUL terminator if fgets fails */']",
        "['/* POTENTIAL FLAW: Allocate memory on the heap */', '/* Initialize and make use of data */']",
        "['/* Initialize data */', '/* FLAW: Use a negative number */', '/* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,\\r\\n             * the sign extension could result in a very large number */', '/* NULL terminate */']",
        "After careful scrutiny, it can be concluded that the code is devoid of any vulnerabilities or potential security threats.",
        "['/* POTENTIAL FLAW: Read data using a connect socket */', '/* Abort on error or the connection was closed, make sure to recv one\\r\\n             * less char than is in the recv_buf in order to append a terminator */', '/* Abort on error or the connection was closed */', '/* Append null terminator */', '/* Eliminate CRLF */']",
        "['/* Initialize data */', '/* POTENTIAL FLAW: Allocate memory without checking if the memory allocation function failed */', '/* true */']",
        "['/* FLAW: Set data pointer to before the allocated memory buffer */', \"/* fill with 'C's */\", '/* null terminate */', '/* POTENTIAL FLAW: Possibly copy from a memory location located before the source buffer */', '/* Ensure null termination */']",
        "['/* POTENTIAL FLAW: Read data using a listen socket */', '/* Abort on error or the connection was closed */', '/* Append null terminator */', '/* Eliminate CRLF */', '/* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */']",
        "['/* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */', \"/* fill with L'A's */\", '/* null terminate */', '/* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-wcslen(dest)*/']",
        "After careful scrutiny, it can be concluded that the code is devoid of any vulnerabilities or potential security threats.",
        "No security vulnerabilities or breaches were found during the evaluation of the code.",
        "['/* Initialize data */', '/* POTENTIAL FLAW: Allocate memory without checking if the memory allocation function failed */']",
        "No security vulnerabilities or breaches were found during the evaluation of the code.",
        "['/* Print the initial block pointed to by structCharVoid.voidSecond */', '/* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */', '/* null terminate the string */']",
        "The code seems to be well-protected against vulnerabilities and security breaches, with no notable issues detected.",
        "['/* Initialize data */', '/* FLAW: Use a negative number */', '/* Assume we want to allocate a relatively small buffer */', '/* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,\\r\\n         * the conversion will cause malloc() to allocate a very large amount of data or fail */', '/* Do something with dataBuffer */']",
        "['/* POTENTIAL FLAW: Read data using a connect socket */', '/* Abort on error or the connection was closed, make sure to recv one\\r\\n                 * less char than is in the recv_buf in order to append a terminator */', '/* Abort on error or the connection was closed */', '/* Append null terminator */', '/* Eliminate CRLF */', '/* POTENTIAL FLAW: Execute command in data possibly leading to command injection */']",
        "From the review conducted, it appears that the code is devoid of any vulnerabilities or security loopholes.",
        "[\"/* ensure we won't have an overflow */\", '/* POTENTIAL FLAW: if (data * 2) < INT_MIN, this will underflow */']",
        "['/* copy data out of dataArray */', \"/* fill with 'C's */\", '/* null terminate */', '/* POTENTIAL FLAW: Possible buffer overflow if the size of data is less than the length of source */', '/* Ensure the destination buffer is null terminated */']",
        "['/* POTENTIAL FLAW: Read data using a connect socket */', '/* Abort on error or the connection was closed, make sure to recv one\\r\\n                 * less char than is in the recv_buf in order to append a terminator */', '/* Abort on error or the connection was closed */', '/* Append null terminator */', '/* Eliminate CRLF */']",
        "[\"/* fill with 'C's */\", '/* null terminate */', '/* POTENTIAL FLAW: Possibly copying data to memory before the destination buffer */', '/* Ensure the destination buffer is null terminated */', \"/* INCIDENTAL CWE-401: Memory Leak - data may not point to location\\r\\n         * returned by malloc() so can't safely call free() on it */\"]",
        "From the review conducted, it appears that the code is devoid of any vulnerabilities or security loopholes.",
        "The code seems to be robust and secure, showing no signs of vulnerabilities or security risks.",
        "There are no apparent vulnerabilities or security breaches present in the analyzed code.",
        "The code seems to be robust and secure, showing no signs of vulnerabilities or security risks.",
        "[\"/* fill with 'A's */\", '/* null terminate */', \"/* fill with 'A's */\", '/* null terminate */', '/* FLAW: Set data pointer to a small buffer */']",
        "['/* Initialize data */', '/* INCIDENTAL: CWE-467 (Use of sizeof() on a pointer type) */', '/* FLAW: Using sizeof the pointer and not the data type in malloc() */', '/* POTENTIAL FLAW: Attempt to use data, which may not have enough memory allocated */']",
        "['/* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */']",
        "",
        "No security vulnerabilities or breaches were found during the evaluation of the code.",
        "",
        "['/* Initialize data */', '/* POTENTIAL FLAW: Read data using a listen socket */', '/* Abort on error or the connection was closed */', '/* NUL-terminate the string */', '/* Convert to int */', '/* POTENTIAL FLAW: if data * sizeof(int) > SIZE_MAX, overflows to a small value\\r\\n         * so that the for loop doing the initialization causes a buffer overflow */', '/* Potentially writes beyond the boundary of intPointer */']",
        "['/* Read input from a file */', '/* if there is room in data, attempt to read the input from a file */', '/* POTENTIAL FLAW: Read data from a file */', '/* Restore NUL terminator if fgets fails */']",
        "['/* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */', \"/* fill with 'A's */\", '/* null terminate */']",
        "['/* FLAW: Did not leave space for a null terminator */', '/* Copy length + 1 to include NUL terminator from source */', '/* POTENTIAL FLAW: data may not have enough space to hold source */']",
        "The code seems to be well-protected against vulnerabilities and security breaches, with no notable issues detected.",
        "['/* POTENTIAL FLAW: Read data using a connect socket */', '/* Abort on error or the connection was closed, make sure to recv one\\r\\n             * less char than is in the recv_buf in order to append a terminator */', '/* Abort on error or the connection was closed */', '/* Append null terminator */', '/* Eliminate CRLF */']",
        "There are no apparent vulnerabilities or security breaches present in the analyzed code.",
        "['/* POTENTIAL FLAW: Read data using a listen socket */', '/* Abort on error or the connection was closed */', '/* Append null terminator */', '/* Eliminate CRLF */', '/* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */']",
        "['/* FLAW: Use a small buffer */', \"/* fill with 'A's */\", '/* null terminate */', '/* null terminate */', '/* POTENTIAL FLAW: using length of the dest where data\\r\\n         * could be smaller than dest causing buffer overread */']",
        "['/* FLAW: Set data pointer to before the allocated memory buffer */', \"/* fill with 'C's */\", '/* null terminate */', '/* POTENTIAL FLAW: Possibly copy from a memory location located before the source buffer */', '/* Ensure null termination */', \"/* INCIDENTAL CWE-401: Memory Leak - data may not point to location\\r\\n         * returned by malloc() so can't safely call free() on it */\"]",
        "From the review conducted, it appears that the code is devoid of any vulnerabilities or security loopholes.",
        "['/* Initialize data */', '/* FLAW: data is allocated on the stack and deallocated in the BadSink */', '/* POTENTIAL FLAW: Possibly deallocating memory allocated on the stack */']",
        "['/* FLAW: Did not leave space for a null terminator */', '/* Copy length + 1 to include NUL terminator from source */', '/* POTENTIAL FLAW: data may not have enough space to hold source */']",
        "['/* POTENTIAL FLAW: Attempt to access a negative index of the array\\r\\n        * This code does not check to see if the array index is negative */', '/* Print the array values */']",
        "['/* FLAW: Set data pointer to before the allocated memory buffer */', \"/* fill with 'C's */\", '/* null terminate */', '/* POTENTIAL FLAW: Possibly copy from a memory location located before the source buffer */', '/* Ensure null termination */', \"/* INCIDENTAL CWE-401: Memory Leak - data may not point to location\\r\\n         * returned by malloc() so can't safely call free() on it */\"]",
        "After careful scrutiny, it can be concluded that the code is devoid of any vulnerabilities or potential security threats.",
        "['/* Read input from the console */', '/* if there is room in data, read into it from the console */', '/* POTENTIAL FLAW: Read data from the console */', '/* The next few lines remove the carriage return from the string that is\\r\\n                     * inserted by fgetws() */', '/* Restore NUL terminator if fgetws fails */']",
        "['/* execlp - searches for the location of the command among\\r\\n     * the directories specified by the PATH environment variable */', '/* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */']",
        "['/* Initialize data */', '/* INCIDENTAL: CWE-467 (Use of sizeof() on a pointer type) */', '/* FLAW: Using sizeof the pointer and not the data type in malloc() */', '/* FIX: Using sizeof the data type in malloc() */', '/* POTENTIAL FLAW: Attempt to use data, which may not have enough memory allocated */']",
        "['/* Read input from a file */', '/* if there is room in data, attempt to read the input from a file */', '/* POTENTIAL FLAW: Read data from a file */', '/* Restore NUL terminator if fgets fails */', '/* POTENTIAL FLAW: Execute command in data possibly leading to command injection */']",
        "Upon examination, no vulnerabilities or security breaches were detected in the provided code.",
        "['/* copy data out of dataArray */', '/* FLAW: We are incrementing the pointer in the loop - this will cause us to free the\\r\\n     * memory block not at the start of the buffer */']",
        "['/* true */', '/* Copy length + 1 to include NUL terminator from source */', '/* POTENTIAL FLAW: data may not have enough space to hold source */']",
        "['/* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */', \"/* fill with 0's */\", '/* POTENTIAL FLAW: Possible buffer overflow if data < 100 */']",
        "The code appears to be secure, with no evident vulnerabilities or potential security breaches.",
        "['/* FLAW: Set a pointer to a \"small\" buffer. This buffer will be used in the sinks as a destination\\r\\n         * buffer in various memory copying functions using a \"large\" source buffer. */', '/* null terminate */', \"/* fill with 'C's */\", '/* null terminate */', '/* POTENTIAL FLAW: Possible buffer overflow if the size of data is less than the length of source */', '/* Ensure the destination buffer is null terminated */']",
        "",
        "['/* FLAW: Set data pointer to before the allocated memory buffer */']",
        "There are no apparent vulnerabilities or security breaches present in the analyzed code.",
        "",
        "Upon examination, no vulnerabilities or security breaches were detected in the provided code.",
        "['/* Initialize data */', '/* POTENTIAL FLAW: Read data using a connect socket */', '/* Abort on error or the connection was closed, make sure to recv one\\r\\n             * less char than is in the recv_buf in order to append a terminator */', '/* NUL-terminate the string */', '/* Convert to int */']",
        "No security vulnerabilities or breaches were found during the evaluation of the code.",
        "['/* FLAW: Set data pointer to before the allocated memory buffer */', \"/* fill with 'C's */\", '/* null terminate */', '/* POTENTIAL FLAW: Possibly copying data to memory before the destination buffer */', '/* Ensure the destination buffer is null terminated */']",
        "['/* POTENTIAL FLAW: Read data using a connect socket */', '/* Abort on error or the connection was closed, make sure to recv one\\r\\n                 * less char than is in the recv_buf in order to append a terminator */', '/* Abort on error or the connection was closed */', '/* Append null terminator */', '/* Eliminate CRLF */', \"/* POTENTIAL FLAW: user-supplied value 'n' could lead to very large loop iteration */\", '/* INCIDENTAL: CWE 561: Dead Code - non-avoidable if n <= 0 */', '/* avoid a dead/empty code block issue */']",
        "['/* FLAW: Did not leave space for a null terminator */', '/* Copy length + 1 to include NUL terminator from source */', '/* POTENTIAL FLAW: data may not have enough space to hold source */']",
        "No security vulnerabilities or breaches were found during the evaluation of the code.",
        "['/* Append input from an environment variable to data */', '/* If there is data in the environment variable */', '/* POTENTIAL FLAW: Read data from an environment variable */']",
        "['/* FLAW: Set data pointer to before the allocated memory buffer */']",
        "['/* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */', \"/* fill with L'A's */\", '/* null terminate */']",
        "['/* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */', '/* null terminate */', \"/* fill with L'C's */\", '/* null terminate */', '/* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */', '/* Ensure the destination buffer is null terminated */']",
        "['/* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough\\r\\n         * for the wcscpy() function to not cause a buffer overflow */', '/* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */', '/* Copy a small string into myString */']",
        "",
        "['/* true */', '/* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */', '/* Ensure the destination buffer is null terminated */']",
        "['/* FLAW: Set a pointer to a \"small\" buffer. This buffer will be used in the sinks as a destination\\r\\n         * buffer in various memory copying functions using a \"large\" source buffer. */', \"/* fill with 0's */\", '/* POTENTIAL FLAW: Possible buffer overflow if data < 100 */']",
        "Upon examination, no vulnerabilities or security breaches were detected in the provided code.",
        "There are no apparent vulnerabilities or security breaches present in the analyzed code.",
        "After thorough analysis, it seems that the code is free from any vulnerabilities or security risks.",
        "No security vulnerabilities or breaches were found during the evaluation of the code.",
        "['/* FLAW: Set data pointer to before the allocated memory buffer */', \"/* fill with 'C's */\", '/* null terminate */', '/* POTENTIAL FLAW: Possibly copy from a memory location located before the source buffer */', '/* Ensure null termination */']",
        "['/* Initialize data */', '/* POTENTIAL FLAW: Read data from the console using fgets() */', '/* Convert to int */', '/* true */']",
        "",
        "Based on the assessment, there are no indications of vulnerabilities or security breaches in the code.",
        "['/* FLAW: Do not initialize data */', '/* empty statement needed for some flow variants */', \"/* fill with 'C's */\", '/* null terminate */', '/* POTENTIAL FLAW: If data is not initialized properly, strncat() may not function correctly */']",
        "Based on the assessment, there are no indications of vulnerabilities or security breaches in the code.",
        "['/* Read input from a file */', '/* if there is room in data, attempt to read the input from a file */', '/* POTENTIAL FLAW: Read data from a file */', '/* Restore NUL terminator if fgetws fails */']",
        "['/* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */']",
        "['/* POTENTIAL FLAW: Read data using a connect socket */', '/* Abort on error or the connection was closed, make sure to recv one\\r\\n                 * less char than is in the recv_buf in order to append a terminator */', '/* Abort on error or the connection was closed */', '/* Append null terminator */', '/* Eliminate CRLF */', '/* POTENTIAL FLAW: Execute command in data possibly leading to command injection */']",
        "",
        "The code seems to be robust and secure, showing no signs of vulnerabilities or security risks.",
        "['/* copy data out of dataArray */', '/* FLAW: We are incrementing the pointer in the loop - this will cause us to free the\\r\\n     * memory block not at the start of the buffer */']",
        "['/* Print the initial block pointed to by structCharVoid.voidSecond */', '/* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */', '/* null terminate the string */']",
        "['/* Copy length + 1 to include NUL terminator from source */', '/* POTENTIAL FLAW: data may not have enough space to hold source */']",
        "['/* Initialize data */', '/* POTENTIAL FLAW: Read data from the console using fgets() */', '/* Convert to unsigned int */', '/* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough\\r\\n             * for the strcpy() function to not cause a buffer overflow */', '/* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */', '/* Copy a small string into myString */']",
        "['/* copy data out of dataArray */', '/* POTENTIAL FLAW: Attempt to use data, which may not have enough memory allocated */']",
        "['/* POTENTIAL FLAW: For loop using count as the loop variant and no validation */']",
        "['/* FLAW: Set data pointer to before the allocated memory buffer */', \"/* fill with 'C's */\", '/* null terminate */', '/* POTENTIAL FLAW: Possibly copy from a memory location located before the source buffer */', '/* Ensure null termination */']",
        "['/* null terminate */', '/* POTENTIAL FLAW: using memcpy with the length of the dest where data\\r\\n         * could be smaller than dest causing buffer overread */']",
        "['/* Initialize data */', '/* POTENTIAL FLAW: Allocate memory without checking if the memory allocation function failed */', '/* FLAW: Initialize memory buffer without checking to see if the memory allocation function failed */']",
        "There are no apparent vulnerabilities or security breaches present in the analyzed code.",
        "['/* POTENTIAL FLAW: Read data using a connect socket */', '/* Abort on error or the connection was closed, make sure to recv one\\r\\n                 * less char than is in the recv_buf in order to append a terminator */', '/* Abort on error or the connection was closed */', '/* Append null terminator */', '/* Eliminate CRLF */']",
        "",
        "",
        "",
        "['/* POTENTIAL FLAW: Read data using a listen socket */', '/* Abort on error or the connection was closed */', '/* Append null terminator */', '/* Eliminate CRLF */']",
        "",
        "['/* copy data out of dataArray */', '/* initialize buffer */', '/* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound\\r\\n         * This code does check to see if the array index is negative */', '/* Print the array values */']",
        "Based on the assessment, there are no indications of vulnerabilities or security breaches in the code.",
        "['/* POTENTIAL FLAW: Set data to a random value */']",
        "['/* copy data out of dataArray */', \"/* fill with L'C's */\", '/* null terminate */', '/* POTENTIAL FLAW: Possible buffer overflow if the size of data is less than the length of source */', '/* Ensure the destination buffer is null terminated */']",
        "['/* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,\\r\\n             * the sign extension could result in a very large number */', '/* NULL terminate */']",
        "['/* Initialize data */', '/* FLAW: Use a value input from the console using fscanf() */']",
        "['/* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */', \"/* fill with 'A's */\", '/* null terminate */', '/* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */', '/* Ensure the destination buffer is null terminated */']",
        "['/* Initialize data */', '/* POTENTIAL FLAW: Read data from the console using fgets() */', '/* Convert to int */', \"/* ensure we won't have an overflow */\", '/* POTENTIAL FLAW: if (data * 2) < INT_MIN, this will underflow */']",
        "",
        "",
        "",
        "From the review conducted, it appears that the code is devoid of any vulnerabilities or security loopholes.",
        "",
        "['/* Append input from an environment variable to data */', '/* If there is data in the environment variable */', '/* POTENTIAL FLAW: Read data from an environment variable */', '/* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */']",
        "",
        "",
        "['/* FLAW: Set data pointer to before the allocated memory buffer */', '/* put data in array */']",
        "['/* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */', '/* null terminate */', \"/* fill with 'C's */\", '/* null terminate */', '/* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */', '/* Ensure the destination buffer is null terminated */']",
        "['/* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */', '/* Ensure the destination buffer is null terminated */']",
        "['/* FLAW: Set data pointer to before the allocated memory buffer */', \"/* fill with 'C's */\", '/* null terminate */', '/* POTENTIAL FLAW: Possibly copy from a memory location located before the source buffer */']",
        "The code appears to be secure, with no evident vulnerabilities or potential security breaches.",
        "['/* cast void pointer to a pointer of the appropriate type */', '/* dereference dataPtr into data */', '/* POTENTIAL FLAW: Execute command in data possibly leading to command injection */']",
        "From the review conducted, it appears that the code is devoid of any vulnerabilities or security loopholes.",
        "['/* Copy length + 1 to include NUL terminator from source */', '/* POTENTIAL FLAW: data may not have enough space to hold source */']",
        "After thorough analysis, it seems that the code is free from any vulnerabilities or security risks.",
        "['/* FLAW: Set a pointer to a buffer that does not leave room for a NULL terminator when performing\\r\\n         * string copies in the sinks  */', '/* null terminate */', '/* INCIDENTAL: CWE 561 Dead Code, the code below will never run */', '/* Copy length + 1 to include NUL terminator from source */', '/* POTENTIAL FLAW: data may not have enough space to hold source */']",
        "['/* FLAW: Do not initialize data */', '/* empty statement needed for some flow variants */']",
        "[\"/* fill with L'C's */\", '/* null terminate */', '/* POTENTIAL FLAW: If data is not initialized properly, wcscat() may not function correctly */']",
        "['/* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */', \"/* fill with L'A's */\", '/* null terminate */', '/* FIX: Initialize data as a small buffer that as small or smaller than the small buffer used in the sink */', \"/* fill with L'A's */\", '/* null terminate */', '/* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */', '/* Ensure the destination buffer is null terminated */']",
        "['/* FLAW: Set data pointer to before the allocated memory buffer */', \"/* fill with 'C's */\", '/* null terminate */', '/* POTENTIAL FLAW: Possibly copying data to memory before the destination buffer */', \"/* INCIDENTAL CWE-401: Memory Leak - data may not point to location\\r\\n         * returned by malloc() so can't safely call free() on it */\"]",
        "The code seems to be robust and secure, showing no signs of vulnerabilities or security risks.",
        "['/* Print the initial block pointed to by structCharVoid.voidSecond */', '/* FLAW: Use the sizeof(structCharVoid) which will overwrite the pointer voidSecond */', '/* null terminate the string */']",
        "['/* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */', '/* null terminate */', \"/* fill with L'C's */\", '/* null terminate */', '/* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */']",
        "['/* POTENTIAL FLAW: Possibly deallocating memory allocated on the stack */']",
        "['/* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */', '/* null terminate */']",
        "['/* POTENTIAL FLAW: Read data using a listen socket */', '/* Abort on error or the connection was closed */', '/* Append null terminator */', '/* Eliminate CRLF */', \"/* POTENTIAL FLAW: user-supplied value 'n' could lead to very large loop iteration */\", '/* INCIDENTAL: CWE 561: Dead Code - non-avoidable if n <= 0 */', '/* avoid a dead/empty code block issue */']",
        "['/* Read input from a file */', '/* if there is room in data, attempt to read the input from a file */', '/* POTENTIAL FLAW: Read data from a file */', '/* Restore NUL terminator if fgets fails */', '/* execlp - searches for the location of the command among\\r\\n     * the directories specified by the PATH environment variable */', '/* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */']",
        "['/* POTENTIAL FLAW: Execute command in data possibly leading to command injection */']",
        "['/* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-strlen(dest)*/', '/* Ensure the destination buffer is null terminated */']",
        "['/* Initialize data */', '/* FLAW: Use a value input from the console using fgets() */', '/* Convert to short */', '/* Assume we want to allocate a relatively small buffer */', '/* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,\\r\\n         * the conversion will cause malloc() to allocate a very large amount of data or fail */', '/* Do something with dataBuffer */']",
        "['/* Initialize data */', '/* FLAW: data is allocated on the stack and deallocated in the BadSink */']",
        "['/* Append input from an environment variable to data */', '/* If there is data in the environment variable */', '/* POTENTIAL FLAW: Read data from an environment variable */', '/* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */']",
        "['/* POTENTIAL FLAW: Read data using a connect socket */', '/* Abort on error or the connection was closed, make sure to recv one\\r\\n             * less char than is in the recv_buf in order to append a terminator */', '/* Abort on error or the connection was closed */', '/* Append null terminator */', '/* Eliminate CRLF */', '/* wexeclp - searches for the location of the command among\\r\\n     * the directories specified by the PATH environment variable */', '/* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */']",
        "Based on the assessment, there are no indications of vulnerabilities or security breaches in the code.",
        "['/* FLAW: Initialize memory buffer without checking to see if the memory allocation function failed */']",
        "['/* FLAW: Set a pointer to a \"small\" buffer. This buffer will be used in the sinks as a destination\\r\\n     * buffer in various memory copying functions using a \"large\" source buffer. */', '/* null terminate */']",
        "[\"/* ensure we won't have an underflow */\", '/* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */']",
        "['/* cast void pointer to a pointer of the appropriate type */', '/* dereference dataPtr into data */', '/* POTENTIAL FLAW: Possibly divide by zero */']",
        "['/* FLAW: subtracting the slash pointer from a completely different string, should be slashInString1 - string1 */', '/* print the index of where the slash was found */']",
        "['/* FLAW: Set data to a value that will cause an integer overflow in the call to malloc() in the sink */', '/* 1073741825 */', '/* NOTE: This value will cause the sink to only allocate 4 bytes of memory, however\\r\\n     * the for loop will attempt to access indices 0-1073741824 */']",
        "Upon examination, no vulnerabilities or security breaches were detected in the provided code.",
        "['/* Initialize data */', '/* true */', '/* POTENTIAL FLAW: if data * sizeof(int) > SIZE_MAX, overflows to a small value\\r\\n         * so that the for loop doing the initialization causes a buffer overflow */', '/* Potentially writes beyond the boundary of intPointer */']",
        "The code appears to be secure, with no evident vulnerabilities or potential security breaches.",
        "['/* POTENTIAL FLAW: Allocate memory on the heap */', '/* Initialize and make use of data */', '/* put data in array */']",
        "['/* FLAW: Set a pointer to a \"small\" buffer. This buffer will be used in the sinks as a destination\\r\\n         * buffer in various memory copying functions using a \"large\" source buffer. */', '/* null terminate */', \"/* fill with 'C's */\", '/* null terminate */', '/* POTENTIAL FLAW: Possible buffer overflow if the size of data is less than the length of source */', '/* Ensure the destination buffer is null terminated */']",
        "From the review conducted, it appears that the code is devoid of any vulnerabilities or security loopholes.",
        "From the review conducted, it appears that the code is devoid of any vulnerabilities or security loopholes.",
        "['/* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough\\r\\n         * for the wcscpy() function to not cause a buffer overflow */', '/* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */', '/* Copy a small string into myString */']",
        "After thorough analysis, it seems that the code is free from any vulnerabilities or security risks.",
        "['/* FLAW: Set a pointer to a \"small\" buffer. This buffer will be used in the sinks as a destination\\r\\n         * buffer in various memory copying functions using a \"large\" source buffer. */', \"/* fill with 0's */\", '/* POTENTIAL FLAW: Possible buffer overflow if data < 100 */']",
        "['/* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-strlen(dest)*/']",
        "['/* POTENTIAL FLAW: Convert data to a char, possibly causing a truncation error */']",
        "['/* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */']",
        "['/* null terminate */', '/* POTENTIAL FLAW: using length of the dest where data\\r\\n         * could be smaller than dest causing buffer overread */']",
        "['/* Initialize data */', '/* FLAW: Use a value input from the console using fgets() */', '/* Convert to short */']",
        "['/* Initialize data */', '/* POTENTIAL FLAW: Set data to a random value */']",
        "['/* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */', \"/* fill with 'A's */\", '/* null terminate */']",
        "['/* POTENTIAL FLAW: Read data using a connect socket */', '/* Abort on error or the connection was closed, make sure to recv one\\r\\n                 * less char than is in the recv_buf in order to append a terminator */', '/* Abort on error or the connection was closed */', '/* Append null terminator */', '/* Eliminate CRLF */']",
        "['/* Initialize data */', '/* POTENTIAL FLAW: Read data from the console using fgets() */', '/* Convert to int */']",
        "The code seems to be well-protected against vulnerabilities and security breaches, with no notable issues detected.",
        "['/* define a function pointer */', '/* FLAW: Set data pointer to before the allocated memory buffer */', '/* use the function pointer */']",
        "['/* Initialize data */', '/* POTENTIAL FLAW: Read data using a listen socket */', '/* Abort on error or the connection was closed */', '/* NUL-terminate the string */', '/* Convert to int */']",
        "['/* initialize buffer */', '/* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound\\r\\n         * This code does check to see if the array index is negative */', '/* Print the array values */']",
        "['/* POTENTIAL FLAW: No deallocation */', '/* empty statement needed for some flow variants */']",
        "The code seems to be well-protected against vulnerabilities and security breaches, with no notable issues detected.",
        "['/* Read input from a file */', '/* if there is room in data, attempt to read the input from a file */', '/* POTENTIAL FLAW: Read data from a file */', '/* Restore NUL terminator if fgets fails */', '/* POTENTIAL FLAW: Execute command in data possibly leading to command injection */']",
        "Based on the assessment, there are no indications of vulnerabilities or security breaches in the code.",
        "['/* FLAW: Set a pointer to a buffer that does not leave room for a NULL terminator when performing\\r\\n     * string copies in the sinks  */', '/* null terminate */']",
        "After careful scrutiny, it can be concluded that the code is devoid of any vulnerabilities or potential security threats.",
        "['/* POTENTIAL FLAW: Read data using a listen socket */', '/* Abort on error or the connection was closed */', '/* Append null terminator */', '/* Eliminate CRLF */']",
        "['/* Initialize data */', '/* INCIDENTAL: CWE-467 (Use of sizeof() on a pointer type) */', '/* FLAW: Using sizeof the pointer and not the data type in malloc() */', '/* POTENTIAL FLAW: Attempt to use data, which may not have enough memory allocated */']",
        "No security vulnerabilities or breaches were found during the evaluation of the code.",
        "['/* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */', '/* null terminate */']",
        "['/* define a function pointer */', '/* FLAW: Use a small buffer */', \"/* fill with 'A's */\", '/* null terminate */', '/* use the function pointer */']",
        "['/* Initialize data */', '/* Abort on error or the connection was closed */', '/* FLAW: Use a value input from the network */', '/* NUL-terminate string */', '/* Convert to short - ensure int to short conversion will be successful and if\\r\\n             * not ensure that data will be negative */', '/* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,\\r\\n                 * the sign extension could result in a very large number */', '/* NULL terminate */']",
        "['/* Initialize data */', '/* POTENTIAL FLAW: Read data using a listen socket */', '/* Abort on error or the connection was closed */', '/* NUL-terminate the string */', '/* Convert to int */', \"/* ensure we won't have an underflow */\", '/* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */']",
        "",
        "The code seems to be robust and secure, showing no signs of vulnerabilities or security risks.",
        "['/* POTENTIAL FLAW: Allocate memory on the heap */', '/* Initialize and make use of data */', '/* POTENTIAL FLAW: No deallocation */', '/* empty statement needed for some flow variants */']",
        "After careful scrutiny, it can be concluded that the code is devoid of any vulnerabilities or potential security threats.",
        "['/* Initialize data */', '/* POTENTIAL FLAW: Read data using a listen socket */', '/* Abort on error or the connection was closed */', '/* NUL-terminate the string */', '/* Convert to unsigned int */', '/* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough\\r\\n             * for the strcpy() function to not cause a buffer overflow */', '/* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */', '/* Copy a small string into myString */']",
        "['/* FLAW: Set data pointer to before the allocated memory buffer */', \"/* fill with 'C's */\", '/* null terminate */', '/* POTENTIAL FLAW: Possibly copying data to memory before the destination buffer */', '/* Ensure the destination buffer is null terminated */', \"/* INCIDENTAL CWE-401: Memory Leak - data may not point to location\\r\\n             * returned by malloc() so can't safely call free() on it */\"]",
        "Upon examination, no vulnerabilities or security breaches were detected in the provided code.",
        "After thorough analysis, it seems that the code is free from any vulnerabilities or security risks.",
        "['/* POTENTIAL FLAW: Execute command in data possibly leading to command injection */']",
        "[\"/* fill with 'C's */\", '/* null terminate */', '/* POTENTIAL FLAW: Possibly copy from a memory location located before the source buffer */', '/* Ensure null termination */']",
        "From the review conducted, it appears that the code is devoid of any vulnerabilities or security loopholes.",
        "['/* FLAW: Did not leave space for a null terminator */', '/* Copy length + 1 to include NUL terminator from source */', '/* POTENTIAL FLAW: data may not have enough space to hold source */']",
        "['/* Initialize data */', '/* POTENTIAL FLAW: Read data from the console using fgets() */', '/* Convert to int */', '/* INCIDENTAL: CWE 561 Dead Code, the code below will never run */', '/* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,\\r\\n             * the sign conversion could result in a very large number */', '/* NULL terminate */']",
        "['/* Append input from an environment variable to data */', '/* If there is data in the environment variable */', '/* POTENTIAL FLAW: Read data from an environment variable */', '/* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */']",
        "After careful scrutiny, it can be concluded that the code is devoid of any vulnerabilities or potential security threats.",
        "['/* Initialize data */', '/* FLAW: data is allocated on the stack and deallocated in the BadSink */', \"/* fill with 'A's */\", '/* null terminate */', '/* POTENTIAL FLAW: Possibly deallocating memory allocated on the stack */']",
        "",
        "No security vulnerabilities or breaches were found during the evaluation of the code.",
        "['/* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */', \"/* fill with L'A's */\", '/* null terminate */']",
        "From the review conducted, it appears that the code is devoid of any vulnerabilities or security loopholes.",
        "There are no apparent vulnerabilities or security breaches present in the analyzed code.",
        "['/* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */', \"/* fill with 'A's */\", '/* null terminate */', '/* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */']",
        "['/* FLAW: Set data pointer to before the allocated memory buffer */', \"/* fill with 'C's */\", '/* null terminate */', '/* POTENTIAL FLAW: Possibly copying data to memory before the destination buffer */', '/* Ensure the destination buffer is null terminated */']",
        "No security vulnerabilities or breaches were found during the evaluation of the code.",
        "['/* POTENTIAL FLAW: Execute command in data possibly leading to command injection */']",
        "[\"/* fill with 0's */\", '/* POTENTIAL FLAW: Possible buffer overflow if data < 100 */']",
        "The code seems to be robust and secure, showing no signs of vulnerabilities or security risks.",
        "['/* true */', '/* POTENTIAL FLAW: Possible buffer overflow if data was not allocated correctly in the source */']",
        "['/* FLAW: Set data pointer to before the allocated memory buffer */', \"/* fill with 'C's */\", '/* null terminate */', '/* POTENTIAL FLAW: Possibly copying data to memory before the destination buffer */', '/* Ensure the destination buffer is null terminated */', \"/* INCIDENTAL CWE-401: Memory Leak - data may not point to location\\r\\n             * returned by malloc() so can't safely call free() on it */\"]",
        "['/* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */', '/* null terminate */', \"/* fill with 'C's */\", '/* null terminate */', '/* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */']",
        "['/* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */', \"/* fill with 'A's */\", '/* null terminate */', '/* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */', '/* Ensure the destination buffer is null terminated */']",
        "['/* Initialize data */', '/* POTENTIAL FLAW: Read data from the console using fgets() */', '/* Convert to int */']",
        "The code seems to be well-protected against vulnerabilities and security breaches, with no notable issues detected.",
        "['/* Initialize data */', '/* FLAW: data is allocated on the stack and deallocated in the BadSink */', \"/* fill with 'A's */\", '/* null terminate */', '/* POTENTIAL FLAW: Possibly deallocating memory allocated on the stack */']",
        "['/* POTENTIAL FLAW: Read data using a listen socket */', '/* Abort on error or the connection was closed */', '/* Append null terminator */', '/* Eliminate CRLF */', '/* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */']",
        "",
        "['/* FLAW: Set a pointer to a \"small\" buffer. This buffer will be used in the sinks as a destination\\r\\n     * buffer in various memory copying functions using a \"large\" source buffer. */', '/* null terminate */', \"/* fill with L'C's */\", '/* null terminate */', '/* POTENTIAL FLAW: Possible buffer overflow if the size of data is less than the length of source */']",
        "After careful scrutiny, it can be concluded that the code is devoid of any vulnerabilities or potential security threats.",
        "['/* cast void pointer to a pointer of the appropriate type */', '/* dereference dataPtr into data */', '/* Copy length + 1 to include NUL terminator from source */', '/* POTENTIAL FLAW: data may not have enough space to hold source */']",
        "[\"/* fill with 'C's */\", '/* null terminate */', '/* POTENTIAL FLAW: Possibly copy from a memory location located before the source buffer */', '/* Ensure null termination */']",
        "['/* Initialize data */', '/* FLAW: Use a value input from the console using fgets() */', '/* Convert to short */', '/* put data in array */']",
        "['/* Append input from an environment variable to data */', '/* If there is data in the environment variable */', '/* POTENTIAL FLAW: Read data from an environment variable */', '/* true */']",
        "Based on the assessment, there are no indications of vulnerabilities or security breaches in the code.",
        "From the review conducted, it appears that the code is devoid of any vulnerabilities or security loopholes.",
        "['/* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */', \"/* fill with 'A's */\", '/* null terminate */']",
        "After careful scrutiny, it can be concluded that the code is devoid of any vulnerabilities or potential security threats.",
        "['/* FLAW: Do not initialize data */', '/* empty statement needed for some flow variants */', \"/* fill with 'C's */\", '/* null terminate */', '/* POTENTIAL FLAW: If data is not initialized properly, strncat() may not function correctly */']",
        "",
        "['/* POTENTIAL FLAW: Read data using a connect socket */', '/* Abort on error or the connection was closed, make sure to recv one\\r\\n                 * less char than is in the recv_buf in order to append a terminator */', '/* Abort on error or the connection was closed */', '/* Append null terminator */', '/* Eliminate CRLF */', '/* execlp - searches for the location of the command among\\r\\n     * the directories specified by the PATH environment variable */', '/* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */']",
        "['/* Read input from a file */', '/* if there is room in data, attempt to read the input from a file */', '/* POTENTIAL FLAW: Read data from a file */', '/* Restore NUL terminator if fgets fails */', '/* execlp - searches for the location of the command among\\r\\n         * the directories specified by the PATH environment variable */', '/* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */']",
        "['/* POTENTIAL FLAW: Read data using a listen socket */', '/* Abort on error or the connection was closed */', '/* Append null terminator */', '/* Eliminate CRLF */', '/* POTENTIAL FLAW: Execute command in data possibly leading to command injection */']",
        "There are no apparent vulnerabilities or security breaches present in the analyzed code.",
        "['/* Read input from the console */', '/* if there is room in data, read into it from the console */', '/* POTENTIAL FLAW: Read data from the console */', '/* The next few lines remove the carriage return from the string that is\\r\\n                     * inserted by fgetws() */', '/* Restore NUL terminator if fgetws fails */', '/* POTENTIAL FLAW: Execute command in data possibly leading to command injection */']",
        "[\"/* fill with 'C's */\", '/* null terminate */', '/* POTENTIAL FLAW: Possibly copying data to memory before the destination buffer */', '/* Ensure the destination buffer is null terminated */']",
        "['/* FLAW: Set data pointer to before the allocated memory buffer */', \"/* fill with 'C's */\", '/* null terminate */', '/* POTENTIAL FLAW: Possibly copy from a memory location located before the source buffer */', '/* Ensure null termination */', \"/* INCIDENTAL CWE-401: Memory Leak - data may not point to location\\r\\n         * returned by malloc() so can't safely call free() on it */\"]",
        "['/* By initializing dataBuffer, we ensure this will not be the\\r\\n             * CWE 690 (Unchecked Return Value To NULL Pointer) flaw for fgets() and other variants */', '/* FLAW: Incorrectly check the return value: if this function failed it will return NULL,\\r\\n             * but we are checking to see if the return value is less than 0. */', '/* By initializing dataBuffer, we ensure this will not be the\\r\\n             * CWE 690 (Unchecked Return Value To NULL Pointer) flaw for fgets() and other variants */', '/* FIX: check for the correct return value */']",
        "['/* FLAW: Set a pointer to a buffer that does not leave room for a NULL terminator when performing\\r\\n         * string copies in the sinks  */', '/* null terminate */', '/* Copy length + 1 to include NUL terminator from source */', '/* POTENTIAL FLAW: data may not have enough space to hold source */']",
        "The code seems to be well-protected against vulnerabilities and security breaches, with no notable issues detected.",
        "['/* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */', \"/* fill with 'A's */\", '/* null terminate */', '/* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */', '/* Ensure the destination buffer is null terminated */']",
        "No security vulnerabilities or breaches were found during the evaluation of the code.",
        "The code seems to be robust and secure, showing no signs of vulnerabilities or security risks.",
        "",
        "['/* define a function pointer */', '/* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */', '/* null terminate */', '/* use the function pointer */']",
        "['/* POTENTIAL FLAW: Subtracting 1 from data could cause an underflow */']",
        "['/* Initialize data */', '/* Abort on error or the connection was closed */', '/* FLAW: Use a value input from the network */', '/* NUL-terminate string */', '/* Convert to short - ensure int to short conversion will be successful and if\\r\\n             * not ensure that data will be negative */', '/* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,\\r\\n             * the sign extension could result in a very large number */', '/* NULL terminate */']",
        "['/* wexeclp - searches for the location of the command among\\r\\n     * the directories specified by the PATH environment variable */', '/* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */']",
        "['/* Initialize data */', '/* POTENTIAL FLAW: Read data from the console using fgets() */', '/* Convert to int */', '/* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,\\r\\n             * the sign conversion could result in a very large number */', '/* NULL terminate */']",
        "['/* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */', \"/* fill with L'A's */\", '/* null terminate */', '/* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */', '/* Ensure the destination buffer is null terminated */']",
        "",
        "['/* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-strlen(dest)*/']",
        "['/* Append input from an environment variable to data */', '/* If there is data in the environment variable */', '/* POTENTIAL FLAW: Read data from an environment variable */']",
        "['/* FLAW: Set a pointer to a buffer that does not leave room for a NULL terminator when performing\\r\\n         * string copies in the sinks  */', '/* null terminate */', '/* INCIDENTAL: CWE 561 Dead Code, the code below will never run */', '/* Copy length + 1 to include NUL terminator from source */', '/* POTENTIAL FLAW: data may not have enough space to hold source */']",
        "['/* POTENTIAL FLAW: Read data using a listen socket */', '/* Abort on error or the connection was closed */', '/* Append null terminator */', '/* Eliminate CRLF */']",
        "['/* Copy length + 1 to include NUL terminator from source */', '/* POTENTIAL FLAW: data may not have enough space to hold source */']",
        "The code seems to be well-protected against vulnerabilities and security breaches, with no notable issues detected.",
        "The code seems to be well-protected against vulnerabilities and security breaches, with no notable issues detected.",
        "['/* Initialize count */', '/* POTENTIAL FLAW: Read count using a connect socket */', '/* Abort on error or the connection was closed, make sure to recv one\\r\\n                 * less char than is in the recv_buf in order to append a terminator */', '/* NUL-terminate the string */', '/* Convert to int */', '/* POTENTIAL FLAW: For loop using count as the loop variant and no validation\\r\\n             * This can cause a file to become very large */']",
        "['/* POTENTIAL FLAW: Allocate memory on the heap */', '/* Initialize and make use of data */']",
        "Based on the assessment, there are no indications of vulnerabilities or security breaches in the code.",
        "['/* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */', '/* null terminate */', \"/* fill with L'C's */\", '/* null terminate */', '/* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */', '/* Ensure the destination buffer is null terminated */']",
        "['/* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */']",
        "The code seems to be well-protected against vulnerabilities and security breaches, with no notable issues detected.",
        "['/* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */', \"/* fill with L'A's */\", '/* null terminate */', '/* put data in array */']",
        "['/* FLAW: Use a small buffer */', \"/* fill with 'A's */\", '/* null terminate */', '/* null terminate */', '/* POTENTIAL FLAW: using memcpy with the length of the dest where data\\r\\n             * could be smaller than dest causing buffer overread */']",
        "['/* FLAW: Set a pointer to a buffer that does not leave room for a NULL terminator when performing\\r\\n         * string copies in the sinks  */', '/* null terminate */', '/* Copy length + 1 to include NUL terminator from source */', '/* POTENTIAL FLAW: data may not have enough space to hold source */']",
        "['/* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */', \"/* fill with 'A's */\", '/* null terminate */', '/* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */']",
        "[\"/* fill with 'A's */\", '/* null terminate */', \"/* fill with 'A's */\", '/* null terminate */', '/* FLAW: Set data pointer to a small buffer */', '/* null terminate */', '/* POTENTIAL FLAW: using memmove with the length of the dest where data\\r\\n         * could be smaller than dest causing buffer overread */']",
        "['/* Initialize data */', '/* POTENTIAL FLAW: Read data using a connect socket */', '/* Abort on error or the connection was closed, make sure to recv one\\r\\n             * less char than is in the recv_buf in order to append a terminator */', '/* NUL-terminate the string */', '/* Convert to int */', '/* true */']",
        "['/* FLAW: Using sizeof the pointer and not the data type in malloc() */']",
        "After careful scrutiny, it can be concluded that the code is devoid of any vulnerabilities or potential security threats.",
        "There are no apparent vulnerabilities or security breaches present in the analyzed code.",
        "['/* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */', '/* null terminate */', '/* FIX: Allocate and point data to a large buffer that is at least as large as the large buffer used in the sink */', '/* null terminate */', \"/* fill with L'C's */\", '/* null terminate */', '/* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */', '/* Ensure the destination buffer is null terminated */']",
        "['/* FLAW: Set a pointer to a \"small\" buffer. This buffer will be used in the sinks as a destination\\r\\n     * buffer in various memory copying functions using a \"large\" source buffer. */', '/* null terminate */', \"/* fill with L'C's */\", '/* null terminate */', '/* POTENTIAL FLAW: Possible buffer overflow if the size of data is less than the length of source */', '/* Ensure the destination buffer is null terminated */']",
        "[\"/* fill with 'A's */\", '/* null terminate */', \"/* fill with 'A's */\", '/* null terminate */', '/* FLAW: Set data pointer to a small buffer */']",
        "",
        "No security vulnerabilities or breaches were found during the evaluation of the code.",
        "['/* Initialize data */', '/* wcsncpy() does not null terminate if the string in the src buffer is larger than\\r\\n             * the number of characters being copied to the dest buffer */', '/* FLAW: do not explicitly null terminate dest after the use of wcsncpy() */']",
        "['/* FLAW: Allocate memory without using sizeof(int) */']",
        "There are no apparent vulnerabilities or security breaches present in the analyzed code.",
        "Upon examination, no vulnerabilities or security breaches were detected in the provided code.",
        "['/* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */', \"/* fill with 'A's */\", '/* null terminate */']",
        "['/* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */', '/* null terminate */', \"/* fill with 'C's */\", '/* null terminate */', '/* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */', '/* Ensure the destination buffer is null terminated */']",
        "['/* Read input from the console */', '/* if there is room in data, read into it from the console */', '/* POTENTIAL FLAW: Read data from the console */', '/* The next few lines remove the carriage return from the string that is\\r\\n                     * inserted by fgets() */', '/* Restore NUL terminator if fgets fails */', '/* POTENTIAL FLAW: Execute command in data possibly leading to command injection */']",
        "['/* Copy length + 1 to include NUL terminator from source */', '/* POTENTIAL FLAW: data may not have enough space to hold source */']",
        "The code appears to be secure, with no evident vulnerabilities or potential security breaches.",
        "No security vulnerabilities or breaches were found during the evaluation of the code.",
        "The code appears to be secure, with no evident vulnerabilities or potential security breaches.",
        "['/* FLAW: Set data pointer to before the allocated memory buffer */']",
        "['/* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound\\r\\n        * This code does check to see if the array index is negative */', '/* Print the array values */']",
        "['/* FLAW: Set data pointer to before the allocated memory buffer */', \"/* fill with 'C's */\", '/* null terminate */', '/* POTENTIAL FLAW: Possibly copying data to memory before the destination buffer */', '/* Ensure the destination buffer is null terminated */']",
        "[\"/* fill with 'A's */\", '/* null terminate */', \"/* fill with 'A's */\", '/* null terminate */', '/* FLAW: Set data pointer to a small buffer */']",
        "['/* FLAW: Copy overlapping memory regions using memcpy() for which the result is undefined */', '/* INCIDENTAL: CWE 561 Dead Code, the code below will never run */']",
        "['/* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,\\r\\n             * the sign conversion could result in a very large number */', '/* NULL terminate */']",
        "['/* Initialize data */', '/* POTENTIAL FLAW: if (data*data) > INT_MAX, this will overflow */']",
        "['/* POTENTIAL FLAW: Read data using a listen socket */', '/* Abort on error or the connection was closed */', '/* Append null terminator */', '/* Eliminate CRLF */', '/* FIX: Use a fixed string that does not contain a format specifier */', '/* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */', '/* FIX: Specify the format disallowing a format string vulnerability */']",
        "['/* Initialize data */', '/* wcsncpy() does not null terminate if the string in the src buffer is larger than\\r\\n             * the number of characters being copied to the dest buffer */', '/* FLAW: do not explicitly null terminate dest after the use of wcsncpy() */']",
        "['/* FLAW: We are incrementing the pointer in the loop - this will cause us to free the\\r\\n     * memory block not at the start of the buffer */']",
        "['/* Initialize data */', '/* POTENTIAL FLAW: Read data using a listen socket */', '/* Abort on error or the connection was closed */', '/* NUL-terminate the string */', '/* Convert to int */']",
        "['/* FLAW: Set data pointer to before the allocated memory buffer */']",
        "['/* cast void pointer to a pointer of the appropriate type */', '/* dereference dataPtr into data */', \"/* fill with 0's */\", '/* POTENTIAL FLAW: Possible buffer overflow if data < 100 */']",
        "['/* Initialize data */', '/* POTENTIAL FLAW: Read data using a connect socket */', '/* Abort on error or the connection was closed, make sure to recv one\\r\\n                 * less char than is in the recv_buf in order to append a terminator */', '/* NUL-terminate the string */', '/* Convert to int */', '/* POTENTIAL FLAW: Adding 1 to data could cause an overflow */']",
        "['/* Initialize data */', '/* POTENTIAL FLAW: Read data using a connect socket */', '/* Abort on error or the connection was closed, make sure to recv one\\r\\n             * less char than is in the recv_buf in order to append a terminator */', '/* NUL-terminate the string */', '/* Convert to int */']",
        "The code seems to be well-protected against vulnerabilities and security breaches, with no notable issues detected.",
        "['/* FLAW: Set data pointer to before the allocated memory buffer */', \"/* fill with 'C's */\", '/* null terminate */', '/* POTENTIAL FLAW: Possibly copying data to memory before the destination buffer */', '/* Ensure the destination buffer is null terminated */']",
        "['/* Initialize data */', '/* POTENTIAL FLAW: Read data using a connect socket */', '/* Abort on error or the connection was closed, make sure to recv one\\r\\n                 * less char than is in the recv_buf in order to append a terminator */', '/* NUL-terminate the string */', '/* Convert to int */', \"/* ensure we won't have an underflow */\", '/* POTENTIAL FLAW: if (data*2) > INT_MAX, this will overflow */']",
        "['/* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */']",
        "[\"/* POTENTIAL FLAW: Don't initialize data */\", '/* empty statement needed for some flow variants */', '/* POTENTIAL FLAW: Use data without initializing it */']",
        "['/* cast void pointer to a pointer of the appropriate type */', '/* dereference dataPtr into data */', \"/* fill with 'C's */\", '/* null terminate */', '/* POTENTIAL FLAW: Possibly copying data to memory before the destination buffer */', '/* Ensure the destination buffer is null terminated */']",
        "['/* Initialize data */', '/* POTENTIAL FLAW: Read data from the console using fgets() */', '/* Convert to int */', '/* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,\\r\\n             * the sign conversion could result in a very large number */', '/* NULL terminate */']",
        "After careful scrutiny, it can be concluded that the code is devoid of any vulnerabilities or potential security threats.",
        "['/* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */', \"/* fill with L'A's */\", '/* null terminate */', '/* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */']",
        "After thorough analysis, it seems that the code is free from any vulnerabilities or security risks.",
        "['/* Initialize data */', '/* POTENTIAL FLAW: Read data using a connect socket */', '/* Abort on error or the connection was closed, make sure to recv one\\r\\n                 * less char than is in the recv_buf in order to append a terminator */', '/* NUL-terminate the string */', '/* Convert to int */', '/* POTENTIAL FLAW: Possibly divide by zero */']",
        "['/* Initialize data */', '/* INCIDENTAL: CWE-467 (Use of sizeof() on a pointer type) */', '/* FLAW: Using sizeof the pointer and not the data type in malloc() */']",
        "['/* Initialize data */', '/* POTENTIAL FLAW: Set data to a random value */', '/* Assume we want to allocate a relatively small buffer */', '/* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,\\r\\n         * the conversion will cause malloc() to allocate a very large amount of data or fail */', '/* Do something with dataBuffer */']",
        "",
        "['/* Initialize data */', '/* POTENTIAL FLAW: Allocate memory without checking if the memory allocation function failed */', '/* FLAW: Initialize memory buffer without checking to see if the memory allocation function failed */']",
        "['/* Assume we want to allocate a relatively small buffer */', '/* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,\\r\\n         * the conversion will cause malloc() to allocate a very large amount of data or fail */', '/* Do something with dataBuffer */']",
        "['/* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */', '/* null terminate */', \"/* fill with L'C's */\", '/* null terminate */', '/* POTENTIAL FLAW: Possible buffer overflow if source is larger than data */', '/* Ensure the destination buffer is null terminated */']",
        "The code seems to be well-protected against vulnerabilities and security breaches, with no notable issues detected.",
        "['/* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */', \"/* fill with 0's */\", '/* POTENTIAL FLAW: Possible buffer overflow if data < 100 */']",
        "From the review conducted, it appears that the code is devoid of any vulnerabilities or security loopholes.",
        "Based on the assessment, there are no indications of vulnerabilities or security breaches in the code.",
        "['/* FLAW: Allocate memory without using sizeof(int) */']",
        "['/* Print the initial block pointed to by structCharVoid->voidSecond */', '/* FLAW: Use the sizeof(*structCharVoid) which will overwrite the pointer y */', '/* null terminate the string */']",
        "['/* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */', '/* Use data */', '/* POTENTIAL FLAW: No deallocation of memory */', '/* no deallocation */', '/* empty statement needed for some flow variants */']",
        "From the review conducted, it appears that the code is devoid of any vulnerabilities or security loopholes.",
        "['/* FLAW: Allocate and point data to a small buffer that is smaller than the large buffer used in the sinks */', '/* null terminate */']",
        "['/* Initialize count */', '/* POTENTIAL FLAW: Read count using a listen socket */', '/* Abort on error or the connection was closed */', '/* NUL-terminate the string */', '/* Convert to int */']",
        "['/* Initialize data */', '/* POTENTIAL FLAW: Read data using a listen socket */', '/* Abort on error or the connection was closed */', '/* NUL-terminate the string */', '/* Convert to unsigned int */', '/* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough\\r\\n         * for the strcpy() function to not cause a buffer overflow */', '/* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */', '/* Copy a small string into myString */']",
        "['/* cast void pointer to a pointer of the appropriate type */', '/* dereference dataPtr into data */', \"/* POTENTIAL FLAW: user-supplied value 'n' could lead to very large loop iteration */\", '/* INCIDENTAL: CWE 561: Dead Code - non-avoidable if n <= 0 */', '/* avoid a dead/empty code block issue */']",
        "['/* POTENTIAL FLAW: Read data using a listen socket */', '/* Abort on error or the connection was closed */', '/* Append null terminator */', '/* Eliminate CRLF */']",
        "From the review conducted, it appears that the code is devoid of any vulnerabilities or security loopholes.",
        "['/* POTENTIAL FLAW: Read data using a listen socket */', '/* Abort on error or the connection was closed */', '/* Append null terminator */', '/* Eliminate CRLF */']",
        "The code seems to be robust and secure, showing no signs of vulnerabilities or security risks.",
        "['/* Initialize data */', '/* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,\\r\\n             * the sign extension could result in a very large number */', '/* NULL terminate */']",
        "['/* Assume we want to allocate a relatively small buffer */', '/* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,\\r\\n         * the conversion will cause malloc() to allocate a very large amount of data or fail */', '/* Do something with dataBuffer */']",
        "There are no apparent vulnerabilities or security breaches present in the analyzed code.",
        "",
        "The code seems to be robust and secure, showing no signs of vulnerabilities or security risks.",
        "['/* POTENTIAL FLAW: Read data using a connect socket */', '/* Abort on error or the connection was closed, make sure to recv one\\r\\n                 * less char than is in the recv_buf in order to append a terminator */', '/* Abort on error or the connection was closed */', '/* Append null terminator */', '/* Eliminate CRLF */', \"/* POTENTIAL FLAW: user-supplied value 'n' could lead to very large loop iteration */\", '/* INCIDENTAL: CWE 561: Dead Code - non-avoidable if n <= 0 */', '/* avoid a dead/empty code block issue */']",
        "['/* Establish that this is a temporary file and that it should be deleted */', \"/* FLAW: We don't unlink */\"]",
        "['/* POTENTIAL FLAW: Read data using a listen socket */', '/* Abort on error or the connection was closed */', '/* Append null terminator */', '/* Eliminate CRLF */', '/* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */']",
        "['/* Read input from a file */', '/* if there is room in data, attempt to read the input from a file */', '/* POTENTIAL FLAW: Read data from a file */', '/* Restore NUL terminator if fgetws fails */', '/* wexeclp - searches for the location of the command among\\r\\n     * the directories specified by the PATH environment variable */', '/* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */']",
        "From the review conducted, it appears that the code is devoid of any vulnerabilities or security loopholes.",
        "['/* Initialize data */', '/* POTENTIAL FLAW: Read data using a connect socket */', '/* Abort on error or the connection was closed, make sure to recv one\\r\\n                 * less char than is in the recv_buf in order to append a terminator */', '/* NUL-terminate the string */', '/* Convert to int */', '/* initialize buffer */', '/* POTENTIAL FLAW: Attempt to write to an index of the array that is above the upper bound\\r\\n             * This code does check to see if the array index is negative */', '/* Print the array values */']",
        "['/* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,\\r\\n             * the sign extension could result in a very large number */', '/* strncpy() does not always NULL terminate */']",
        "['/* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */', '/* Ensure the destination buffer is null terminated */']",
        "['/* Initialize data */', '/* FLAW: Use a value input from the console using fscanf() */']",
        "['/* POTENTIAL FLAW: For loop using count as the loop variant and no validation\\r\\n         * This can cause a file to become very large */']",
        "['/* FLAW: Set data pointer to before the allocated memory buffer */', \"/* fill with 'C's */\", '/* null terminate */', '/* POTENTIAL FLAW: Possibly copying data to memory before the destination buffer */', \"/* INCIDENTAL CWE-401: Memory Leak - data may not point to location\\r\\n         * returned by malloc() so can't safely call free() on it */\"]",
        "The code appears to be secure, with no evident vulnerabilities or potential security breaches.",
        "['/* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */', \"/* fill with 'A's */\", '/* null terminate */', '/* POTENTIAL FLAW: Possible buffer overflow if data is larger than dest */']",
        "['/* copy data out of dataArray */', '/* POTENTIAL FLAW: Convert data to a short, possibly causing a truncation error */']",
        "The code seems to be robust and secure, showing no signs of vulnerabilities or security risks.",
        "['/* POTENTIAL FLAW: Read data using a listen socket */', '/* Abort on error or the connection was closed */', '/* Append null terminator */', '/* Eliminate CRLF */']",
        "['/* Initialize data */', '/* POTENTIAL FLAW: Allocate memory without checking if the memory allocation function failed */', '/* FLAW: Initialize memory buffer without checking to see if the memory allocation function failed */']",
        "Upon examination, no vulnerabilities or security breaches were detected in the provided code.",
        "['/* Initialize data */', '/* FLAW: Use a value input from the console using fgets() */', '/* Convert to short */', '/* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,\\r\\n             * the sign extension could result in a very large number */', '/* NULL terminate */']",
        "From the review conducted, it appears that the code is devoid of any vulnerabilities or security loopholes.",
        "['/* Initialize data */', '/* FLAW: data is allocated on the stack and deallocated in the BadSink */', \"/* fill with 'A's */\", '/* null terminate */', '/* POTENTIAL FLAW: Possibly deallocating memory allocated on the stack */']",
        "The code seems to be robust and secure, showing no signs of vulnerabilities or security risks.",
        "After thorough analysis, it seems that the code is free from any vulnerabilities or security risks.",
        "['/* POTENTIAL FLAW: Possibly deallocating memory allocated on the stack */']",
        "The code appears to be secure, with no evident vulnerabilities or potential security breaches.",
        "['/* POTENTIAL FLAW: Set a new environment variable with a path that is possibly insecure */']",
        "['/* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */', \"/* fill with L'A's */\", '/* null terminate */']",
        "[\"/* fill with L'C's */\", '/* null terminate */', '/* POTENTIAL FLAW: Possible buffer overflow if source is larger than sizeof(data)-strlen(data) */']",
        "['/* FLAW: Set a pointer to a buffer that does not leave room for a NULL terminator when performing\\r\\n         * string copies in the sinks  */', '/* null terminate */', '/* Copy length + 1 to include NUL terminator from source */', '/* POTENTIAL FLAW: data may not have enough space to hold source */']",
        "From the review conducted, it appears that the code is devoid of any vulnerabilities or security loopholes.",
        "The code appears to be secure, with no evident vulnerabilities or potential security breaches.",
        "['/* Read input from a file */', '/* if there is room in data, attempt to read the input from a file */', '/* POTENTIAL FLAW: Read data from a file */', '/* Restore NUL terminator if fgets fails */', '/* FIX: Use a fixed string that does not contain a format specifier */', '/* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */', '/* FIX: Specify the format disallowing a format string vulnerability */']",
        "The code appears to be secure, with no evident vulnerabilities or potential security breaches.",
        "['/* Append input from an environment variable to data */', '/* If there is data in the environment variable */', '/* POTENTIAL FLAW: Read data from an environment variable */', \"/* POTENTIAL FLAW: user-supplied value 'n' could lead to very large loop iteration */\", '/* INCIDENTAL: CWE 561: Dead Code - non-avoidable if n <= 0 */', '/* avoid a dead/empty code block issue */']",
        "['/* Copy length + 1 to include NUL terminator from source */', '/* POTENTIAL FLAW: data may not have enough space to hold source */']",
        "['/* POTENTIAL FLAW: if data * sizeof(int) > SIZE_MAX, overflows to a small value\\r\\n         * so that the for loop doing the initialization causes a buffer overflow */', '/* Potentially writes beyond the boundary of intPointer */']",
        "['/* FLAW: Initialize data as a large buffer that is larger than the small buffer used in the sink */', \"/* fill with 'A's */\", '/* null terminate */']",
        "['/* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */', '/* Use data */', '/* put data in array */']",
        "['/* Initialize data */', '/* FLAW: Use a random value that could be less than 0 */', '/* Assume we want to allocate a relatively small buffer */', '/* POTENTIAL FLAW: malloc() takes a size_t (unsigned int) as input and therefore if it is negative,\\r\\n         * the conversion will cause malloc() to allocate a very large amount of data or fail */', '/* Do something with dataBuffer */']",
        "['/* Initialize data */', '/* POTENTIAL FLAW: if data * sizeof(int) > SIZE_MAX, overflows to a small value\\r\\n         * so that the for loop doing the initialization causes a buffer overflow */', '/* Potentially writes beyond the boundary of intPointer */']",
        "['/* FLAW: Use a small buffer */', \"/* fill with 'A's */\", '/* null terminate */', '/* null terminate */', '/* POTENTIAL FLAW: using memmove with the length of the dest where data\\r\\n         * could be smaller than dest causing buffer overread */']",
        "['/* Initialize data */', '/* FLAW: Use a negative number */']",
        "['/* FLAW: the value pointed to by pointer is undefined */']",
        "Based on the assessment, there are no indications of vulnerabilities or security breaches in the code.",
        "['/* FLAW: Do not initialize data */', '/* empty statement needed for some flow variants */', \"/* fill with 'C's */\", '/* null terminate */', '/* POTENTIAL FLAW: If data is not initialized properly, strncat() may not function correctly */']",
        "['/* Initialize data */', '/* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,\\r\\n             * the sign conversion could result in a very large number */', '/* NULL terminate */']",
        "['/* FLAW: Set data pointer to before the allocated memory buffer */', \"/* fill with 'C's */\", '/* null terminate */', '/* POTENTIAL FLAW: Possibly copy from a memory location located before the source buffer */', '/* Ensure null termination */']",
        "After thorough analysis, it seems that the code is free from any vulnerabilities or security risks.",
        "['/* This simulates a Microsoft-style linked list insertion */', '/* POTENTIAL FLAW: The following removes \\'a\\' from the list.  Because of the possible overflow this\\r\\n     * causes a \"write-what-where\" aka \"write4\".  It does another write as\\r\\n     * well.  But this is the prototypical \"write-what-where\" at least from\\r\\n     * the Windows perspective.\\r\\n     *\\r\\n     * linkedListPrev = a->list->prev  WHAT\\r\\n     * linkedListNext = a->list->next  WHERE\\r\\n     * linkedListPrev->next = linkedListNext  \"at the address that prev/WHERE points, write\\r\\n     *                    next/WHAT\"\\r\\n     *                    aka \"write-what-where\"\\r\\n     * linkedListNext->prev = linkedListPrev  \"at the address that next/WHAT points plus 4\\r\\n     *                    (because prev is the second field in \\'list\\' hence\\r\\n     *                    4 bytes away on 32b machines), write prev/WHERE\"\\r\\n     */']",
        "['/* POTENTIAL FLAW: Read data using a listen socket */', '/* Abort on error or the connection was closed */', '/* Append null terminator */', '/* Eliminate CRLF */']",
        "['/* Read input from a file */', '/* if there is room in data, attempt to read the input from a file */', '/* POTENTIAL FLAW: Read data from a file */', '/* Restore NUL terminator if fgets fails */']",
        "The code appears to be secure, with no evident vulnerabilities or potential security breaches.",
        "['/* Copy length + 1 to include NUL terminator from source */', '/* POTENTIAL FLAW: data may not have enough space to hold source */']",
        "From the review conducted, it appears that the code is devoid of any vulnerabilities or security loopholes.",
        "['/* Initialize data */', '/* Abort on error or the connection was closed, make sure to recv one\\r\\n                 * less char than is in the recv_buf in order to append a terminator */', '/* FLAW: Use a value input from the network */', '/* NUL-terminate string */', '/* Convert to short - ensure int to short conversion will be successful and if\\r\\n                 * not ensure that data will be negative */', '/* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,\\r\\n             * the sign extension could result in a very large number */', '/* strncpy() does not always NULL terminate */']",
        "[\"/* fill with 'A's */\", '/* null terminate */', \"/* fill with 'A's */\", '/* null terminate */', '/* FLAW: Set data pointer to a small buffer */', '/* null terminate */', '/* POTENTIAL FLAW: using memmove with the length of the dest where data\\r\\n         * could be smaller than dest causing buffer overread */']",
        "['/* execl - specify the path where the command is located */', '/* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */']",
        "The code appears to be secure, with no evident vulnerabilities or potential security breaches.",
        "['/* FLAW: Set data pointer to before the allocated memory buffer */', \"/* fill with 'C's */\", '/* null terminate */', '/* POTENTIAL FLAW: Possibly copy from a memory location located before the source buffer */', '/* Ensure null termination */', \"/* INCIDENTAL CWE-401: Memory Leak - data may not point to location\\r\\n         * returned by malloc() so can't safely call free() on it */\"]",
        "['/* Append input from an environment variable to data */', '/* If there is data in the environment variable */', '/* POTENTIAL FLAW: Read data from an environment variable */', '/* put data in array */']",
        "",
        "['/* POTENTIAL FLAW: Read data using a connect socket */', '/* Abort on error or the connection was closed, make sure to recv one\\r\\n             * less char than is in the recv_buf in order to append a terminator */', '/* Abort on error or the connection was closed */', '/* Append null terminator */', '/* Eliminate CRLF */']",
        "[\"/* fill with 0's */\", '/* POTENTIAL FLAW: Possible buffer overflow if data < 100 */']",
        "Based on the assessment, there are no indications of vulnerabilities or security breaches in the code.",
        "[\"/* fill with L'C's */\", '/* null terminate */', '/* POTENTIAL FLAW: Possible buffer overflow if the sizeof(data)-strlen(data) is less than the length of source */']",
        "The code appears to be secure, with no evident vulnerabilities or potential security breaches.",
        "['/* FLAW: Set a pointer to a \"small\" buffer. This buffer will be used in the sinks as a destination\\r\\n     * buffer in various memory copying functions using a \"large\" source buffer. */', '/* null terminate */', '/* put data in array */']",
        "['/* define a function pointer */', '/* Initialize data */', '/* POTENTIAL FLAW: Set data to a random value */', '/* use the function pointer */']",
        "There are no apparent vulnerabilities or security breaches present in the analyzed code.",
        "['/* Append input from an environment variable to data */', '/* If there is data in the environment variable */', '/* POTENTIAL FLAW: Read data from an environment variable */', \"/* POTENTIAL FLAW: user-supplied value 'n' could lead to very large loop iteration */\", '/* INCIDENTAL: CWE 561: Dead Code - non-avoidable if n <= 0 */', '/* avoid a dead/empty code block issue */']",
        "['/* Initialize data */', '/* FLAW: data is allocated on the stack and deallocated in the BadSink */', '/* POTENTIAL FLAW: Possibly deallocating memory allocated on the stack */']",
        "",
        "Upon examination, no vulnerabilities or security breaches were detected in the provided code.",
        "Upon examination, no vulnerabilities or security breaches were detected in the provided code.",
        "['/* POTENTIAL FLAW: Allocate memory without checking if the memory allocation function failed */']",
        "['/* Initialize data */', '/* POTENTIAL FLAW: Use a value input from the console using fgets() */', '/* Convert to float */']",
        "[\"/* fill with L'C's */\", '/* null terminate */', '/* POTENTIAL FLAW: Possible buffer overflow if the size of data is less than the length of source */']",
        "['/* POTENTIAL FLAW: Possibly deallocating memory allocated on the stack */']",
        "Based on the assessment, there are no indications of vulnerabilities or security breaches in the code.",
        "['/* null terminate */', '/* POTENTIAL FLAW: using memmove with the length of the dest where data\\r\\n         * could be smaller than dest causing buffer overread */']",
        "The code appears to be secure, with no evident vulnerabilities or potential security breaches.",
        "Upon examination, no vulnerabilities or security breaches were detected in the provided code.",
        "['/* Initialize count */', '/* POTENTIAL FLAW: Set count to a random value */', '/* POTENTIAL FLAW: For loop using count as the loop variant and no validation\\r\\n             * This can cause a file to become very large */']",
        "['/* FLAW: Set a pointer to a \"small\" buffer. This buffer will be used in the sinks as a destination\\r\\n         * buffer in various memory copying functions using a \"large\" source buffer. */', '/* FIX: Set a pointer to a \"large\" buffer, thus avoiding buffer overflows in the sinks. */', \"/* fill with 0's */\", '/* POTENTIAL FLAW: Possible buffer overflow if data < 100 */']",
        "['/* FLAW: Use a negative number */']",
        "['/* Initialize data */', '/* POTENTIAL FLAW: Allocate memory without checking if the memory allocation function failed */']",
        "['/* cast void pointer to a pointer of the appropriate type */', '/* dereference dataPtr into data */', '/* POTENTIAL FLAW: Possible buffer overflow if data is larger than sizeof(dest)-wcslen(dest)*/']",
        "",
        "['/* Initialize data */', '/* FLAW: Use a negative number */']",
        "After careful scrutiny, it can be concluded that the code is devoid of any vulnerabilities or potential security threats.",
        "No security vulnerabilities or breaches were found during the evaluation of the code.",
        "The code seems to be robust and secure, showing no signs of vulnerabilities or security risks.",
        "['/* POTENTIAL FLAW: Set data to point to a wide string */']",
        "['/* POTENTIAL FLAW: Read data using a connect socket */', '/* Abort on error or the connection was closed, make sure to recv one\\r\\n                 * less char than is in the recv_buf in order to append a terminator */', '/* Abort on error or the connection was closed */', '/* Append null terminator */', '/* Eliminate CRLF */', '/* POTENTIAL FLAW: Do not specify the format allowing a possible format string vulnerability */']",
        "['/* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough\\r\\n         * for the strcpy() function to not cause a buffer overflow */', '/* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */', '/* Copy a small string into myString */']",
        "['/* Initialize data */', '/* FLAW: Initialize memory buffer without checking to see if the memory allocation function failed */']",
        "['/* POTENTIAL FLAW: Convert data to a short, possibly causing a truncation error */']",
        "Based on the assessment, there are no indications of vulnerabilities or security breaches in the code.",
        "After careful scrutiny, it can be concluded that the code is devoid of any vulnerabilities or potential security threats.",
        "['/* Initialize data */', '/* POTENTIAL FLAW: data is interpreted as an unsigned int - if its value is negative,\\r\\n             * the sign extension could result in a very large number */', '/* strncpy() does not always NULL terminate */']"
    ]
}